[{"title":"进度最慢的","url":"https://threewater.xyz/2021/05/26/进度最慢的/","content":"<p>我们组进度最慢的就是我了，别人都已经写完详细设计和需求分析，我的详细设计才刚开始，明天一定要写完详细设计，然后留两天的时间研究代码，下星期开始写。加油吧</p>\n","categories":[],"tags":["-日记"]},{"title":"得到表扬","url":"https://threewater.xyz/2021/05/21/得到表扬/","content":"<p>今天早会又延迟了，上午基本上啥事也干不了。今天组长统计了一下进度，我应该是最慢的，我也是任务最少的。今天组长让我们完成需求分析的编写，组长表扬了我。说我做的不错，可以参考参考。</p>\n<p>今天总算是开窍了，对整个业务系统有了一定的了解，也知道大概怎么开发了，只是还是有些细节掌握的不是很明白，还是要多看COBOL明天争取把流程图补完，这个东西挺重要的，整个思路就靠它了，理解业务也靠他了。</p>\n<p>今天有个新同事做我对面，本来以为他很厉害，结果发现他也是半吊子，不过他不是我们组的。</p>\n<p>知道了整个系统的架构之后，我发现这个任务还是挺轻松的。</p>\n","categories":[],"tags":["-日记"]},{"title":"安装了个宽带","url":"https://threewater.xyz/2021/05/20/安装了个宽带/","content":"<p>今天安装了个宽带，花了300块钱。感觉生活太滋润了，没有那种紧迫感。基本上把工作之外的事干的差不多了。以后就可以权身心投入工作中了。</p>\n","categories":[],"tags":["-日记"]},{"title":"感觉很浮躁","url":"https://threewater.xyz/2021/05/18/感觉很浮躁/","content":"<p>感觉最近工作都很浮躁，脑子里一团浆糊，看代码也看不太进，总是容易被各种东西打断，有时候和别人说几句话，思路就断了，有时候别人问问题思路也断了，吃一顿午饭或者晚饭，思路也断了。有时候只想一个人安安静静的看代码，但是又显得不合群。我好像不太适合多任务处理，适合进行深度思考。看代码的时候微信工作群总是闪，不看吧又容易错过消息，看吧，思路又容易断。</p>\n<p>今天看了一下同事的详细设计文档，感觉也就那样。列出具体调用的哪些外部接口，自己又暴露了哪些接口。然后这个程序所操作的数据库。然后写一下这个程序的业务步骤，大致也就是把各种字段的中文名配合IF/ELSE翻译一下。</p>\n<p>明天我们组长就回来了，又要开始艰巨的任务了，总之，顺其自然吧。不要太过，不要太激进，跟着他们走，总是不会错的。</p>\n<p>有时候，我总是会对某些事情加入自己的主观判断，以后我希望自己不要对某些事物过度解读吧，这样也能少一些烦恼。</p>\n<p>明天看看能不能去吃个早饭。争取早点公司。</p>\n","categories":[],"tags":["-日记"]},{"title":"又是星期1","url":"https://threewater.xyz/2021/05/17/又是星期1/","content":"<p>今天组长又请假了。今天我才真正的看懂COBOL代码，明白了哪些是输参，哪些是出参，以及程序之间的调用，程序之间是如何传递参数的，以及程序是如何读取表数据的。哪些参数是外部调用需要传入的。但是还是有些地方存在疑问，COBOL的文件读取，以及程序顺序调用这一块，还是要看看，以及用组件封装的文件读取又是怎么一回事。还有就是明天要列取出程序调用的关系图，一级详细的传入和传出参数。</p>\n","categories":[],"tags":["-日记"]},{"title":"今天没有晨会","url":"https://threewater.xyz/2021/05/14/今天没有晨会/","content":"<p>昨天断了一天，没有写日记，以后还是要坚持写，昨天开了一天的会议，上午开会进行安全培训，下午也是开会，一直在开会。开了一天，昨天晚上倒是清净了一点，看了一点COBOL，今天没有开晨会，但是因为没有我的任务，所以我也就没有参加。今天看了一天的代码，总算把一个程序的逻辑理了一遍，感觉还行，不是很难。主要是输入输出这一块。不是知道哪个变量是用来输出的或者是跟其它程序打交道的，哪些变量又是自己内部使用的。包括我调用这个程序，我想要传入一些什么参数，目前还不太清楚。</p>\n<p>昨天晨会还是能很直观的感受到我与大佬的差距，昨天开会哪个DBA，看起来好年轻，竟然啥都会。有些SQL的关键字，我甚至见都没见过，还有一个女生，是安全部门的，跟我差不多大，但是人家对安全漏洞的了解竟然如此扎实。我离大佬只差亿点点。</p>\n<p>今天的话还不错，公司下班前发了一点吃的，昨天开会也有西瓜吃，或许这就是大公司吧。！！</p>\n<p>唯一的遗憾就是不能用自己的电脑。少了一点感觉。</p>\n","categories":[],"tags":["-日记"]},{"title":"今天见了领导","url":"https://threewater.xyz/2021/05/12/今天见了领导/","content":"<p>今天见了领导，分配了任务，感觉有点难，整个人混混噩噩的，有点不在状态，主要是中午没有睡好，下午好困。。。</p>\n<p>今天主要是对照总体设计的文档看了一下代码。尝试去理解整个程序的逻辑，感觉变量有点多，有很多的变量都不知道它的涵义，不是太理解，还需要配合总体设计文档多看看。</p>\n","categories":[],"tags":["-日记"]},{"title":"今天讲了cobol语言","url":"https://threewater.xyz/2021/05/11/今天讲了cobol语言/","content":"<p>z昨天考试，今天有一个同事因为昨天没考，今天他补考了。还有哦一位同事，因为昨天考的太差，好像被调到运维去了。</p>\n<p>今天好多新来的同事都走了。要么就是调部门要么就是搬到其它部门去了，我们部门新来的同事，就只剩下我们两个了。他应该是个大佬，只是不太爱说话。可能人家只是不想说话吧。程序员都不太喜欢说一些无聊的废话。他应该挺牛逼的。今晚领导给我们讲了一下COBOL语言。领导刚开始好像有点紧张？一个30多岁的人，讲课竟然还会紧张？一看就是老程序员了。总之，讲的还是不错的，收获颇多。</p>\n<p>cobol有点像是汇编语言，有子程序的概念。他的数据类型就只有两个，或者说一个？大致可以分为数据部分和代码部分，数据部分就是对内存里面的字节进行命名，规定每个字节可以存放什么类型的数据。代码有点像是汇编的感觉。还有子程序的概念。好像没有线程相关的操作。</p>\n<p>明天我要去见组长，下午有一个动员会议。后天有一个新员工培训会议。</p>\n<p>明天的话，就继续了解一下COBOL。看看能不能装上提示插件。</p>\n","categories":[],"tags":["-日记"]},{"title":"5月10日","url":"https://threewater.xyz/2021/05/10/5月10日/","content":"<p>今天进行了笔试，笔试过程一切顺利，总共有三道题，前面两到都自己做出来了，最后一道Calendar的API记得不太熟，用手机百度了一下，算是做对了一半吧，考完了才反应过来原来那么简单。</p>\n<p>今天也发了电脑，键盘老旧，鼠标也是，显示器分辨率也极低。</p>\n<p>不过还好总算发电脑了，一切进入正轨。</p>\n<p>争取搞通项目逻辑，最好能每天把项目逻辑记下来，为以后面试做准备。以后每天可以刷一道LeetCode了。有时间了，本来以为我会被裁员，现在感觉应该不会了，争取搞好同事关系，最好不要得罪任何人，特别是年纪大的。</p>\n<p>今天忘记带充电器了，手机电量不足，不能联网了。就这样吧。</p>\n<p>总之一切都在往好的方向发展，加油吧。</p>\n<p>睡了。。</p>\n","categories":["日记"],"tags":["日记"]},{"title":"5月8日：找到工作了","url":"https://threewater.xyz/2021/05/09/found-a-job/","content":"<p>内心总想说点什么，以后就在这里记一下我的心里状态吧，因为我也没有啥交心的朋友可以说<br>况且，作为一个男人，说这些矫情的话还会惹人耻笑。所以也就只能说给自己听了<br>仿佛又回到了高一，每天晚上都写日记的时候，把今天遇到的一些好人，好事，坏人，坏事<br>以及自己内心的一些想法都记录在了本子上。以后我希望我能把这个习惯保持下去，虽然有部电影<br>里面说：正经人谁写日记啊！我不明白是什么意思。好像写日记只是有一点幼稚？特别是成年了还写<br>日记，可能就觉得有点幼稚吧。我不知道，也许我就是一个幼稚的人吧，我觉得对于内心想法比较<br>丰富的人来说，写日记获取也是一种娱乐方式？自娱自乐的那种。</p>\n<p>明天有一场笔试，也是我工作第一天，也可能是最后一天，因为笔试不过的话，我就要滚蛋了。<br>说起来也挺讽刺的，明明面试过了，一切都已经弄好了。结果还要笔试。<br>我昨天有个领导说想要了解一下我的个人情况好分组，我回答的不好，可能。。。。我还没入职，就要被<br>裁掉了吧。</p>\n<p>裁掉了我又能去哪呢？我房子也租了，那我大概会在佛山再找一份工作吧。这样的话写代码可能就真成了一种<br>爱好了。以后想进入可能就很难了。</p>\n<p>刚刚停掉了我的博客，这些东西放到晚上还是太矫情了。</p>\n<p>有时候，我觉得作为男人，活着真的好累，很多事情只能自己扛着，说都没地方说。<br>说是说现在男权社会，但是我感觉男生要比女生背负更多的压力，这种压力还没有人可以说<br>只能自己默默承受着。</p>\n<p>今天租了个房子发了600多，本来有一间挺好的房子，只要500的，结果被别人租走了。<br>浪费了100块押金，然后租了600块的房子，虽然贵了点，但是至少没有那种住北京地下室的感觉。<br>光线很好。</p>\n<p>如果明天笔试过了，我就要真正开始工作了，下个月我的经济就可以回正了。</p>\n<p>我前几天还看到这样一段话，是酷安首富说的，后面有位老哥这样评论</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">吾尝终日而思矣，不如须臾之所学也；吾尝跂而望矣，不如登高之博见也。登高而招，臂非加长也，而见者远；顺风而呼，声非加疾也，而闻者彰。假舆马者，非利足也，而致千里；假舟楫者，非能水也，而绝江河。君子生非异也，善假于物也。(君子生 通：性)</span><br></pre></td></tr></table></figure>\n\n<p><code>君子生非异也，善假于物也。</code>以前不懂，现在终于明白是什么意思了，意思是说：要善于利用周围的条件，这样才能看的更高更远<br>不到万不得已，不要去做破釜沉舟的事情，尽量少吃苦。</p>\n<p>关于以后的打算，不沉迷碎片化娱乐，每天写日记，努力完成工作上的任务，学习别人在工作中的为人处世。<br>不悲观，如果一切都稳定下来了，工资也回正了，那就开始找女朋友吧，见一见老同学。都联系一下，最好能吃个饭。</p>\n<p>我发现在哪都一样，最重要的是人，最复杂的也是人，最有趣的也是人。</p>\n","categories":["日记"],"tags":["日记"]},{"title":"shadowsocks-go源码分析","url":"https://threewater.xyz/2021/03/23/shadowsocks-go-read/","content":"<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><p>浏览器建立与socks-client的TCP连接<br>浏览器通过刚刚建立的TCP连接发送他所支持的socks版本以及认证方式<br>socks客户端从中选择其中一种(默认选择无加密的那种),回复响应报文<br>浏览器根据socks客户端选择的认证方式发送socks请求报文,同时,报文中包含了希望与哪些IP建立TCP连接<br>socks-client解析出其中的地址和端口,然后发送socks响应报文,表示可以建立连接<br>socks-client建立与socks-server的TCP连接<br>根据用户所配置的加密算法,对其TCP连接进行加密<br>加密成功后,sock-client发送前面解析出来的地址和端口发送给socks-server<br>由socks-server进行拨号,建立与目标地址和端口的TCP连接<br>以上过程完成之后,我们就有了这样一条连接<br>浏览器&lt;——无加密TCP——&gt;socks-client&lt;——加密TCP——&gt;socks-client&lt;——TCP——&gt;baidu<br>接下来,浏览器继续像这连接中发送数据<br>socks-client接收到数据之后,对其进行加密,然后把数据复制到与sock-server的TCP连接中<br>socks-server收到数据后,对其解密,然后再复制到与百度的TCP连接中.</p>\n<h2 id=\"关于加密\"><a href=\"#关于加密\" class=\"headerlink\" title=\"关于加密\"></a>关于加密</h2><p>首次socks-client向socks-server发送数据时<br>socks-client会生成一个随机的盐值用无加密的方式发送给server<br>当server首次读取client的数据时,会首先读取这个盐值,用来初始化自己的加密算法<br>如果server首次想要像client放送数据时,server也会生成一个盐值,放送给client<br>当client想要首次想要读取数据时,也会先读取到这个盐值,然后再初始化自己的算法<br>也就是说,对于client来说,读取和写入使用的是完全不同的盐值.对于server来说也是如此</p>\n<p>通过盐值+程序启动时我们设置的密码进行通信</p>\n","categories":[],"tags":[]},{"title":"面试准备之-多线程","url":"https://threewater.xyz/2020/11/15/面试准备之-多线程/","content":"<ol>\n<li>SimpleDateFormat不是线程安全的</li>\n</ol>\n","categories":[],"tags":[]},{"title":"rabbitmq概念","url":"https://threewater.xyz/2020/11/04/rabbitmq概念/","content":"<h3 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h3><p>它是一个消息服务中间件，是生产者和消费者模式的一种实现<br>生产者可以往rabbitmq发送消息，消费者可以接收rabbit中的消息</p>\n<h3 id=\"RabbitMQ的几个概念\"><a href=\"#RabbitMQ的几个概念\" class=\"headerlink\" title=\"RabbitMQ的几个概念\"></a>RabbitMQ的几个概念</h3><h4 id=\"Exchange-交换机\"><a href=\"#Exchange-交换机\" class=\"headerlink\" title=\"Exchange(交换机)\"></a>Exchange(交换机)</h4><p>生产者可以往Exchange发送消息。</p>\n<h4 id=\"Queue-队列\"><a href=\"#Queue-队列\" class=\"headerlink\" title=\"Queue(队列)\"></a>Queue(队列)</h4><p>消费者监听队列，或者说从队列中取出消息</p>\n<h4 id=\"Exchange和Queue绑定\"><a href=\"#Exchange和Queue绑定\" class=\"headerlink\" title=\"Exchange和Queue绑定\"></a>Exchange和Queue绑定</h4><p>Exchange会把生产者发送来的消息转发到Queue<br>Exchange也可以根据不同的路由策略决定发到指定的Queue</p>\n<h4 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h4><p>表示消费者与RabbitMQ维持的连接</p>\n<h3 id=\"Confirm\"><a href=\"#Confirm\" class=\"headerlink\" title=\"Confirm\"></a>Confirm</h3><p>发送消息可以配置一个Confirm回调函数<br>如果消息没有发送到交换机，这个函数就会被调用</p>\n<h3 id=\"Return\"><a href=\"#Return\" class=\"headerlink\" title=\"Return\"></a>Return</h3><p>如果交换机没能把消息发送到队列<br>那么这个函数就会被调用</p>\n<h3 id=\"Exchange的种类\"><a href=\"#Exchange的种类\" class=\"headerlink\" title=\"Exchange的种类\"></a>Exchange的种类</h3><p>Exchange总共只有4种<br><code>Direct</code>：\n当Queue到DirectExchange时，需要指定一个路由策略(routing key)<br>生产者发送消息也会带一个routing key。如果这两个routing key一样<br>就会匹配，DirectExchange就会进行转发</p>\n<p><code>fanout</code>:\n广播交换机，不需要指定routing key。<br>他会转发所有消息到其绑定的队列</p>\n<p><code>topic</code>:\n主题交换机是Direct的高级版。<br>Direct是安全匹配。Topic可以支持通配符，也就是支持模糊匹配</p>\n<p><code>headers</code>:\n消息除了消息体，还可以设置消息头。<br>headers可以根据头部信息进行匹配</p>\n<h4 id=\"Queue的种类\"><a href=\"#Queue的种类\" class=\"headerlink\" title=\"Queue的种类\"></a>Queue的种类</h4><p>根据Queue定义时设置的属性不同，可以分为以下两种</p>\n<p><code>延时队列</code><br>表示这个队列中的消息，过了一段时间后，如果没人取就会丢掉</p>\n<p><code>死信队列</code><br>消费者拒收(nack)了消息，又不让消息重新重新入队<br>那么消息就会被丢弃(默认)，如果这个队列配置了死信队列，<br>那么消息不会被简单的丢弃，而是发送到死信交换机，和死信队列<br>死信队列其实和普通的队列没有什么区别。只是其它队列创建时<br>可以有选择的设置被拒收的消息是丢弃还是选择发送到死信队列。</p>\n<p><code>懒队列</code><br>LazyQueue和普通的队列不同，Lazy会把消息立即持久化到磁盘。<br>这样如果队列很长，也不用担心队列撑爆内存。</p>\n","categories":[],"tags":[]},{"title":"Spring自动配置","url":"https://threewater.xyz/2020/10/28/spring-auto-config/","content":"<p>启动类启动的时候，会扫描启动类所在的包以及子包，<br>比如启动类是<code>xyz.threewater.Demo</code>那么<code>xyz.threewater</code>包下的所有类<br>都会被扫描，无论他们是否在同一jar包里面，或者是否在同一个项目下面</p>\n<p>那么这些不在<code>xyz.threewater</code>包下面的配置类怎么办呢？<br>spring还会加载<code>spring.facotries</code>文件里面配置的配置类。<br>如果这个里面还是没有怎么办？<br>就必须通过<code>@Import</code>导入了。</p>\n","categories":[],"tags":[]},{"title":"handler-exeception-resolver","url":"https://threewater.xyz/2020/10/26/handler-exeception-resolver/","content":"<p>SpringMVC的同一异常处理的顶级父接口是<code>HandlerExceptionResolver</code><br>里面只有一个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"function\">ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tHttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>spring在执行完controller之后，会对这个controller执行的方法进行一个try catch，然后在catch里面就会<br>获取容器中所有的是这个接口的bean，然后执行resolveException方法，由于<code>HandlerExceptionResolver</code><br>可能含有多个，spring会按顺序调用如果其中一个能返回modelandview。就不会往下执行，直接直接返回modelanview</p>\n<p>当然我们除了实现这个接口注册到容器中之外，Spring还为我们提供了以下形式</p>\n<p>使用Spring自带的<code>SimpleMappingExceptionResolver</code>。通过他我们可以定义哪些异常对应哪个视图。</p>\n<p>或者使用@ExceptionHandler注解配置。<br>配置这个注解之后，</p>\n","categories":[],"tags":[]},{"title":"water-shop总结","url":"https://threewater.xyz/2020/10/26/water-shop总结/","content":"<p>water-shop是一个微服务的DEMO</p>\n<p>主要有首页模块，单点登录模块，后台管理模块，字典维护模块，搜索模块，商品模块，用户管理模块</p>\n<p>所采用的技术有<br>SpringBoot:基础框架<br>SpringCloud：微服务基础框架<br>zuul：做一个微服务网关，负责为前台提供一个统一的调用地址，转发请求<br>erueka：负责服务的注册与发现，需要调用的服务都可以从erueka中找到<br>SpringConfig:负责配置文件的统一与分片管理<br>Feign：负责通过HTTP请求的方式远程调用其他服务<br>elasticSearch：负责一个大数据的搜索<br>rabbitMQ：用来解耦，负责各个模块之间的异步通信<br>redis：用来保存分布式的token及用户登录状态，mysql和elasticsearch主键的自增等<br>mysql：放数据</p>\n<p>整个项目模块之间的依赖关系如下</p>\n<p><img src=\"water-shop%E6%80%BB%E7%BB%93%5C%E6%A8%A1%E5%9D%97%E5%9B%BE.png\" alt=\"模块图\"></p>\n<h2 id=\"各个模块介绍\"><a href=\"#各个模块介绍\" class=\"headerlink\" title=\"各个模块介绍\"></a>各个模块介绍</h2><h3 id=\"首页模块\"><a href=\"#首页模块\" class=\"headerlink\" title=\"首页模块\"></a>首页模块</h3><p>负责所有商品的展示</p>\n<h3 id=\"后台管理模块\"><a href=\"#后台管理模块\" class=\"headerlink\" title=\"后台管理模块\"></a>后台管理模块</h3><p>负责商品的的添加删除，用户的添加和删除，以及字典模块的添加和删除</p>\n<p>他本身只是提供一些页面，数据都是来自其他模块，通过Feign调用其它模块</p>\n<h3 id=\"登录与注册模块\"><a href=\"#登录与注册模块\" class=\"headerlink\" title=\"登录与注册模块\"></a>登录与注册模块</h3><p>负责用户登录，以及登录后的token保存，这样访问其他服务时都会戴上一个token。</p>\n<p>这token采用的JSON WEB TOKEN 他是一个自校验的token不像session那样服务端也要保存一个与之对应的sessionID。</p>\n<p>登录之后，服务端会根据密码生成一个token这个token保存了用户标识，其他没有登录的用户不能自己生成token，因为他们没有生成token的密码，但是其它用户登录完之后又可能会被窃取</p>\n<p>修改密码时，会像用户发送一封邮件，这个邮件包含了一个token，这个token中带有用户的标识，同时还会有一个过期时间，通过这个过期时间，防止一个token一直有效，同时redis会保存一个这个token是否被使用的一个状态，保证了token的一次性使用。</p>\n<p>由于是通过电子邮件发送，所以这个token，既可以表明用户的身份，有可以防止窃取。</p>\n<h3 id=\"商品模块\"><a href=\"#商品模块\" class=\"headerlink\" title=\"商品模块\"></a>商品模块</h3><p>这个模块是作为微服务的<code>后端</code>为其他应用提供服务。其他服务通过Feign接口调用它。</p>\n<h3 id=\"用户模块\"><a href=\"#用户模块\" class=\"headerlink\" title=\"用户模块\"></a>用户模块</h3><p>用户模块也是作为后端，他没有页面，只是纯粹的给数据</p>\n<h3 id=\"ES搜索模块\"><a href=\"#ES搜索模块\" class=\"headerlink\" title=\"ES搜索模块\"></a>ES搜索模块</h3><p>所有负责ES操作的就交给他</p>\n<h3 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h3><p>后台管理添加商品时，会把添加的消息发送到MQ，然后商品模块和ES模块会从消息队列中取出消息</p>\n<h3 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h3><p>主要是保存用户注册时生成的token，token的二次使用</p>\n<p>以及为了使Mysql和ES数据的同步。</p>\n","categories":[],"tags":[]},{"title":"spring-cloud","url":"https://threewater.xyz/2020/10/10/spring-cloud/","content":"<h2 id=\"1-服务的注册和发现eureka\"><a href=\"#1-服务的注册和发现eureka\" class=\"headerlink\" title=\"1. 服务的注册和发现eureka\"></a>1. 服务的注册和发现eureka</h2><p>eureka分为server和client俩部分，server负责收集的保存所有client的信息<br>当前服务可以从eureka的server中获取其它的服务的地址，来进行调用。<br>eureka的server也可以配置集群，来保证高可用，不会因为一个server的宕机而导致整个服务的不可用</p>\n<p>eureka采用心跳监测机制，监测每个服务的存活情况，如果哪个服务没有在规定的时间类接收到心跳。<br>则从eureka的server中移除。<br>eureka的配置都保存在<code>EurekaClientConfigBean</code>配置类中。其中默认的配置为</p>\n<p>30秒从eureka的server中获取最新的服务信息<br>30秒server与server之间同步一次各自持有的实例<br>每隔5分钟查询一次是否有新的eureka server 添加或者删除<br>8秒决定从server获取数据的超时时间</p>\n","categories":[],"tags":[]},{"title":"elasticsearch总结","url":"https://threewater.xyz/2020/09/23/elasticsearch总结/","content":"<p>首先,elasticsearch是用来搜索的.</p>\n<ol>\n<li>索引(index),就是数据库</li>\n<li>类型(type),就是就是一张表</li>\n<li>域(field),就是表中的列</li>\n</ol>\n<p>每一个域,都有对应的类型,这里的类型可常见的Mysql类型不同.<br>他有一个text类型,这类型支持进行关键字搜索,类似于搜索引擎.</p>\n<p>elasticsearch为我们提供了丰富的查询方式,这一点是传统数据库所不具备的.</p>\n<ol>\n<li>根据ID查询</li>\n<li>根据多个id查询</li>\n<li>term关键字查询,不会进行拆分,只要text包含这个关键字,才能查询得到</li>\n<li>match查询,会进行拆分,只要其中一个关键字匹配就行</li>\n<li>prefix查询,前缀查询</li>\n<li>fuzzy查询,和prefix差不多</li>\n<li>wildCard匹配,通配符匹配,*(匹配任意多个),?(匹配任意一个).</li>\n<li>range查询,范围查询,针对数值类型</li>\n<li>regexp查询,正则表达式查询</li>\n</ol>\n<p>elasticsearch查询时还可以指定一些一些插件</p>\n<ol>\n<li>高亮插件,可以对文本中包含的关键字包上前缀和后缀标签</li>\n<li>统计插件,支持对查出来的数据进行统计</li>\n</ol>\n<p>Lucene</p>\n<h3 id=\"倒排索引\"><a href=\"#倒排索引\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h3><p>就是一个以单词(Term)为键，以文档(Field)作为值的hashMap<br>这个HashMap称为索引(Index).<br>Token就是对Term的包装，或者称为Term的元数据<br>分片索引(Shard)：在单体es中索引保存在一个服务器上，如果实在<br>集群中，索引会被平均的分配到其他机器上<br>索引副本(Replica)：类似与redis的主从复制，分片可以解决单机容量的限制<br>为了防止高并发，以及防止数据的丢失。</p>\n","categories":[],"tags":[]},{"title":"nginx","url":"https://threewater.xyz/2020/09/19/nginx/","content":"<p>当nginx作为tomcat的代理的时候,<br>他会接管所有请求,接收浏览器发送过来的请求,再转发给tomcat,<br>然后接收tomcat的响应,最后再发给客户端.<br>在tomcat中,<code>httpServletRequest.getRequestURI();</code>获取的是项目路径<br><code>httpServletRequest.getRequestURL()</code>这获取的是 <code>http://round(轮询的名称)//${你的项目路径}</code></p>\n<p>如果负债均衡中其中一台tomcat down掉了,那么nginx在等待一段时间后尝试<br>下一台服务器</p>\n","categories":[],"tags":[]},{"title":"Docker配置备份","url":"https://threewater.xyz/2020/09/19/Docker配置备份/","content":"<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> 指定当前自定义镜像依赖的环境</span><br><span class=\"line\"><span class=\"keyword\">copy</span> 将相对路径下的内容复制到自定义镜像中</span><br><span class=\"line\"><span class=\"keyword\">workdir</span> 声明镜像的默认工作目录</span><br><span class=\"line\"><span class=\"keyword\">run</span> docker build镜像时执行</span><br><span class=\"line\"><span class=\"keyword\">cmd</span> docker run 时执行</span><br></pre></td></tr></table></figure>\n\n<p>docker-compose.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  mysql:</span>           <span class=\"comment\"># 服务的名称</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span>   <span class=\"comment\"># 代表只要docker启动，那么这个容器就跟着一起启动</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">daocloud.io/library/mysql:5.7.4</span>  <span class=\"comment\"># 指定镜像路径</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">mysql</span>  <span class=\"comment\"># 指定容器名称</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">3306</span><span class=\"string\">:3306</span>   <span class=\"comment\">#  指定端口号的映射</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">root</span>   <span class=\"comment\"># 指定MySQL的ROOT用户登录密码</span></span><br><span class=\"line\"><span class=\"attr\">      TZ:</span> <span class=\"string\">Asia/Shanghai</span>        <span class=\"comment\"># 指定时区</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">     -</span> <span class=\"string\">/opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql</span>   <span class=\"comment\"># 映射数据卷</span></span><br><span class=\"line\"><span class=\"attr\">  tomcat:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">daocloud.io/library/tomcat:7.0.59-jre8</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">/opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs</span></span><br></pre></td></tr></table></figure>\n\n<p>docker-compose与Dockerfile整合</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3.1'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  ssm:</span></span><br><span class=\"line\"><span class=\"attr\">    restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span>            <span class=\"comment\"># 构建自定义镜像</span></span><br><span class=\"line\"><span class=\"attr\">      context:</span> <span class=\"string\">../</span>      <span class=\"comment\"># 指定dockerfile文件的所在路径</span></span><br><span class=\"line\"><span class=\"attr\">      dockerfile:</span> <span class=\"string\">Dockerfile</span>   <span class=\"comment\"># 指定Dockerfile文件名称</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"attr\">ssm:1.0.1</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">ssm</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"attr\">      TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"redis集群","url":"https://threewater.xyz/2020/09/18/redis集群/","content":"<h1 id=\"Redis的三种工作模式\"><a href=\"#Redis的三种工作模式\" class=\"headerlink\" title=\"Redis的三种工作模式\"></a>Redis的三种工作模式</h1><h3 id=\"1-主从复制\"><a href=\"#1-主从复制\" class=\"headerlink\" title=\"1. 主从复制\"></a>1. 主从复制</h3><p>读写分离,主服务器用来写,从服务器用来读.</p>\n<p>优点:是能够分担master的读压力</p>\n<p>缺点:<br>但是对于客户端来说,就麻烦了,意味着要区分主从.<br>编程时要规定用哪个redis写,用哪个redis读.<br>如果master down了,就不能进行写入.<br>存储容量受master容量限制</p>\n<h3 id=\"1-哨兵模式\"><a href=\"#1-哨兵模式\" class=\"headerlink\" title=\"1. 哨兵模式\"></a>1. 哨兵模式</h3><p>就是主从模式的基础上加上哨兵.<br>通过哨兵监听master的状态,如果master down了,几个哨兵推选出新的master.<br>哨兵向slave发送升级为master的指令.</p>\n<p>优点:<br>客户端连接哨兵,只要哨兵不down,就能保证能进行的读写</p>\n<p>缺点:<br>存储容量受master容量限制,达到master最大容量就无法存储了</p>\n<h3 id=\"3-集群\"><a href=\"#3-集群\" class=\"headerlink\" title=\"3. 集群\"></a>3. 集群</h3><p>集群中的每一个节点,都有一个master和slave,他们共同组成一个节点<br>master负责所有读写,slave不进行读写,只是做一个备份.<br>如果master down了,slave升级为master.</p>\n<p>多个这样的节点组成一个集群.<br>客户端发过来的数据,经过hash计算决定应该存在哪个节点中.</p>\n<p>优点:<br>无限容量.<br>在任何一个可用的节点都能操纵整个集群</p>\n<p>缺点:<br>如果某一个节点的master down掉了,那这个节点就无法连接,客户端必须手动切换到其它节点<br>slave无法分担master的压力.</p>\n<h2 id=\"Redis主从配置备份\"><a href=\"#Redis主从配置备份\" class=\"headerlink\" title=\"Redis主从配置备份\"></a>Redis主从配置备份</h2><p>Redis配置完主从之后,一个down掉了,就会有新的Redis成为主<br>但是IP也会变,新的主不会沿用旧的主的IP.<br>如果我们还是用旧的IP连,就会出现无法设置只能读取的情况.<br>因此,我们要用哨兵的IP来连接.</p>\n<p>所有哨兵上都会间接连接到master,既能读也能取</p>\n<h3 id=\"主从配置\"><a href=\"#主从配置\" class=\"headerlink\" title=\"主从配置\"></a>主从配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis1.conf </span><br><span class=\"line\">port 6379</span><br><span class=\"line\"># redis2.conf</span><br><span class=\"line\">replicaof 192.168.230.128 6379</span><br><span class=\"line\">port 6380</span><br><span class=\"line\"># redis3.conf</span><br><span class=\"line\">replicaof 192.168.230.128 6379</span><br><span class=\"line\">port 6381</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"哨兵配置\"><a href=\"#哨兵配置\" class=\"headerlink\" title=\"哨兵配置\"></a>哨兵配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 哨兵1</span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">port 26379</span><br><span class=\"line\">sentinel monitor master 192.168.230.128 6380 2</span><br><span class=\"line\">sentinel down-after-milliseconds master 1000</span><br><span class=\"line\"></span><br><span class=\"line\"># 哨兵2</span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">port 26380</span><br><span class=\"line\">sentinel monitor master 192.168.230.128 6380 2</span><br><span class=\"line\">sentinel down-after-milliseconds master 1000</span><br><span class=\"line\"></span><br><span class=\"line\"># 哨兵3</span><br><span class=\"line\">daemonize yes</span><br><span class=\"line\">port 26381</span><br><span class=\"line\">sentinel monitor master 192.168.230.128 6380 2</span><br><span class=\"line\">sentinel down-after-milliseconds master 1000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Java代码\"><a href=\"#Java代码\" class=\"headerlink\" title=\"Java代码\"></a>Java代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JedisPoolConfig poolConfig=<span class=\"keyword\">new</span> JedisPoolConfig();</span><br><span class=\"line\">Set&lt;String&gt; sentinelIp=<span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//这里添加的哨兵的IP</span></span><br><span class=\"line\">sentinelIp.add(<span class=\"string\">\"192.168.230.128:26379\"</span>);</span><br><span class=\"line\">sentinelIp.add(<span class=\"string\">\"192.168.230.128:26380\"</span>);</span><br><span class=\"line\">sentinelIp.add(<span class=\"string\">\"192.168.230.128:26381\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//Sentinel哨兵连接池</span></span><br><span class=\"line\">sentinelPool=<span class=\"keyword\">new</span> JedisSentinelPool(<span class=\"string\">\"master\"</span>,sentinelIp,poolConfig);</span><br><span class=\"line\">sentinelPool.getResource();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis集群\"><a href=\"#Redis集群\" class=\"headerlink\" title=\"Redis集群\"></a>Redis集群</h2><p>主从复制是实现了读写分离.<br>其中两台复制主redis的数据<br>保证了数据的安全,<br>而Redis集群是:多个redis都独立保存数据,不存在数据冗余,如果当前redis没有数据,<br>会从其它redis中取得,集群中的redis不会存在相同的key.<br>对外界来说,就好像一个Redis,但是他不能保证数据的安全,一个Redis被毁坏了,那数据就丢失了.</p>\n<p>每个redis一份</p>\n<p>只要连接上了集群中的任意一台,就相当于连接上了整个集群</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis.conf</span><br><span class=\"line\"># 指定redis的端口号</span><br><span class=\"line\">port 8001</span><br><span class=\"line\"># 开启Redis集群</span><br><span class=\"line\">cluster-enabled yes</span><br><span class=\"line\"># 集群信息的文件</span><br><span class=\"line\">cluster-config-file nodes-8001.conf</span><br><span class=\"line\"># 集群的对外ip地址</span><br><span class=\"line\">cluster-announce-ip 192.168.206.138</span><br><span class=\"line\"># 集群的对外port</span><br><span class=\"line\">cluster-announce-port 8001</span><br><span class=\"line\"># 集群中实例相互通信的内部总线端口</span><br><span class=\"line\">cluster-announce-bus-port 18001</span><br></pre></td></tr></table></figure>\n\n<p>启动集群,任意一个redis内部执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster create 192.168.206.139:8001 192.168.206.139:8002 192.168.206.139:8003 192.168.206.139:8004 192.168.206.139:8005 192.168.206.139:8006 --cluster-replicas 1</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"死锁","url":"https://threewater.xyz/2020/09/17/死锁/","content":"<h2 id=\"产生死锁的必要条件\"><a href=\"#产生死锁的必要条件\" class=\"headerlink\" title=\"产生死锁的必要条件\"></a>产生死锁的必要条件</h2><ol>\n<li>互斥：一个资源，要么被占有，要么空闲</li>\n<li>占有和等待：一个进程在占有一个资源的同时，还可以占有其它资源</li>\n<li>不可抢占: 一个线程不能抢占另一个线程持有的资源</li>\n<li>循环等待：一个线程想获取对方的线程持有的资源，对方线程又想获取本线程自由的资源</li>\n</ol>\n<h2 id=\"死锁的处理方法\"><a href=\"#死锁的处理方法\" class=\"headerlink\" title=\"死锁的处理方法\"></a>死锁的处理方法</h2><ol>\n<li>鸵鸟策略：不处理，假装一切都没有发生</li>\n<li>死锁发生时，对其进行监测和恢复</li>\n<li>在程序开始就预防是死锁的发生</li>\n<li>在程序运行时，避免死锁的发生</li>\n</ol>\n<h2 id=\"来看一看每种死锁的细节\"><a href=\"#来看一看每种死锁的细节\" class=\"headerlink\" title=\"来看一看每种死锁的细节\"></a>来看一看每种死锁的细节</h2><h3 id=\"鸵鸟策略\"><a href=\"#鸵鸟策略\" class=\"headerlink\" title=\"鸵鸟策略\"></a>鸵鸟策略</h3><p>鸵鸟策略，吧头埋进沙子里</p>\n<h3 id=\"死锁的监测和恢复\"><a href=\"#死锁的监测和恢复\" class=\"headerlink\" title=\"死锁的监测和恢复\"></a>死锁的监测和恢复</h3><h4 id=\"1-对于每种类型的资源只能获取一个的情况\"><a href=\"#1-对于每种类型的资源只能获取一个的情况\" class=\"headerlink\" title=\"1. 对于每种类型的资源只能获取一个的情况\"></a>1. 对于每种类型的资源只能获取一个的情况</h4><p>画一个有向图，如果资源指向进程，表示资源属于进程。进程指向资源，表示进程请求资源。<br>如果有向图成环了，就表示死锁发生了。</p>\n<h4 id=\"2-对于每种类型的资源可以获取多个的情况\"><a href=\"#2-对于每种类型的资源可以获取多个的情况\" class=\"headerlink\" title=\"2. 对于每种类型的资源可以获取多个的情况\"></a>2. 对于每种类型的资源可以获取多个的情况</h4><p>把剩余的资源用矩阵表示，如果剩余资源的矩阵能够满足<br>其中一个线程运行就给该线程，以此重复直到所有线程都运行完<br>如果出现不能运行的，就表示该进程存在死锁</p>\n<h4 id=\"3-死锁的恢复\"><a href=\"#3-死锁的恢复\" class=\"headerlink\" title=\"3. 死锁的恢复\"></a>3. 死锁的恢复</h4><p>所有进程释放资源让其重新抢占。<br>所有线程回退到上一个状态<br>杀死其中的一个进程</p>\n<h3 id=\"死锁的预防\"><a href=\"#死锁的预防\" class=\"headerlink\" title=\"死锁的预防\"></a>死锁的预防</h3><p>在程序运行之前就阻止死锁发生</p>\n<h4 id=\"1-资源设置成可以共享的，不必互斥\"><a href=\"#1-资源设置成可以共享的，不必互斥\" class=\"headerlink\" title=\"1. 资源设置成可以共享的，不必互斥\"></a>1. 资源设置成可以共享的，不必互斥</h4><h4 id=\"2-在进程运行之前就尝试获取所需的所有资源\"><a href=\"#2-在进程运行之前就尝试获取所需的所有资源\" class=\"headerlink\" title=\"2. 在进程运行之前就尝试获取所需的所有资源\"></a>2. 在进程运行之前就尝试获取所需的所有资源</h4><h4 id=\"3-给资源编号，所有资源必须按顺序获取\"><a href=\"#3-给资源编号，所有资源必须按顺序获取\" class=\"headerlink\" title=\"3. 给资源编号，所有资源必须按顺序获取\"></a>3. 给资源编号，所有资源必须按顺序获取</h4><h3 id=\"死锁的避免\"><a href=\"#死锁的避免\" class=\"headerlink\" title=\"死锁的避免\"></a>死锁的避免</h3><p>在程序运行时避免死锁的发生。</p>\n<h4 id=\"1-安全状态监测\"><a href=\"#1-安全状态监测\" class=\"headerlink\" title=\"1. 安全状态监测\"></a>1. 安全状态监测</h4><p>当多个进程请求资源时，系统选择一个合理分配策略，保证所有进程都能够运行完<br>如果没有这样一种策略，系统拒绝运行这些线程。</p>\n","categories":[],"tags":[]},{"title":"vmware静态IP","url":"https://threewater.xyz/2020/09/14/vmware静态IP/","content":"<p>vmware设置静态IP</p>\n<p>添加或更改以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysconfig/network-scripts/ifcfg-$&#123;你的网卡接口ens33&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=&quot;static&quot;</span><br><span class=\"line\">IPADDR=192.168.230.128 #要设置的静态IP</span><br><span class=\"line\">NETMASK=255.255.255.0  </span><br><span class=\"line\">GATEWAY=192.168.230.2  #网关</span><br><span class=\"line\">DNS1=114.114.114.114   #DNS</span><br><span class=\"line\">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure>\n\n<p>使配置生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network start</span><br></pre></td></tr></table></figure>\n\n<p>查看IP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addresss/a</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"log4j2备份","url":"https://threewater.xyz/2020/09/05/log4j2备份/","content":"<p>pom.xml备份</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--日志体系--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-slf4j-impl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.13.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--web环境下独有的--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.13.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件备份</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--在web环境下启用此配置--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filename\"</span>&gt;</span>$&#123;web:rootDir&#125;/logs/rolling.log<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--时间轮转法--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"filePattern\"</span>&gt;</span>$&#123;web:rootDir&#125;/logs/rolling-%d&#123;yyyy-MM-dd-HH-mm&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--时间 日志级别 线程名称 全限定类名,代码行数 日志信息 换行--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"layoutPattern\"</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p [%t]: %l %m%n<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RollingFile</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">fileName</span>=<span class=\"string\">\"$&#123;filename&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">filePattern</span>=<span class=\"string\">\"$&#123;filePattern&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>$&#123;layoutPattern&#125;<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">PatternLayout</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--每分钟轮转--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TimeBasedTriggeringPolicy</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--10MB开始轮转--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">SizeBasedTriggeringPolicy</span> <span class=\"attr\">size</span>=<span class=\"string\">\"10MB\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">RollingFile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Console</span> <span class=\"attr\">name</span>=<span class=\"string\">\"console\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"SYSTEM_OUT\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"$&#123;layoutPattern&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Console</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--默认打印warn级别的日志--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"TRACE\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"console\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"file\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--mapper下里面的logger打印，DEBUG级别的日志--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"xyz.threewater.mapper\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"debug\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"console\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"file\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"log架构体系","url":"https://threewater.xyz/2020/09/04/log架构体系/","content":"<p>Logger:就是我们在代码中写的日志打印代码，会调用这些Logger<br>Logger里面必须配置一个Root的Logger，它是针对所有包的，<br>其他的Logger都是针对特定包的，由于Root是针对所有包的，<br>那么是不是会打印两份呢？答案是不会的，相同日志级别的日志<br>只会打印一份。</p>\n<p>还有，如果Logger下面没有配置任何的Appender，该Logger下的类<br>的日志信息不会输出</p>\n<p>Appenders(输出器)，Logger会调用这些输出器进行输出，<br>这些输出器，有很多的实现类，比如ConsoleAppender<br>FileAppender等，</p>\n<p>Logger决定了哪些类的日志输出到哪个Appender，Appender决定了<br>以什么样的格式输出，以及输出到哪里。</p>\n<p>轮转日志，就是就是达到一定条件，就重新生成配置文件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RollingRandomAccessFile</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileAppender\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">fileName</span>=<span class=\"string\">\"app-name.log\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">filePattern</span>=<span class=\"string\">\"app-name.log.%d&#123;yyyy-MM-dd-HH&#125;\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">pattern</span>=<span class=\"string\">\"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RollingRandomAccessFile</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在轮转日志的输出体系中，<code>fileName</code>表示的只是一个临时日志，也就是此时此刻的日志会被写入这个日志。<br>当轮转条件触发时，这个文件中的日志都会被复制到<code>filePattern</code>生成的配置文件中。然后清空这个文件。</p>\n<p>整个流程大概如下：</p>\n<ol>\n<li>当前日志写入fileName</li>\n<li>条件触发</li>\n<li>解析filePattern的文件名，生成新的空的日志文件(如果filePattern算出来的文件已经存在，清空它)</li>\n<li>把fileName复制到filePattern中</li>\n<li>清空fileName</li>\n</ol>\n","categories":[],"tags":[]},{"title":"spring事件监听机制","url":"https://threewater.xyz/2020/09/01/spring事件监听机制/","content":"<p>事件发布者持有事件广播器，调用事件广播器的publishEvent发布事件，<br>通过向事件广播器注册事件监听器，我们就能受到容器发送过来的事件<br>    向广播器注册事件有很多种方式，比如我们可以向bean工厂注入<br>    一个ApplicationListener事件，事件广播器会从beanFacotry中<br>    取出所有的事件监听器。<br>ApplicationContext自己实现了事件发布器，持有事件广播器的引用<br>这就说我们可以通过contex来发布我们的事件，<br>我们可以实现ApplicationEventPublisherAware接口，spring会为我们<br>传递一个只有事件广播器的事件发布器，这个发布器很有可能就是spring容器本身</p>\n","categories":[],"tags":[]},{"title":"spring生命周期","url":"https://threewater.xyz/2020/09/01/spring生命周期/","content":"<ol>\n<li>BeanFactoryPostProcessor不由Spring的生命周期管<br> 调用<br> 。及其子类的构造方法</li>\n<li> 调用BeanFactoryPostProcessor的postProcessBeanFactory方法，<br> 此时容器中已经有一些基本的bean(不包含以下所有的bean)。<br> 比如各种BeanFactoryPostProcessor，以及系统环境变量bean</li>\n<li>4.1构建BeanPostProcessor极其子类，包括InstantiationAwareBeanPostProcessor<br>4.2调用其init(@PostCountruct)方法</li>\n<li>从BeanPostProcessor构建出来以后，以后每次创建新的bean，都需要走以下流程。<br>5.1 InstantiationAwareBeanPostProcessor的<pre><code>postProcessBeforeInstantiation(Class&lt;?&gt; beanClass, String beanName)::Object方法</code></pre>5.2 新bean的构造方法(构建顺序:各种Aware类型的bean–&gt;FactoryBean(zai)–&gt;DestroyBean–&gt;InitializingBean–&gt;普通bean)<pre><code>新的bean构造方法调用完之后，都需要走InstantiationAwareBeanPostProcessor\n的postProcessAfterInstantiation(Object bean, String beanName)::boolean方法</code></pre></li>\n<li> 6.2调用InstantiationAwareBeanPostProcessor的postProcessProperties方法<br> 6.2为新Bean设置属性值(@AutoWired)。</li>\n<li> 7.1 在新bean的init方法调用之前，都会走BeanPostProcessor及其之类的<pre><code>postProcessBeforeInitialization(Object bean, String beanName)::Object方法</code></pre> 7.2 新bean的init(@PostCountruct注解标注的)方法<br> 7.3 在新bean的init方法调用之后，都会走BeanPostProcessor及其之类的<pre><code>postProcessAfterInitialization(Object bean, String beanName)::Object方法</code></pre></li>\n<li> 8.1 容器close时，调用所有普通bean的destroy方法<br> 8.2 调用DisposableBean及其子类的destroy方法<br> 8.3 调用Aware类型的bean的destroy方法<br> 8.4 最后调用BeanPostProcessor及其子类的destroy方法</li>\n</ol>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>在Spring的运行过程中，总共有几种不同类型的Bean，他们的加载优先级是不同的。<br>       0. Spring一开始就知道所有类型的Bean，只是还没开始new。<br>       1. BeanFactoryPostProcessor顶级Bean，不加入生命周期<br>       2. BeanPostProcessor监控级别的Bean，监视以后所有Bean的构造方法，init方法。<br>           子类InstantiationAwareBeanPostProcessor还会监视(控制)属性注入方法。<br>       3. Aware类型的Bean，用来提前注入容器基础资源<br>       4. 普通Bean。<br>       5. 除了BeanFactoryPostProcessor之外，所有Bean都可以加@PostConstruct，@PreDestroy方法<br>       6. 因为普通Bean可能会有循环依赖，所以普通Bean采用并行构造，其他的Bean的采用顺序构造。</p>\n","categories":[],"tags":[]},{"title":"spring事务传播","url":"https://threewater.xyz/2020/09/01/spring事务传播/","content":"<p>REQUIRED:<br>当前子事务在父事务(如果有)的环境下运行(同一个物理事务，同一个Connection连接)<br>子事务发生了异常，就会回滚(如果子事务设置了rollbackfor)，由于共享的是同一个物理连接<br>并且右如果这个异常又被父事务<code>try/catch</code>了(也就是说父事务感知不到异常发生了)，所以子事务回滚是<br>在父事务意料之外的，就会抛出<code>UnexpectedRollbackException</code>。\nNESTED:<br>嵌套事务，嵌套事务可以解决上述问题，也就是说，如果某个子事务发生了异常，子事务回滚，<br>但是父事务继续执行，就在子事务上配置<code>NESTED</code>。这个NESTED和上面一样，依然是，子事务和父事务<br>共享同一个物理事务(就是同一个Connection连接),但是在启动NESTED子事务之前,会对物理连接设置<br>一个savepoint，这样子事务回滚也是回滚到这个savepoint。然后父事务可以继续执行。<br>当然如果子事务异常没有被父事务<code>try/catch</code>。父事务也感知到了这个异常，父事务也会回滚。<br>这个要注意一下。<br>REQUIRED_NEW:<br>新建一个事务。这里新建一个事务，实际上是从数据库(连接池)获取了两个连接(注意是物理连接)。<br>这样的话就相当于一个线程，持有了两个连接。<br>如果子事务标注了<code>REQUIRED_NEW</code>那么执行这个到这个方法时，就会重新获取新连接，这个<br>事务是独立的，父事务如果没有<code>try/cacth</code>这个事务的异常，父事务也会回滚，如果你不希望父事务回滚<br>就最好<code>try/catch</code>一下。<br>注意：在这种情况下，会存在死锁的问题，最好不要父子事务修改同一行。<br>NOT_SUPPORTED:<br>不支持事务，也就是说，如果当前事务存在，则创建一个无事务的环境，新的connection连接。一个线程，获取<br>两个物理连接。</p>\n","categories":[],"tags":[]},{"title":"mybatis缓存","url":"https://threewater.xyz/2020/08/26/mybatis缓存/","content":"<p>一级缓存，SqlSession独有。<br>查询操作会被缓存，可以阻止，通过每次加上<code>flushCache=true</code>属性(也会刷新二级缓存),<br>或者调用<code>SqlSession.clearCache()</code><br>更新操作会刷新缓存，无法阻止<br>注意：任何commit操作(无论是不是update之后的commit)都会清空一级缓存！</p>\n<p>二级缓存，所有SqlSession共享，<br>通过添加<code>&lt;cache\\&gt;</code>启用对当前mapper的缓存，这个标签会启用当前mapper下的所有查询二级缓存。<br>如果某个查询不需要缓存,可以设置<code>useCache=false</code><br>更新操作会刷新缓存，如果不想二级缓存刷新通过<code>fluhCache=false</code>阻止，</p>\n<p>在单线程的环境下，一切都没有问题。<br>在多线程环境下，如果某个SqlSession进行了更新操作<br>其它SqlSession无法得知最新数据，会从自己的一级缓存中读取。</p>\n<p>总结</p>\n<p>二级缓存的启用，不会带来任何问题。<br>一级缓存，对于一些经常变动且实时性要求较高的数据进行查询<br>最好在执行之前调用一下<code>SqlSession.clearCache()</code><br>或者每次查询玩之后<code>commit</code>一下。</p>\n","categories":[],"tags":[]},{"title":"mysql锁机制","url":"https://threewater.xyz/2020/08/12/mysql锁机制/","content":"<p>为了保证数据的一致性，同时为了方便程序的开发提高程序的并发性能，数据库提出了四种隔离级别</p>\n<p>数据库的两段锁协议：也就是说，在食物中进行读写操作时，会对表或者行进行加锁，直到事务提交或者回滚<br>才会释放锁。</p>\n<p>Read UnCommited : 不加任何锁，该写的写，该读的读<br>Read Commited : 加写锁，读不加锁，当多个事务对有锁的行写时，就会等待，直到事务提交释放锁<br>Repeatable Read : 这里有很多种实现方案：<br>                    1. 读操作加读锁(共享锁)，写操作加写锁(排他锁)，读写互斥(悲观锁)，这样当一个事务对某些<br>                        行加了读锁时，其它事务就不能写入，只能等待，这样就能保证当前事务再次读取<br>                        这些行时，数据依然是不变的，这样就是可重复读。<br>                        但是如果，其他事务对其他的行进行更改，依然是可以进行的，这样就是幻读</p>\n<pre><code>    如果在进行写入时，没有走索引查找，数据库就无法确定修改哪条数据，数据就会锁住所有行\n    然后一行一行找，如果当前行不符合，就是释放锁(为了并发性，违反了二段锁协议)。  \n2. 使用乐观锁，一种实现是类似GIt的版本控制实现。多个事务进行读写时保存当前版本\n   这样其它事务更改数据时，当前事务读到的都是历史数据，实现了可重复读。但是由于读到\n   的时历史数据，某些业务场景下可能会出问题，为此我们可以使用`lock in share mode`\n   加在查询语句后面，这样就能保证读取到的是最新的数据，但是会依然会出现幻读的问题，\n   在Mysql数据库中，使用了Gap锁解决了一部分幻读的问题，Gap锁就是当事务读取某些行时\n   会对这些行所在的区间进行加锁，这样当前区间不能写入，其它区间还是能写入的。依然会有一部分幻读问题。</code></pre>","categories":[],"tags":[]},{"title":"css常用设置","url":"https://threewater.xyz/2020/08/07/css常用设置/","content":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">410px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*height: 100px;*/</span></span><br><span class=\"line\">    <span class=\"comment\">/* background-color: blue; */</span></span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">    <span class=\"comment\">/* max-width:100%; */</span></span><br><span class=\"line\">    <span class=\"comment\">/* max-height:100%; */</span></span><br><span class=\"line\">    <span class=\"comment\">/* overflow:auto; */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.clear</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clear_left</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clear_right</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"FormData与Servlet","url":"https://threewater.xyz/2020/08/06/FormData与Servlet/","content":"<p>在HTML5中，如果直接使用表单提交，那么默认的请求头为<br>Content-Type: application/x-www-form-urlencoded。<br>如果含文件，那么应改成 multipart/form-data</p>\n<p>如果我们通过js控制表单提交，那么我们就需要new 一个FormData。<br>但是new出来的FormData默认是multipart/form-data类型的。他会无视<br>form表单设置的enctype类型。如果我们通过XMLHttpRequest强制设置请求头为<br>application/x-www-form-urlencoded。那么表单的数据会变成乱码，后端无法识别。</p>\n<p>Servlet3.0默认只支持application/x-www-form-urlencoded类型。<br>要支持multipart/form-data类型，必须加@MultipartConfig注解，尽管我们一个文件都没有上传。</p>\n<p>要使用FormData提交，只有两种方式<br>第一种。获取表单中的值，然后拼接成到URL，<br>第二种。Servlet乖乖的加上@MultipartConfig注解，尽管我们可能并不需要接收文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> my=<span class=\"keyword\">new</span> FormData(form);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    my.append(<span class=\"string\">\"test\"</span>,<span class=\"string\">\"aaaa\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    xhr.open(<span class=\"string\">\"POST\"</span>,<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");</span></span><br><span class=\"line\">    xhr.send(my);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[]},{"title":"文件上传","url":"https://threewater.xyz/2020/08/06/文件上传/","content":"<p>使用xmlhttpRequest上传时，有一个<br>upload可以跟踪上传进度，可以为upload添加事件来跟踪下载进度<br>但是对于tomcat的servlet是完全不知道的，只有当整个文件上传完毕时<br>tomcat才会调用servlet里面的方法。<br>所以这个进度跟踪是浏览器和tomcat实现的，servlet是不知道的。</p>\n<p>最新的fecth方法，不能跟踪文件上传。</p>\n","categories":[],"tags":[]},{"title":"hash算法","url":"https://threewater.xyz/2020/08/06/hash算法/","content":"<p>散列函数的定义是，主要保证不同的输入能够产生不同的输出就可以了。</p>\n<p>但是不同的hash算法他们特性又有很大的不同，<br>比如对于java String的hashcode，他的实现就很简单，<br>如果字符串前几位相同，那么他们的hashcode也相同。</p>\n<p>但是对一些高级的hash算法比如md5，尽管字符串只有一位改变，整个hash也会变得完全不同。</p>\n","categories":[],"tags":[]},{"title":"servlet","url":"https://threewater.xyz/2020/07/30/servlet/","content":"<p>servlet 3.0 支持异步，这个异步就是指<br>它可以把request和response对象给暴露给其他线程<br>这样其它线程执行完后，可以直接通过response直接返回结果<br>这样，servlet线程在走完doget方法后，返回线程池</p>\n<h2 id=\"Servlet与Tomcat\"><a href=\"#Servlet与Tomcat\" class=\"headerlink\" title=\"Servlet与Tomcat\"></a>Servlet与Tomcat</h2><p>Servlet与Tomcat密切相关<br>Tomcat包中包含Servlet的API，以及对应的实现<br>Tomcat 8支持Servlet 3<br>Tomcat 9支持Servlet 4<br>Tomcat 10支持Servlet 5 由javax.Servlet移动到那个啥Jakarta包下</p>\n<h2 id=\"Servlet-3-0-新特性\"><a href=\"#Servlet-3-0-新特性\" class=\"headerlink\" title=\"Servlet 3.0 新特性\"></a>Servlet 3.0 新特性</h2><ol>\n<li>注解配置</li>\n<li>支持异步</li>\n<li>支持文件上传</li>\n</ol>\n<h2 id=\"Servlet-3-0-上传文件注意事项\"><a href=\"#Servlet-3-0-上传文件注意事项\" class=\"headerlink\" title=\"Servlet 3.0 上传文件注意事项\"></a>Servlet 3.0 上传文件注意事项</h2><ol>\n<li><p>对于要接收文件的类要标注@MultipartConfig注解</p>\n</li>\n<li><p>前端的请求必须保证请求是 enctype=”multipart/form-data”</p>\n</li>\n<li><p>可以通过@MultipartConfig的maxFileSize属性设置最大文件大小，单位是byte</p>\n</li>\n</ol>\n<h2 id=\"Servlet与文件\"><a href=\"#Servlet与文件\" class=\"headerlink\" title=\"Servlet与文件\"></a>Servlet与文件</h2><p>idea对web目录下的图片，文本，音频会生成到out目录，但是其它二进制文件不会复制。</p>\n<p>当我们要通过response向浏览器发送视频时，<br>需要设置内容类型，<br>如果希望客户端能够拖动进度条改变进度。<br>有以下几行代码必不可少</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp.setContentType(<span class=\"string\">\"video/mp4\"</span>);</span><br><span class=\"line\">resp.setHeader(<span class=\"string\">\"Accept-Ranges\"</span>, <span class=\"string\">\"bytes\"</span>);</span><br><span class=\"line\">resp.setHeader(<span class=\"string\">\"Content-Range\"</span>,String.format(<span class=\"string\">\"bytes %s-%s/%s\"</span>, <span class=\"number\">0</span>, accessFile.length()-<span class=\"number\">1</span>, accessFile.length()));</span><br><span class=\"line\">resp.setHeader(<span class=\"string\">\"Content-Length\"</span>, String.format(<span class=\"string\">\"%s\"</span>, accessFile.length()));</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"tomcat","url":"https://threewater.xyz/2020/07/30/tomcat/","content":"<p>tomcat8 loggin.properties有一项编码是GBK。<br>tomcat9 所有编码都是utf-8</p>\n<p>idea通过vm.option里面的utf-8会决定控制台读取文件时的编码<br>-Dfile-encoding=utf-8</p>\n","categories":[],"tags":[]},{"title":"html笔记","url":"https://threewater.xyz/2020/07/28/html笔记/","content":"<p>size属性可以调整input标签的大小</p>\n<p>使用表格布局时，可以在左右两边一个宽度一样的td，这样中间的td就会居中</p>\n","categories":[],"tags":[]},{"title":"SQL注意事项","url":"https://threewater.xyz/2020/07/23/SQL注意事项/","content":"<ol>\n<li>having代码块中可以使用select语句块中的字段</li>\n<li>group_concat可以对分组后的数据进行连接</li>\n<li>week求一年中的第几周</li>\n</ol>\n<p>blob并没有想象中的那么大</p>\n<p>DATE,DATETIME,TIMESTAMP对应sql.date    不能获取时间，只能获取日期。<br>TIME是表示时间，对应Java中的sql.Time<br>YEAR这个数据类型，在java中可以用int来接收</p>\n<p>一个连接只能开启一个事务，直到提交或者回滚，才能开始下一个事务。<br>如果setAutoCommit改变了状态，那么前面的事务会被自动提交</p>\n","categories":[],"tags":[]},{"title":"Java8中的Map","url":"https://threewater.xyz/2020/07/13/map/","content":"<h3 id=\"computeIfpresent\"><a href=\"#computeIfpresent\" class=\"headerlink\" title=\"computeIfpresent\"></a>computeIfpresent</h3><p>这个方法适用于，对原map中已有的键值对进行操作，<br>如果该key找不到，就不会处理</p>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p>这个是如果key为空，就赋初始值，如果key不为空，就对旧值和初始值进行处理(比如二者相加)。</p>\n","categories":[],"tags":[]},{"title":"Stream流","url":"https://threewater.xyz/2020/07/13/stream/","content":"<p>IntStream.range(0, arr.length)<br>可以用生成一个0到arr.length-1的流，然后调用mapToObj<br>就可以把这个流映射到任意类型<br>适用于把char，byte,float,boolean数组转成任意类型<br>这些数组和其它数组不一样，int，double，long都有其对应的流<br>这些数组没有。引用类型又可以直接用Stream.of()。</p>\n<p>BiFunction一般用来累加</p>\n<h3 id=\"多个流合并\"><a href=\"#多个流合并\" class=\"headerlink\" title=\"多个流合并\"></a>多个流合并</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; integerStream = Stream.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">Stream&lt;Integer&gt; integerStream1= Stream.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//两个流合并concat静态方法</span></span><br><span class=\"line\">Stream&lt;Integer&gt; concat = Stream.concat(integerStream, integerStream);</span><br><span class=\"line\"><span class=\"comment\">//多个流合并用flatMap</span></span><br><span class=\"line\">Stream&lt;Integer&gt; objectStream = Stream.of(integerStream, integerStream)</span><br><span class=\"line\">                .flatMap( integerStream2 -&gt; integerStream2);</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[]},{"title":"nio","url":"https://threewater.xyz/2020/07/13/nio/","content":"<p>nio复制文件。</p>\n<p>使用buffer类时，要注意几点<br>在往buffer里面存储数据时，需要clear清空缓存区<br>在取buffer数据时，需要flip重置limit指针</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复制文件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CopyFile</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String inPath=<span class=\"string\">\"C:\\\\Users\\\\water\\\\IdeaProjects\\\\Test\\\\src\\\\xyz\\\\threewater\\\\nio\\\\CopyFile.java\"</span>;</span><br><span class=\"line\">        String outPath=<span class=\"string\">\"C:\\\\Users\\\\water\\\\IdeaProjects\\\\Test\\\\src\\\\xyz\\\\threewater\\\\nio\\\\CopyFile.txt\"</span>;</span><br><span class=\"line\">        FileChannel inChannel= <span class=\"keyword\">new</span> FileInputStream(inPath).getChannel();</span><br><span class=\"line\">        FileChannel outChannel= <span class=\"keyword\">new</span> FileOutputStream(outPath).getChannel();</span><br><span class=\"line\">        ByteBuffer buffer=ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            buffer.clear();<span class=\"comment\">//要往buffer里面存数据之前，要清空缓存</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> read = inChannel.read(buffer);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(read==-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            buffer.flip();<span class=\"comment\">//要取数据时需要先调用此方法，重置</span></span><br><span class=\"line\">            outChannel.write(buffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = Files.readAllBytes(Paths.get(outPath));</span><br><span class=\"line\">        String out=<span class=\"keyword\">new</span> String(bytes);</span><br><span class=\"line\">        System.out.println(out);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"juc记录","url":"https://threewater.xyz/2020/07/11/juc2/","content":"<p>线程调用isinterrupt会重设</p>\n<p>ExecutorService 的shudown()只是阻止新的任务添加，已经在等待和正在执行的任务不会被停止<br> shutdownNow()除了阻止新的任务添加的同时，也会取消所有已经在队列中的任务。<br>submit方法可以提交任务，<br>invokeAll是提交一组方法，等待所有方法执行完之后，返回，在这之前阻塞<br>invokeAny是提交一组方法，只要当中的一个方法执行完了，就返回</p>\n<p>ScheduledExecutorService比ExecutorService 多了几个方法，这个类可以用来延迟执行<br>一些任务，也可以重复执行一些任务<br>schedule可以延迟执行<br>scheduleAtFixedRate可以重复执行，如果任务执行时间太长，超过了设定的时间间隔，不会<br>后面的任务也会因为上一个任务延期而延期，不会另开一个线程立马开始。<br>scheduleWithFixedDelay也是重复执行，只不过它是等上一个任务执行完后，再隔一定的间隔。</p>\n<p> ThreadPoolExecutor<br> 是ExecutorService的实现类，<br> 整个Executor受三个因素的制约，corePoolSize，maxPoolSize，以及任务blockingQueue<br>对于Queue有三种类型的</p>\n<p>一下都是BlockQueue的实现类，<br>出队和入队方法都必须保证线程安全。</p>\n<ol>\n<li><p>SynchronousQueue<br>是一个同步Queue，也就是说，往这个队列里面添加元素，必须马上有线程接收，如果线程数已经达到了<br>maxPoolSize，并且也没有空闲的，就会拒接这个任务，抛出异常，所以为了不拒接任务，最好声明<br>maxPoolSize为无限大，但是这样的话，如果添加任务的速度比消化任务的速度快，线程就会无限制的增长<br>由于能够保证来了任务就能被处理，这种队列适合任务和任务之间有关系的情况。</p>\n</li>\n<li><p>LinkedBlockingQueue<br>这个队列是一个无界的队列，任务可以无限制的添加，永远也添加不满。但是根据，corePoolSize和maxPoolSize的关系<br>当线程数达到corePoolSize大小时，如果要继续增加线程，要看队列满不满，满就添加。由于这个队列永远不会满，所以<br>线程数永远等于corePoolSize。这种队列一般适用于任务之间互相没有关系。也可以用于处理大量的突发请求。当然如果<br>线程消化的速度跟不上，队列就会无限增长。所以这种队列不适合操作IO，更适合操作频繁，但是耗时短的操作，例如静态<br>页面请求。</p>\n</li>\n<li><p>ArrayBlockingQueue<br>这是一个有界的队列，可能会存在队满的情况，如果队满，线程也没有空闲，并且已经达到了最大线程数，那么新来的任务就会被拒收。<br>因此整个队列的大小和线程数量的定义就很重要。大队列和小线程，能够避免cpu频繁的线程切换开销，但是由于线程少，任务多。也可能<br>造成低吞吐量，如果队列小，线程多，那么cpu切换频繁，也会影响吞吐量，这两者之间有一个平衡点。</p>\n</li>\n<li><p>ConcurrentLinkedQueue<br>一种无锁但是又线程安全的无界队列，基于CAS实现。</p>\n</li>\n</ol>\n<p>ExecutorService还有一个类，叫ForkJoinPool，要使用它必须实现RecursiveTask接口，或者RecursiAction<br>表明这是一个递归任务，前者表示有返回值的递归任务，后者表示无返回值的递归任务。<br>如果任务足够小，就由当前线程处理，如果任务太大，就创建一个新的RecursiveTask任务，然后调用它的fork方法<br>最后要获取结果就调用get方法，</p>\n<h3 id=\"SynchronousQueue测试\"><a href=\"#SynchronousQueue测试\" class=\"headerlink\" title=\"SynchronousQueue测试\"></a>SynchronousQueue测试</h3><p>如果所有线程都在忙，那么就会抛出RejectedExecutionException异常<br>最后调用了shudown方法，但是如果抛出了execute方法抛出了RejectedExecutionException<br>执行器依然不会结束，最保险的做法是，try一下execute方法，cath它的所有异常，最后<br>在finaly中调用shutdown。</p>\n<h3 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h3><p>读操作获取它的读锁，读完了就释放，写操作获取他的写锁，写完就释放。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ThreadPoolExecutor threadPoolExecutor=<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">10</span>,</span><br><span class=\"line\">                <span class=\"number\">12</span>,<span class=\"number\">1000</span>,</span><br><span class=\"line\">                TimeUnit.SECONDS,<span class=\"keyword\">new</span> SynchronousQueue&lt;&gt;());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">13</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果这个execute方法抛出了异常，</span></span><br><span class=\"line\">            <span class=\"comment\">//比如某个任务拒绝执行了，那么就会抛出RejectedExecutionException</span></span><br><span class=\"line\">            <span class=\"comment\">//主线程就结束了，shutdown方法不会执行，执行器就没有销毁，这里要注意</span></span><br><span class=\"line\">            threadPoolExecutor.execute(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"睡够了\"</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        threadPoolExecutor.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ForkJoinPool测试\"><a href=\"#ForkJoinPool测试\" class=\"headerlink\" title=\"ForkJoinPool测试\"></a>ForkJoinPool测试</h3><p>计算一个数组的和，如果大于5，就拆分运行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] arr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForkJoinTest</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arr = arr;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Integer <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(end-start&lt;=<span class=\"number\">5</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start&lt;=end)&#123;</span><br><span class=\"line\">                sum+=arr[start++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (end - start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            ForkJoinTest subTask1 = <span class=\"keyword\">new</span> ForkJoinTest(arr, start, start+mid);</span><br><span class=\"line\">            ForkJoinTest subTask2 = <span class=\"keyword\">new</span> ForkJoinTest(arr, start+mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">            subTask1.fork();</span><br><span class=\"line\">            subTask2.fork();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> subTask1.join()+subTask2.join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        Arrays.fill(arr,<span class=\"number\">1</span>);</span><br><span class=\"line\">        ForkJoinTest forkJoinTest = <span class=\"keyword\">new</span> ForkJoinTest(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">        ForkJoinPool executorService = (ForkJoinPool) Executors.newWorkStealingPool();</span><br><span class=\"line\">        Integer invoke = executorService.invoke(forkJoinTest);</span><br><span class=\"line\">        System.out.println(invoke);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":[]},{"title":"红黑树添加方法实现","url":"https://threewater.xyz/2020/07/09/红黑树/","content":"<p>红黑树几条性质<br>其中两条比较重要的</p>\n<ol>\n<li>不存在相邻的红色节点</li>\n<li>从根节点出发，到所有叶子节点经过的黑色节点数目必须相同<br>为了满足这两点性质，插入的元素要进行如下调整</li>\n<li>父亲是黑色直接添加</li>\n<li>父亲是红色，叔叔是黑色，叔叔在右边就右旋，叔叔在左边就左旋</li>\n<li>父亲是红色，叔叔是红色，父亲和叔叔由红色变为黑色，父亲的父亲变为红色，<br>指针移动到父亲和父亲节点，重新走一遍添加方法。</li>\n</ol>\n<p>除了以上几条，还有以下注意事项：</p>\n<ol>\n<li>父亲红，叔叔黑，当前节点红，如果父亲和当前节点不在同一条直线上，需要旋转</li>\n<li>头节点因为变色而变为红时，需要移动头节点的指向</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//红黑树</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedBlackTree</span></span>&#123;</span><br><span class=\"line\">    Node head;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            head=<span class=\"keyword\">new</span> Node(<span class=\"string\">'黑'</span>,value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node parent = findParent(head, value);</span><br><span class=\"line\">        <span class=\"comment\">//找到了head节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(parent==head&amp;&amp;parent.getColor()==<span class=\"string\">'红'</span>) &#123;</span><br><span class=\"line\">            head.setColor(<span class=\"string\">'黑'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Node addNode;</span><br><span class=\"line\">        <span class=\"comment\">//找到了已存在的节点,并且也不是head节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(parent.getValue()==value)&#123;</span><br><span class=\"line\">            addNode=parent;<span class=\"comment\">//新添加的节点为已经存在的节点</span></span><br><span class=\"line\">            parent=parent.getParent();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//没有找到已存在的节点</span></span><br><span class=\"line\">            addNode=<span class=\"keyword\">new</span> Node(parent,value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(parent.getColor()==<span class=\"string\">'黑'</span>)&#123;<span class=\"comment\">//父亲节为黑</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(value&lt;parent.getValue())</span><br><span class=\"line\">                parent.setLeft(addNode);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value&gt;parent.getValue())</span><br><span class=\"line\">                parent.setRight(addNode);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">//已经存在的节点需要调整</span></span><br><span class=\"line\">                parent.setColor(<span class=\"string\">'黑'</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//父亲节点为红</span></span><br><span class=\"line\">            <span class=\"comment\">//父节点是祖父节点的左枝 ，可能存在parent就是head的情况</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(parent.getParent().getLeft()==parent)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(parent.getParent().getRight()==<span class=\"keyword\">null</span>||parent.getParent().getRight().getColor()==<span class=\"string\">'黑'</span>)&#123;<span class=\"comment\">//叔叔节点为黑</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(value&lt;parent.getValue())&#123;<span class=\"comment\">//插入的节点是父亲节点的左枝 左旋</span></span><br><span class=\"line\">                        parent.setLeft(addNode);</span><br><span class=\"line\">                        rightRotation(parent,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//插入节点是父亲节点的右枝    先父节点左旋 右旋</span></span><br><span class=\"line\">                        Node node = <span class=\"keyword\">new</span> Node(parent, value);</span><br><span class=\"line\">                        leftRotation(node,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                        rightRotation(node,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//叔叔节点为红色</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(value&lt;parent.getValue())&#123;<span class=\"comment\">//插入的节点是父亲节点的左枝 变色</span></span><br><span class=\"line\">                        parent.setLeft(addNode);</span><br><span class=\"line\">                        <span class=\"comment\">//站到新的位置考虑</span></span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//插入节点是父亲节点的右枝    先父节点左旋 右旋</span></span><br><span class=\"line\">                        parent.setRight(addNode);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    parent.setColor(<span class=\"string\">'黑'</span>);</span><br><span class=\"line\">                    parent.getParent().setColor(<span class=\"string\">'红'</span>);</span><br><span class=\"line\">                    parent.getParent().getRight().setColor(<span class=\"string\">'黑'</span>);</span><br><span class=\"line\">                    add(parent.getParent().getValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//父节点是祖父节点的右枝</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(parent.getParent().getLeft()==<span class=\"keyword\">null</span>||parent.getParent().getLeft().getValue()==<span class=\"string\">'黑'</span>)&#123;<span class=\"comment\">//叔叔节点为黑色</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(value&lt;parent.getValue())&#123;<span class=\"comment\">//插入的节点是父亲节点的左枝 父节点右旋</span></span><br><span class=\"line\">                        parent.setLeft(addNode);</span><br><span class=\"line\">                        rightRotation(addNode,<span class=\"keyword\">false</span>);<span class=\"comment\">//右旋</span></span><br><span class=\"line\">                        leftRotation(addNode,<span class=\"keyword\">true</span>);<span class=\"comment\">//左旋</span></span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//插入节点是父亲节点的右枝    先父节点左旋 右旋</span></span><br><span class=\"line\">                        Node node = <span class=\"keyword\">new</span> Node(parent, value);</span><br><span class=\"line\">                        parent.setRight(node);</span><br><span class=\"line\">                        leftRotation(node,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//叔叔节点为红色</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(value&lt;parent.getValue())&#123;<span class=\"comment\">//插入的节点是父亲节点的左枝 变色</span></span><br><span class=\"line\">                        parent.setLeft(addNode);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//插入节点是父亲节点的右枝    先父节点左旋 右旋</span></span><br><span class=\"line\">                        parent.setRight(addNode);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    parent.setColor(<span class=\"string\">'黑'</span>);</span><br><span class=\"line\">                    parent.getParent().setColor(<span class=\"string\">'红'</span>);</span><br><span class=\"line\">                    parent.getParent().getLeft().setColor(<span class=\"string\">'黑'</span>);</span><br><span class=\"line\">                    add(parent.getParent().getValue());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rightRotation</span><span class=\"params\">(Node currentNode,<span class=\"keyword\">boolean</span> changeColor)</span> </span>&#123;</span><br><span class=\"line\">        Node rightTmp=currentNode.getRight();</span><br><span class=\"line\">        Node parent=currentNode.getParent();</span><br><span class=\"line\">        movePoint(currentNode, rightTmp, parent);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rightTmp!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            rightTmp.setParent(parent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(changeColor)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//变色</span></span><br><span class=\"line\">            currentNode.setColor(<span class=\"string\">'黑'</span>);</span><br><span class=\"line\">            parent.setColor(<span class=\"string\">'红'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">movePoint</span><span class=\"params\">(Node currentNode, Node rightTmp, Node parent)</span> </span>&#123;</span><br><span class=\"line\">        Node grandParent=parent.getParent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grandParent==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            head=currentNode;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grandParent.getLeft()==parent)&#123;</span><br><span class=\"line\">                grandParent.setLeft(currentNode);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                grandParent.setRight(currentNode);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        currentNode.setRight(parent);</span><br><span class=\"line\">        parent.setLeft(rightTmp);</span><br><span class=\"line\">        parent.setParent(currentNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">leftRotation</span><span class=\"params\">(Node currentNode,<span class=\"keyword\">boolean</span> changeColor)</span> </span>&#123;</span><br><span class=\"line\">        Node parent = currentNode.getParent();</span><br><span class=\"line\">        Node leftTmp=currentNode.getLeft();</span><br><span class=\"line\">        moveLeftPoint(currentNode, parent, leftTmp);</span><br><span class=\"line\">        leftTmp.setParent(parent);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(changeColor)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//变色</span></span><br><span class=\"line\">            currentNode.setColor(<span class=\"string\">'黑'</span>);</span><br><span class=\"line\">            parent.setColor(<span class=\"string\">'红'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">moveLeftPoint</span><span class=\"params\">(Node currentNode, Node parent, Node leftTmp)</span> </span>&#123;</span><br><span class=\"line\">        Node grandParent=parent.getParent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grandParent==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            head=currentNode;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grandParent.getLeft()==parent)&#123;</span><br><span class=\"line\">                grandParent.setLeft(currentNode);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                grandParent.setRight(currentNode);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        currentNode.setLeft(parent);</span><br><span class=\"line\">        parent.setRight(leftTmp);</span><br><span class=\"line\">        parent.setParent(currentNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">findParent</span><span class=\"params\">(Node current,<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> compare = value-current.getValue();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(compare&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(current.getRight()==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> current;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> findParent(current.getRight(),value);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(compare&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(current.getLeft()==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> findParent(current.getLeft(),value);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forEach</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; list=<span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        deep(list,head);</span><br><span class=\"line\">        System.out.println(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deep</span><span class=\"params\">(List&lt;String&gt; list,Node currentNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currentNode.getLeft()!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            deep(list,currentNode.getLeft());</span><br><span class=\"line\">        list.add(currentNode.toString());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currentNode.getRight()!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            deep(list,currentNode.getRight());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> color = <span class=\"string\">'红'</span>;</span><br><span class=\"line\">        Node left;</span><br><span class=\"line\">        Node right;</span><br><span class=\"line\">        Node parent;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getParent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setParent</span><span class=\"params\">(Node parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">char</span> color,<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value=value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Node parent, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">char</span> <span class=\"title\">getColor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> color;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setColor</span><span class=\"params\">(<span class=\"keyword\">char</span> color)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(Node left)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(Node right)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value+<span class=\"string\">\":\"</span>+color+<span class=\"string\">\":\"</span>+parent.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":[]},{"title":"windows基本命令记录","url":"https://threewater.xyz/2020/07/06/ms-dos/","content":"<p>创建文件 type nul&gt;a.txt</p>\n<p>查看文件 1. type a.txt  2. echo a.txts</p>\n<p>添加内容 type aaa&gt;a.txt echo aaa&gt;a.txt</p>\n<p>创建目录 md test </p>\n<p>删除文件和文件夹 del a.txt del test</p>\n<p>复制文件夹 copy a.txt test2\\a.txt</p>\n","categories":[],"tags":["配置"]},{"title":"java.time包","url":"https://threewater.xyz/2020/07/06/java-time包/","content":"<p>这个包下中共就几个类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Clock 表示时间戳</span><br><span class=\"line\">Duration 表示时间间隔，精确到秒级</span><br><span class=\"line\">Instant 也表示时间戳</span><br><span class=\"line\">LocalDate 日期，精确到日</span><br><span class=\"line\">LocalDateTime 日期和时间，精确到秒</span><br><span class=\"line\">LocalTime 时间，不包括日期</span><br><span class=\"line\">MonthDay 月，日</span><br><span class=\"line\">Period 也表示时间间隔，精确到天</span><br><span class=\"line\">Year 年</span><br><span class=\"line\">YearMonth 年，月</span><br><span class=\"line\">ZoneId 表示时区</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取当前日期和时间\"><a href=\"#获取当前日期和时间\" class=\"headerlink\" title=\"获取当前日期和时间\"></a>获取当前日期和时间</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["学习"]},{"title":"ArrayList笔记","url":"https://threewater.xyz/2020/07/06/ArrayList/","content":"<h3 id=\"remove方法\"><a href=\"#remove方法\" class=\"headerlink\" title=\"remove方法\"></a>remove方法</h3><p>删除时，整个数组会往前移，这里前移是采用的是arrayCopy</p>\n<h3 id=\"removeIf方法\"><a href=\"#removeIf方法\" class=\"headerlink\" title=\"removeIf方法\"></a>removeIf方法</h3><p>在Java8中有一个removeIf方法,就是移除满足条件的元素。这个也可以用Stream去做</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeIf</span><span class=\"params\">(Predicate&lt;? <span class=\"keyword\">super</span> E&gt; filter)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面有一个<code>BitSet</code>类,这个类就是把指定二进制位设置为1，remove方法就是设置为0<br>里面有一个<code>nextClearBit</code>。举个例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 刚开始是 0 0 0 0</span><br><span class=\"line\">2. set(1),set(2);</span><br><span class=\"line\">3. 变成 0 1 1 0</span><br><span class=\"line\">4. nextClearBit(0) \\\\返回位置0</span><br><span class=\"line\">   nextClearBit(1) \\\\返回位置3</span><br><span class=\"line\">   nextClearBit(2) \\\\返回位置3</span><br><span class=\"line\">   nextClearBit(3) \\\\返回位置3</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["学习"]},{"title":"匿名内部类","url":"https://threewater.xyz/2020/07/01/匿名内部类/","content":"<ol>\n<li>在方法中创建的匿名内部类，会生成一个class文件。</li>\n<li>这个class文件会动态的生成一个构造方法，这个构造方法会含有一个外部类对象的引用</li>\n<li>如果这个匿名内部类访问了该方法中的局部变量，如果这个方法中的局部变量不是final修饰的。<br> 那么会把该变量作为构造方法的参数传递进去，内部通过自动生成的成员变量接收。<br> 如果这个变量是final的，如果他是基本类型(int，String)等，那么会直接赋值，<br> 如果是引用类型，则也会作为参数传入构造方法中。</li>\n<li>如果访问到了外部类的成员变量，则会通过外部类的引用访问该成员变量，成员方法也是同理的。</li>\n<li>如果访问的是外部类的final变量，并且是基本类型，那么会直接赋值，如果是引用类型，那么也是通过外部类的引用访问</li>\n<li>访问外部类的成员变量时，如果这个成员是private的，那么会在外部类动态生成一个访问方法，进行访问。</li>\n</ol>\n<p>通过以上特性，可以总结的是：匿名内部类可以访问外部类所有变量和方法，也可以访问该方法中的所有变量，但是不能更改<br>该方法中局部变量的值，因为这样也没有意义，因为方法是引用传递，构造方法也是。</p>\n<p>访问final(无论是局部，还是成员)类型，如果基本类型，包括String，会直接赋值。如果是自定义类型，会传递引用。<br>访问private(成员)类型，会生成访问函数，不是private的，会通过外部类的引用直接访问。<br>由于外部类的引用传递，所以可以更改外部类的成员变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> solution1712;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String df=<span class=\"string\">\"wqe\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Custom custom2=<span class=\"keyword\">new</span> Custom();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Custom custom1=<span class=\"keyword\">new</span> Custom();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">b</span><span class=\"params\">(Anymous anymous)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">c</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String b=<span class=\"string\">\"adc\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c=<span class=\"number\">0</span>;</span><br><span class=\"line\">        String j=<span class=\"string\">\"water\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Custom custom=<span class=\"keyword\">new</span> Custom();</span><br><span class=\"line\">        b(<span class=\"keyword\">new</span> Anymous(j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> String cc=b;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                System.out.println(b);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dd</span><span class=\"params\">(String a)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(b);</span><br><span class=\"line\">                System.out.println(c);</span><br><span class=\"line\">                System.out.println(j);</span><br><span class=\"line\">                System.out.println(d);</span><br><span class=\"line\">                System.out.println(h);</span><br><span class=\"line\">                c();</span><br><span class=\"line\">                System.out.println(custom);</span><br><span class=\"line\">                System.out.println(df);</span><br><span class=\"line\">                System.out.println(custom1);</span><br><span class=\"line\">                System.out.println(custom2);</span><br><span class=\"line\">                d=<span class=\"number\">1</span>;</span><br><span class=\"line\">                h=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Custom</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Anymous</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Anymous</span><span class=\"params\">(String a)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"gouzhao\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dd</span><span class=\"params\">(String a)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应生成的字节码文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> solution1712;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span>$1 <span class=\"keyword\">extends</span> <span class=\"title\">Anymous</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String cc;</span><br><span class=\"line\"></span><br><span class=\"line\">    Outer$<span class=\"number\">1</span>(Outer <span class=\"keyword\">this</span>$<span class=\"number\">0</span>, String x0, <span class=\"keyword\">int</span> var3, String var4, Custom var5) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(x0);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">this</span>$<span class=\"number\">0</span> = <span class=\"keyword\">this</span>$<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val$c = var3;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val$j = var4;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.val$custom = var5;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cc = <span class=\"string\">\"adc\"</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"adc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dd</span><span class=\"params\">(String a)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"adc\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.val$c);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.val$j);</span><br><span class=\"line\">        System.out.println(Outer.access$<span class=\"number\">000</span>());</span><br><span class=\"line\">        System.out.println(Outer.access$<span class=\"number\">100</span>(<span class=\"keyword\">this</span>.<span class=\"keyword\">this</span>$<span class=\"number\">0</span>));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">this</span>$<span class=\"number\">0</span>.c();</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.val$custom);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wqe\"</span>);</span><br><span class=\"line\">        System.out.println(Outer.access$<span class=\"number\">200</span>(<span class=\"keyword\">this</span>.<span class=\"keyword\">this</span>$<span class=\"number\">0</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.<span class=\"keyword\">this</span>$<span class=\"number\">0</span>.custom2);</span><br><span class=\"line\">        Outer.access$<span class=\"number\">002</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Outer.access$<span class=\"number\">102</span>(<span class=\"keyword\">this</span>.<span class=\"keyword\">this</span>$<span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["学习"]},{"title":"Arrays工具类","url":"https://threewater.xyz/2020/06/23/Arrays工具类/","content":"<ol>\n<li>Arrays 工具类可以对数组进行二分查找，支持基本的数据类型和范型，对于范型需要传入自定义的比较器。<br>值得注意的是Java内部实现的时候对除二操作采用了移位运算。而且它的返回值不是返回-1而是返回数组low没有找到的位置<br><code>static int    binarySearch(double[] a, double key)</code><br><code>static &lt;T&gt; int    binarySearch(T[] a, int fromIndex, int toIndex, T key, Comparator&lt;? super T&gt; c)</code></li>\n<li>copyOf 方法即可对数组进行缩小也可以放大，缩小会截断，放大的话对于基本数据类型的数组会自动补全初始值，<br>对于引用类型，自动补null。内部实现是创建一个新数组，然后使用System.arraycopy本地方法进行复制<br><code>static float[]    copyOf(float[] original, int newLength)</code></li>\n<li>Arrays.copyOfRange 内部实现和copyOf一样，只是可以指定从那个位置开始。</li>\n<li>Arrays.equals 方法可以比较两个数组的内容是否相等，但是如果元素相同但是顺序不同也不会相等<br>内部使用for循环实现。<br><code>static boolean    equals(long[] a, long[] a2)</code></li>\n<li>Arrays.fill方法可以对一个数组进行填充，内部使用for循环实现。<br><code>static void fill(boolean[] a, boolean val)</code></li>\n</ol>\n<p>二分查找实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> high=arr.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low&lt;=high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(low+high)&gt;&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key&gt;arr[mid])&#123;</span><br><span class=\"line\">            low=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(key&lt;arr[mid])&#123;</span><br><span class=\"line\">            high=mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速排序实现\"><a href=\"#快速排序实现\" class=\"headerlink\" title=\"快速排序实现\"></a>快速排序实现</h3><p>快速排序主要是选择一个基准数，然后把数组分成左右两边，最后在对左右两边递归排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ints = &#123;<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        startSort(ints);</span><br><span class=\"line\">        System.out.println(Arrays.toString(ints));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        quickSort(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果上一步mid指向0位置，那么l=0，r=-1</span></span><br><span class=\"line\">        <span class=\"comment\">//如果上一步mid指向arr.length-1位置那么l=arr.length,r=arr.length-1;</span></span><br><span class=\"line\">        <span class=\"comment\">//如果上一步指向1位置，那么l=0，r=0;一个元素没有意义</span></span><br><span class=\"line\">        <span class=\"comment\">//如果上一步指向arr.length-2位置，那么l=arr.length-1,r=arr.length-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l&gt;=r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> base=arr[l],start=l,end=r;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start&lt;end)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//先循环找右边的数,如果找到end位置还是没有，那么表明整个数组已经满足条件了</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start&lt;end&amp;&amp;arr[end]&gt;=base)&#123;</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(start&lt;end)&#123;<span class=\"comment\">//找了一圈找到了，如果相等就没找到</span></span><br><span class=\"line\">                <span class=\"comment\">//交换</span></span><br><span class=\"line\">                arr[start]=arr[end];</span><br><span class=\"line\">                <span class=\"comment\">//位置已经占用，移动到下一个位置</span></span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//再从左往右找</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start&lt;end&amp;&amp;arr[start]&lt;=base)&#123;</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(start&lt;end)&#123;<span class=\"comment\">//找到了，如果相等表示没有找到</span></span><br><span class=\"line\">                arr[end]=arr[start];</span><br><span class=\"line\">                end--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//最后end，和start都会指向空位置</span></span><br><span class=\"line\">        arr[start]=base;</span><br><span class=\"line\">        <span class=\"comment\">//再递归找左边的</span></span><br><span class=\"line\">        quickSort(arr,l,start-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//再递归找右边的</span></span><br><span class=\"line\">        quickSort(arr,start+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"希尔排序实现\"><a href=\"#希尔排序实现\" class=\"headerlink\" title=\"希尔排序实现\"></a>希尔排序实现</h3><p>因为插入排序对基本有序的数组移动次数较少，通过设置一个间隔，把间隔较远的元素基本有序，再用插入排序效率就比较高。<br>最后不断缩小间隔，使全部内容有序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">//首先，循环几组间隔</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> d = arr.length&gt;&gt;&gt;<span class=\"number\">1</span>; d&gt;<span class=\"number\">0</span>; d&gt;&gt;&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//决定该间隔下需要移动的次数</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i += d) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//对新元素插入到有序的数组中</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span>; j -= d) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (arr[j] &lt; arr[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> tmp = arr[j];</span><br><span class=\"line\">                        arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                        arr[j - <span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">        startSort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 归并排序</span></span><br><span class=\"line\"><span class=\"comment\"> * 基本思想是对两个有序的数组进行合并，</span></span><br><span class=\"line\"><span class=\"comment\"> * 由于一个元素的数组是有序的，这样两个一个元素的数组合并成有序的之后，</span></span><br><span class=\"line\"><span class=\"comment\"> * 再和另一个有序的数组进行合并。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] tmp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];</span><br><span class=\"line\">        startSort(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>,tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> end,<span class=\"keyword\">int</span>[] tmp)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//只有一个元素时，不需要排，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start&gt;=end) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=((end-start)&gt;&gt;&gt;<span class=\"number\">1</span>)+start;</span><br><span class=\"line\">        startSort(arr,start,mid,tmp);</span><br><span class=\"line\">        startSort(arr,mid+<span class=\"number\">1</span>,end,tmp);</span><br><span class=\"line\">        merge(arr,start,mid,end,tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> start,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> end,<span class=\"keyword\">int</span>[] tmp)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=start;</span><br><span class=\"line\">        <span class=\"comment\">//从第二个数组的第一位开始</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid&amp;&amp;j&lt;=end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i]&lt;arr[j])&#123;</span><br><span class=\"line\">                tmp[t++]=arr[i];</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                tmp[t++]=arr[j];</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid)&#123;</span><br><span class=\"line\">            tmp[t++]=arr[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=mid)&#123;</span><br><span class=\"line\">            tmp[t++]=arr[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start&lt;=end)&#123;</span><br><span class=\"line\">            arr[start++]=tmp[t++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ints = &#123;<span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        sort(ints);</span><br><span class=\"line\">        System.out.println(Arrays.toString(ints));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 基数排序，基本思想是：先对各位进行排序，然后再对10位，再对100位。</span></span><br><span class=\"line\"><span class=\"comment\"> * 参考：https://www.runoob.com/w3cnote/radix-sort.html</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RadixSort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;Integer, LinkedList&lt;Integer&gt;&gt; map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxLength = getMaxLength(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,count;i&lt;=maxLength;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//放入容器</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> digit = getDigit(value, i);</span><br><span class=\"line\">                LinkedList&lt;Integer&gt; integers = map.computeIfAbsent(digit, k -&gt; <span class=\"keyword\">new</span> LinkedList&lt;&gt;());</span><br><span class=\"line\">                integers.addLast(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//从容器中拿出</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">9</span>;j++)&#123;</span><br><span class=\"line\">                LinkedList&lt;Integer&gt; integers = map.get(j);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (integers!=<span class=\"keyword\">null</span>&amp;&amp;!integers.isEmpty())&#123;</span><br><span class=\"line\">                    arr[count++]=integers.removeFirst();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取一个数组最大的位数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 一个数组上最大数的位数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxLength</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        OptionalInt max = Arrays.stream(arr).max();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(max.isPresent())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(max.getAsInt()).length();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"不存在最大值\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取一个整数某位上的数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> number 正整数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> digit 哪一位，10位还是百位</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 某位上的数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDigit</span><span class=\"params\">(<span class=\"keyword\">int</span> number,<span class=\"keyword\">int</span> digit)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (--digit&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            n*=<span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number/n%<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">123</span>,<span class=\"number\">45</span>,<span class=\"number\">98</span>,<span class=\"number\">700</span>,<span class=\"number\">15</span>&#125;;</span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>堆排序的基本思想是：先构建一个最大堆，然后交换根节点和结尾节点<br>这样再调整堆的时候，就只需要调整左子树或者右子树。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造一个最大堆之后，就交换根节点和最后节点，然后长度-1再进行下一步</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr 原始数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"comment\">//先构建一个大根堆，这样的话，后面就只需要调整一边</span></span><br><span class=\"line\">        buildMaxHeap(arr);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> newLen=arr.length-i;</span><br><span class=\"line\">            maxHeap(arr,<span class=\"number\">0</span>,newLen);</span><br><span class=\"line\">            swap(newLen-<span class=\"number\">1</span>,<span class=\"number\">0</span>,arr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 先构建一个最大对，这样都后面调整的时候就不用左右子树都走，</span></span><br><span class=\"line\"><span class=\"comment\">     * 只需要走一边就行了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> parent = arr.length%<span class=\"number\">2</span>==<span class=\"number\">0</span>?(arr.length&gt;&gt;&gt;<span class=\"number\">1</span>)-<span class=\"number\">1</span>:arr.length&gt;&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;parent&gt;=<span class=\"number\">0</span>;parent--)&#123;</span><br><span class=\"line\">            maxHeap(arr,parent,arr.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调整当前堆位最大堆</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i 根节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> len 当前数组长度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">maxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left=i*<span class=\"number\">2</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right=i*<span class=\"number\">2</span>+<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> large=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasChild(left,len)&amp;&amp;arr[left]&gt;arr[large])&#123;</span><br><span class=\"line\">            large=left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasChild(right,len)&amp;&amp;arr[right]&gt;arr[large])&#123;</span><br><span class=\"line\">            large=right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (large!=i)&#123;</span><br><span class=\"line\">            swap(i,large,arr);</span><br><span class=\"line\">            maxHeap(arr,large,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断当前节点是否超过了数组长度，</span></span><br><span class=\"line\"><span class=\"comment\">     * 没有超过表明当前节点，还有孩子，</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i 当前节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> len 当前数组长度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 超过返回true，没有超过返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasChild</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i &lt;= len - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 把最大的浮上去，child浮到parent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> parent 父亲节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> child  孩子节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> parent,<span class=\"keyword\">int</span> child,<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[child]&gt;arr[parent])&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp=arr[child];</span><br><span class=\"line\">            arr[child]=arr[parent];</span><br><span class=\"line\">            arr[parent]=tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=&#123;<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">26</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> xyz.threewater;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 计数排序，用hashMap的特点进行排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;Integer, LinkedList&lt;Integer&gt;&gt; map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i:arr)&#123;</span><br><span class=\"line\">            map.computeIfAbsent(i, k-&gt;<span class=\"keyword\">new</span> LinkedList&lt;&gt;()).addLast(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(LinkedList&lt;Integer&gt; list:map.values())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> value:list)&#123;</span><br><span class=\"line\">                arr[i++]=value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=&#123;<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        sort(arr);</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["学习"]},{"title":"关于WaterCode","url":"https://threewater.xyz/2020/03/12/about-watercode/","content":"<p>最近发现WaterCode这款软件写的不够好，展示与逻辑混合在一起，打算重构</p>\n","categories":["Java"],"tags":["JavaFx"]},{"title":"面试问题之-介绍一下你的实习经历吧","url":"https://threewater.xyz/2020/03/10/find-work-prepare-2/","content":"<p>面试官好，我实习的时候主要参与两个项目，一个江苏智能监控管家应用。<br>一个浙江机器人项目，我主要负责其中的深度巡视模块的开发。<br>当时我们导师让我做一个叫深度巡视引擎的东西，就是检查数据库各种<br>电力设备的运行情况，比如电流，电压的增长是不是线性的，温度是否正常等。<br>但是这种检查种类繁多，但大体的过程是一样的。只是展示的方式啊，展示的结果<br>略有不同，于是我就写了一个接口，有一个巡视的方法，还有一个展示结果的方法<br>然后所有的巡检类都实现这个接口，然后还写了一个配置界面，用来配置这些巡检类<br>主要配置的是这些Bean的名称，存入数据库，然后写了一个引擎，就是从数据取出<br>这些Bean的名称，然后用Spring.getBean()获取到这些Bean，然后循环一个一个跑<br>最后对结果进行汇总，扔给前端。最后发现循环太慢，于是用了线程池，然后等待所有<br>线程都跑完，再对结果进行总结。后来说要可以定时执行，于是我又写了一个定时任务。<br>这个算是印象比较深刻的。除了这个比较大的功能之外呢，前前后也写了一些功能。比如<br>excel解析，前端的echart图啊。<br>还有就是一个培训考试系统。就是用来给国家电网的那些监控员评测用的，提升他们的专业<br>知识技能什么的，这个涉及的表就有点多，有题库表啊，题目表，选项表，试卷表，试题表<br>考生的答题卡表。以及考生对每个问题的具体回答表。大概的过程就是从题库里面选选一些<br>题目，出一张试卷，然后选择分配给哪些考生。生成相应的答题卡，然后考生进入这个系统<br>就看一下有没有自己的答题卡，然后通过关联查询查出所有题目，发给前端。然后阅卷的话呢<br>就查看有没有已经做完的答题卡，有的话自动验证单选题是否正确，正确的话就自动评分<br>简答题的话就交给人来评分。</p>\n","categories":["找工作"],"tags":["Java"]},{"title":"面试时的自我介绍","url":"https://threewater.xyz/2020/03/09/self-intro/","content":"<p>面试官晚上好！我叫邹先淼，来自湖南长沙，就读于江西理工大学<br>网络工程专业，平常主学Java，平常用的最多的是Spring的一些框架，<br>还有数据库相关的Mybatis框架。平常也会做一些小软件什么的，<br>比如最近的WaterCode，它是一个用JavaFx写的小软件，对于这个编辑器啊，我现在<br>实现了一些基本功能，比如对maven的xml文件的依赖解析，以及集成了控制台，<br>还集成了Java代码高亮，以及Git的一步提交等功能，<br>上一次工作是在泰豪软件实习，主要参与他们电网事业部的江苏智能监控应用的<br>产品开发与bug消缺，负责深度巡视模块的开发，以及培训考试模块的开发。<br>对测试驱动开发以及DevOps都有一定的了解。</p>\n","categories":["Java"],"tags":["面试"]},{"title":"面试准备之-Java集合框架复习","url":"https://threewater.xyz/2020/03/08/find-work-prepare-1/","content":"<p>Collection是顶级接口，表示无序的，可重复元素的集合。<br>Set 是不可重复元素结合，常用的实现类有<br>  TreeSet，基于红黑树实现，能够保持插入的顺序<br>  HashSet，基于哈希表实现，不能保证顺序，但是查找一个元素的效率高<br>  LinkHasSet，弥补了HashSet的不足，通过一个双向链表来维护插入的顺序<br>List 可重复元素集合，常用的实现类有<br>  ArrayList，基于数组实现，当数组装满到一定程度之后，会自动进行扩容，在中间插入数据要移动数组<br>  LinkList，基于双向链表实现能够保证插入时的顺序，中间插入数据不需要移动。<br>            还额外提供了从开始处添加和从末尾处添加等操作。可以用来实现队列，栈<br>Queue 队列，一种从头部进，尾部出的一种数据结构。</p>\n<p>支持并发的容器<br>ConcurrentHashMap ，就是把数组分成几个段，然后在不同的段上加上不同的锁，这样多个线程只要访问<br>不同的段，就可以实现同时访问。</p>\n<p>CopyOnWriteList，读写分离List ,读在一个数组，写也在一个数组。写完之后复制成一份新数组，然后指向<br>这个新数组。</p>\n","categories":["Java"],"tags":["找工作"]},{"title":"找工作","url":"https://threewater.xyz/2020/03/08/find-work/","content":"<p>两个字：害怕。<br>害怕自己技术水平不够。<br>害怕面试。<br>害怕进入达不到工作的要求。<br>害怕工作的不好。<br>害怕自己不熟悉的东西。<br>害怕未知。<br>所以一直拖到现在。</p>\n<p>害怕也要去做，总是要去生存，死亡只是逃避的借口。<br>边投递，边准备。</p>\n<p>先立一个小目标，4月份之前一定要找到工作。<br>先从Java的集合开始</p>\n<hr>\n<p>3月9日更新：<br>今天来了两个面试电话，我却一个都不敢接，终究还是对自己没有信心。<br>没有信心的原因还是没有实力。</p>\n<p>3月10日更新：<br>就硬投，没人要大不了去送快递。</p>\n<p>2月11日更新:<br>万万没有想到能接到吉比特的笔试通知。我这个简历可以说是很菜了<br>14号线上笔试，不说了只有2天时间了。去准备一下。</p>\n","categories":["Java"],"tags":["找工作"]},{"title":"2020年开始了","url":"https://threewater.xyz/2020/02/15/2020-think/","content":"<p>今年毕业，终于要毕业了，之后就要经济独立了，去各种地方，做自己喜欢的事，探索未知。</p>\n<p>2020计划：</p>\n<ol>\n<li><p>买一台新的笔记本电脑。</p>\n</li>\n<li><p>买一台不错的音箱。</p>\n</li>\n<li><p>努力工作。</p>\n</li>\n<li><p>看书，喝茶。</p>\n</li>\n</ol>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" style=\"position: fixed;bottom: 0;right: 0;\" src=\"//music.163.com/outchain/player?type=2&id=28987655&auto=0&height=66\"></iframe>","categories":["日记"],"tags":["感想"]},{"title":"org.aopalliance包的一点理解","url":"https://threewater.xyz/2019/08/02/spring-aop/","content":"<h1 id=\"JoinPoint\"><a href=\"#JoinPoint\" class=\"headerlink\" title=\"JoinPoint\"></a>JoinPoint</h1><p>我翻译为连接点，连接点是程序运行时产生的一系列事件，比如方法被调用了，属性被访问了，构造函数被调用了，等。<br>从此连接点可分为静态部分和动态部分，静态部分就是事件本体：比如方法，构造函数，属性，等。<br>动态部分就是事件的工作，比如调用，访问，等。<br>连接点的静态部分可以通过<code>getStaticPart()</code>获取。<br>动态部由其子类实现。</p>\n<h1 id=\"Interceptor\"><a href=\"#Interceptor\" class=\"headerlink\" title=\"Interceptor\"></a>Interceptor</h1><p>拦截器，拦截器就像监听器，监听程序运行时的一系列事件，比如方法被调用了他知道，属性被访问了它知道。<br>不过他和监听器不同，监听器不能防止事件继续进行，而拦截器可以。<br>拦截器需要被注册在连接点的静态部分上面。一个连接点上的多个拦截器构成让拦截器链。<br>连接点知道它身上有这个拦截器链。<br>针对不同的事件，自然有不同的拦截器，交由子类实现。</p>\n<h1 id=\"Invocation\"><a href=\"#Invocation\" class=\"headerlink\" title=\"Invocation\"></a>Invocation</h1><p>是JoinPoint的子接口，他表示程序运行时的调用事件。既然是调用，那么肯定会带一些入参。<br><code>Object[] getArguments()</code>可以获取调用时的入参。</p>\n<h1 id=\"Advice\"><a href=\"#Advice\" class=\"headerlink\" title=\"Advice\"></a>Advice</h1><p>这个不怎么理解，我翻译为增强。既然是增强，我猜他应该包含增强逻辑和增强的位置。</p>\n<h1 id=\"MethodInvocation\"><a href=\"#MethodInvocation\" class=\"headerlink\" title=\"MethodInvocation\"></a>MethodInvocation</h1><p>是Invocation的子类，表示方法被调用的事件，这样，他的静态部分就是方法了，所以他有一个<br><code>Method getMethod()</code>方法，获取其静态部分，是父类<code>getStaticPart()</code>的友好实现，他们都返回同一个结果。</p>\n<h1 id=\"ConstructorInvocation\"><a href=\"#ConstructorInvocation\" class=\"headerlink\" title=\"ConstructorInvocation\"></a>ConstructorInvocation</h1><p>是Invocation的子类，表示构造函数被调用的事件，同上。</p>\n<h1 id=\"MethodInterceptor\"><a href=\"#MethodInterceptor\" class=\"headerlink\" title=\"MethodInterceptor\"></a>MethodInterceptor</h1><p>方法拦截器，拦截方法被调用的事件，<br><code>Object invoke(MethodInvocation invocation)</code>参数是MethodInvocation，表明它可以拿到方法调用时的静态部分。<br>也就是Method，同时还可以拿到<code>MethodInvocation</code>中的调用入参，这样这个方法怎么执行，到底执不执行就完全<br>掌握在这个拦截器上了。这个方法应该调用<code>Joinpoint#proceed()</code>交给下面的拦截器。</p>\n","categories":[],"tags":[]},{"title":"JS变量声明&数据类型","url":"https://threewater.xyz/2019/07/01/js01/","content":"<p>一般我们推荐使用<code>严格</code>模式<br>变量必须先声明后使用。<br>声明变量的两种方式<br>let：赋值后可以被改变，驼峰式命名法<br>const：赋值后，不能被改变，大写，多个单词之间用_分割</p>\n<h1 id=\"let-和-var-的区别\"><a href=\"#let-和-var-的区别\" class=\"headerlink\" title=\"let 和 var 的区别\"></a>let 和 var 的区别</h1><p>var的作用域只有两种，全局的和函数的，也就说它会冲出if，for等代码块的限制<br>var的声明操作发生在，全局和函数开始之前，赋值发生在赋值语句处</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=b;</span><br></pre></td></tr></table></figure>\n\n<p>和Java一样，只是引用。</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><ol>\n<li>number类型：包括，整形，浮点，Infinity, -Infinity ，NaN<br>1/0 是无穷，计算错误或者未定义的数学运算返回NaN,你可以大胆的做数学运算<br>NaN不等于任何数</li>\n<li>string类型</li>\n<li>boolean类型</li>\n<li>null类型，null不是空指针，或者空引用，他就是字面意思，表示我也不知道这是什么</li>\n<li>undefined类型，这个就表示空指针或者空引用了，一般我们用来检查变量是否被分配。</li>\n<li>symbol 是object的UUID</li>\n<li>object 类型，function属于object类型，只不过typeof把它视为了function</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">1e9</span>;<span class=\"comment\">//1后面9个0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b=<span class=\"number\">7.3e10</span>;<span class=\"comment\">//7.3*10个0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c= <span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"comment\">//他们都表示同一个数，他们是相等的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> d=<span class=\"number\">0xFF</span>;<span class=\"comment\">//16进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> e = <span class=\"number\">0b11111111</span>; <span class=\"comment\">// 二进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"number\">0o377</span>; <span class=\"comment\">// 八进制</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"number转为String\"><a href=\"#number转为String\" class=\"headerlink\" title=\"number转为String\"></a>number转为String</h1><p>每一个声明出来的变量都有<code>toString()</code>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果变量的实际类型是number，那么</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">0xFF</span>;</span><br><span class=\"line\"><span class=\"comment\">// 用整形来存颜色，需要的时候转成字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b=a.toString(<span class=\"number\">16</span>);<span class=\"comment\">//输出16进制字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c=a.toString(<span class=\"number\">2</span>);<span class=\"comment\">//输出二进制字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 数字直接调用toString</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"number\">11.</span>.toString(<span class=\"number\">2</span>);<span class=\"comment\">//如果只有一个点，会被认为是小数部分</span></span><br><span class=\"line\"><span class=\"comment\">//也可以这样</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b=(<span class=\"number\">1</span>).toString(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"关于小数\"><a href=\"#关于小数\" class=\"headerlink\" title=\"关于小数\"></a>关于小数</h1><p>小数是分数的一种表示形式。不如1/10，就是0.1。但是1/3是0.333…无限循环。<br>可见，如果存储容量有限我们是无法存储1/3这样的小数的，我们只能近似的存储它：0.333334。<br>这个问题在二进制中同样存在，表示的数总会大一点或者小一点，<br>这样如果两个不精确的数做运算，其结果必然是不精确的，这样他就不会等于理想结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>==<span class=\"number\">0.3</span>);<span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n\n<p>我们只能用<code>0.123213..toFixed(3)</code>这样精确到多少位的字符串表示<br>但是有些小数参加运算有问题，有些又不会，</p>\n<h1 id=\"String到Number的严格转换和松转换\"><a href=\"#String到Number的严格转换和松转换\" class=\"headerlink\" title=\"String到Number的严格转换和松转换\"></a>String到Number的严格转换和松转换</h1><ol>\n<li>严格转换：<code>+</code>，Number()</li>\n<li>松转换：parseInt(),parseFloat(),遇到不是数字就不会往后面读取了，如果第一个也不是数字，返回NaN</li>\n</ol>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"string\">\"gg\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=<span class=\"string\">'aa'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c=<span class=\"string\">`gg <span class=\"subst\">$&#123;<span class=\"number\">1</span>+<span class=\"number\">2</span>&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"操作数\"><a href=\"#操作数\" class=\"headerlink\" title=\"操作数\"></a>操作数</h1><p>算术运算操作符会尝试把操作数转成number<br>逻辑运算操作符会尝试把操作数转成Boolean</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\"+\"></a>+</h2><ol>\n<li>一元加和Number()一样，把字符串转为number</li>\n<li>二元加，在没有遇到字符串时做算术运算，遇到字符串时做数学运算<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"*\"></a>*</h2><code>2**3</code>表示2的三次幂<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"=\"></a>=</h2><code>=</code>会返回右边式子的结果<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span> - (a = b + <span class=\"number\">1</span>);<span class=\"comment\">//c=0</span></span><br><span class=\"line\"><span class=\"comment\">//a=3</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"，\"><a href=\"#，\" class=\"headerlink\" title=\"，\"></a>，</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = (<span class=\"number\">1</span> + <span class=\"number\">2</span>, <span class=\"number\">3</span> + <span class=\"number\">4</span>);</span><br><span class=\"line\">alert( a ); <span class=\"comment\">// 7 (the result of 3 + 4)</span></span><br></pre></td></tr></table></figure>","categories":[],"tags":[]},{"title":"Nginx下HTTPS配置记录","url":"https://threewater.xyz/2019/07/01/nginx-config/","content":"<p>把文件：<code>/etc/nginx/sites-available/default</code>修改为如下<br><code>.pem</code>和<code>.key</code>文件放在<code>/etc/nginx</code>下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # SSL configuration</span><br><span class=\"line\">        listen 443 ssl http2;</span><br><span class=\"line\">        listen [::]:443 ssl default_server;</span><br><span class=\"line\">        ssl_certificate a.pem;</span><br><span class=\"line\">        ssl_certificate_key a.key;</span><br><span class=\"line\"></span><br><span class=\"line\">        root /var/www/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # Add index.php to the list if you are using PHP</span><br><span class=\"line\">        index index.html index.htm index.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name threewater.xyz;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                # First attempt to serve request as file, then</span><br><span class=\"line\">                # as directory, then fall back to displaying a 404.</span><br><span class=\"line\">                #try_files $uri $uri/ =404;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen 80 default_server;</span><br><span class=\"line\">        listen [::]:80 default_server;</span><br><span class=\"line\">        return 301 https://$host$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[],"tags":["服务器"]},{"title":"CSS的一些小知识点","url":"https://threewater.xyz/2019/06/30/learn-html01/","content":"<h1 id=\"通用样式处理\"><a href=\"#通用样式处理\" class=\"headerlink\" title=\"通用样式处理\"></a>通用样式处理</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"margin-top可能会有的BUG\"><a href=\"#margin-top可能会有的BUG\" class=\"headerlink\" title=\"margin-top可能会有的BUG\"></a>margin-top可能会有的BUG</h1><p>如果子元素使用了marggin-top 父元素要用overflow:hidden</p>\n<h1 id=\"让div基于浏览器正中央\"><a href=\"#让div基于浏览器正中央\" class=\"headerlink\" title=\"让div基于浏览器正中央\"></a>让div基于浏览器正中央</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"消除浮动对其它元素的影响\"><a href=\"#消除浮动对其它元素的影响\" class=\"headerlink\" title=\"消除浮动对其它元素的影响\"></a>消除浮动对其它元素的影响</h1><ol>\n<li>给父元素设置高度<br>2 .给父元素设置万能清除法<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    display:block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>:hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.clear</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">zoom</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"图文环绕，或者要求组件定格于img标签\"><a href=\"#图文环绕，或者要求组件定格于img标签\" class=\"headerlink\" title=\"图文环绕，或者要求组件定格于img标签\"></a>图文环绕，或者要求组件定格于img标签</h1><p>给img加浮动,后面的元素对顶左上格</p>\n<h1 id=\"让颜色变透明\"><a href=\"#让颜色变透明\" class=\"headerlink\" title=\"让颜色变透明\"></a>让颜色变透明</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    rgba(255,255,255,0.4)\\*透明度为40%*\\</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"背景图的一些设置\"><a href=\"#背景图的一些设置\" class=\"headerlink\" title=\"背景图的一些设置\"></a>背景图的一些设置</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 图片基于正中央 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-position</span>:center;</span><br><span class=\"line\">    <span class=\"comment\">/* 图片充满整个盒子 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-size</span>:cover;</span><br><span class=\"line\">    <span class=\"comment\">/* 图片不随页面滚动 */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-attachment</span>:fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"移动文字位置\"><a href=\"#移动文字位置\" class=\"headerlink\" title=\"移动文字位置\"></a>移动文字位置</h1><p><code>text-indent</code></p>\n<h1 id=\"文字居中\"><a href=\"#文字居中\" class=\"headerlink\" title=\"文字居中\"></a>文字居中</h1><p><code>line-height</code></p>\n<h1 id=\"隔断条的设置\"><a href=\"#隔断条的设置\" class=\"headerlink\" title=\"隔断条的设置\"></a>隔断条的设置</h1><p><code>background：url no-repeat right center</code></p>\n<p>#图片像左无限延申</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 对于没有设置宽度的div，他就会根据div的大小自动拉伸 */</span></span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如果设置了margin或者border那么height或者width要减\"><a href=\"#如果设置了margin或者border那么height或者width要减\" class=\"headerlink\" title=\"如果设置了margin或者border那么height或者width要减\"></a>如果设置了margin或者border那么height或者width要减</h1><p>测量的话把border也测进去，先把布局画出来，后期再减去</p>\n<p>#字体大小<br>font-weight：500<br>不能带单位<br>字体有默认的上下空白<br>所以我们在设置边距的时候应该少设一点  </p>\n<h1 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h1><p>一般我们可以用marigin 或者padding实现<br>但是如果mairign很长，那么就不适合，<br>还有比如如果不知道设置多少，可以以用position</p>\n<p>如果父元素没有设置定位，那么子元素相对于浏览器进行定位</p>\n<p>相对定位没啥作用，一般是和绝对定位使用<br>marigin是在同一层的，而position是在不同层的<br>定位的层次是按html标签排列的顺序决定的，越后面的元素，越在上层</p>\n<h1 id=\"透明\"><a href=\"#透明\" class=\"headerlink\" title=\"透明\"></a>透明</h1><p>opacity<br>rgba</p>\n<h1 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h1><p>适用于所有连续变化的属性，不连续变化的没用<br>也就说这个属性设在那个标签上，如果这个标签有瞬间变化，他就会把他转成连续变化</p>\n<p>#overflows:hidden<br>只要父，祖父元素设置了这个，任何超出的部分都会被隐藏</p>\n<p>#hover属性的深度理解<br>父元素的范围会包括子元素</p>\n<h1 id=\"Block\"><a href=\"#Block\" class=\"headerlink\" title=\"Block\"></a>Block</h1><ol>\n<li>有margin 和 padding 四边都有。</li>\n<li>独占一行</li>\n</ol>\n<h1 id=\"Inline\"><a href=\"#Inline\" class=\"headerlink\" title=\"Inline\"></a>Inline</h1><ol>\n<li>width，height无效，由内容大小决定。</li>\n<li>margin padding 左右有效，上下无效</li>\n</ol>\n<h1 id=\"Inline-Block\"><a href=\"#Inline-Block\" class=\"headerlink\" title=\"Inline Block\"></a>Inline Block</h1><p>例如 img input标签<br>属于Inline元素下</p>\n<p>两个Inline Block 标签在一起时 中间会有缝隙<br>第一个元素加float：left</p>\n<p>CSS样式会影响标签的元素类型</p>\n<h1 id=\"元素类型转换\"><a href=\"#元素类型转换\" class=\"headerlink\" title=\"元素类型转换\"></a>元素类型转换</h1><p>这个是有需求的，因为标签代表功能，如果这个标签不能满足CSS需求的话<br>就要进行转换<br>例如：a inline—-&gt;inline block</p>\n<p>#图片水平垂直居中<br>父元素 设置<br>text-algin=center；<br>line-height：同样高度。按理说这样就可以水平垂直居中了，但是不够精确<br>子元素 设置<br>vertical-align：middle；使垂直居中更精确，只对iline-block有用</p>\n","categories":[],"tags":["CSS"]},{"title":"简单看一下 Spring 的缓存","url":"https://threewater.xyz/2019/04/24/spring-cache/","content":"<p>为了速度：</p>\n<p>缓存主要解决不同设备之间的速度差异问题，CPU和内存之间有一级，二级缓存。内存和硬盘之间又有缓存。Java里面的缓存也是内存和硬盘之间的缓存。缓存最重要的指标就是缓存的命中率，据说CPU的缓存命中率有98%？我们自己编写的程序能不能达到这么高的命中率呢？呵呵，我不知道。有待研究。</p>\n<p>Spring Cache ：</p>\n<p>Spring Cache 就像是一个适配器，把市面上各种缓存框架都适配成了 “Spring 式” 的。他提供了很多注解，这些注解配合 AOP 可以使缓存处理代码和业务代码解耦。</p>\n<p>自己简单实现一个缓存：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CacheManager</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,T&gt; cache=<span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, T&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getValue</span><span class=\"params\">(String key)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addOrUpdateCache</span><span class=\"params\">(String key,T value)</span></span>&#123;</span><br><span class=\"line\">        cache.put(key,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">evitCache</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        cache.clear();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CacheManager&lt;User&gt; cacheManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserService</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cacheManager=<span class=\"keyword\">new</span> CacheManager&lt;User&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserById</span><span class=\"params\">(String userId)</span></span>&#123;</span><br><span class=\"line\">        User value = cacheManager.getValue(userId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"get from cache...\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        value=getFromDB(userId);</span><br><span class=\"line\">        cacheManager.addOrUpdateCache(userId,value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> User <span class=\"title\">getFromDB</span><span class=\"params\">(String userId)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"get from DB...\"</span>+userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reload</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        cacheManager.evitCache();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String userId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.userId=userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        UserService userService = <span class=\"keyword\">new</span> UserService();</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"清除缓存\"</span>);</span><br><span class=\"line\">        userService.reload();</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get from DB...<span class=\"number\">100</span></span><br><span class=\"line\">get from cache...</span><br><span class=\"line\">清除缓存</span><br><span class=\"line\">get from DB...<span class=\"number\">100</span></span><br><span class=\"line\">get from cache...</span><br></pre></td></tr></table></figure>\n\n<p>我们自己实现的缓存呢，一个典型的特点就是高耦合，不够优雅，我们可以想当然的通过AOP 把缓存代码抽取出来，例如，我们在调用 getUserById 方法前织入增强，判断userId是否存在于缓存中，如果存在，直接返回，如果不存在，再调用真实方法，然后在方法返回后注入增强，把返回值存入缓存中。其实这更像是一种通用的功能，所以Spring为我们提供了Spring Cache，使用它我们就可以实现缓存代码和实现代码分离。</p>\n<p>Spring Cache：</p>\n<p>Spring Cache 是Spring和核心功能，在Spring Context 包中。</p>\n<p>我们来看一个简单的示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Cacheable</span>(<span class=\"string\">\"users\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserById</span><span class=\"params\">(String userId)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFromDB(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> User <span class=\"title\">getFromDB</span><span class=\"params\">(String userId)</span> </span>&#123;<span class=\"comment\">//这个方法只会被调用一次</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"get from DB...\"</span>+userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ApplicationContext context=<span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:spring-config.xml\"</span>);</span><br><span class=\"line\">        UserService userService = context.getBean(UserService.class);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.threewater\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache:annotation-driven</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"cacheManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.cache.support.SimpleCacheManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"caches\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                  <span class=\"attr\">p:name</span>=<span class=\"string\">\"default\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                  <span class=\"attr\">p:name</span>=<span class=\"string\">\"users\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get from DB...<span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>@Cacheable</code> 可以对方法进行缓存，也就说，它会以参数作为键，以返回值作为值来缓存到Map中，对于很多参数的情况，Spring会根据所有的参数生成键，我们也可以通过SpEL表达式指定我们想要的键，也可以自己实现KeyGenerator来定义键，然后以Bean的形式配入xml，然后在这个注解中引用他。这个基于Mao的缓存实现是Spring自带的，一般我们会用第三方的Jar包来替代它。</p>\n<p><code>@Cacheable</code> 注解只能添加缓存，不能删除缓存。我们来看一下如何删除缓存，其实我们不删也行，一般的缓存框架都会有一些算法来删除很久没用的缓存，类似于垃圾回收机制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@CacheEvict</span>(<span class=\"string\">\"users\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeUser</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">        removeFromDB(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeFromDB</span><span class=\"params\">(String userId)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"removed from DB\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext context=<span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"classpath:spring-config.xml\"</span>);</span><br><span class=\"line\">        UserService userService = context.getBean(UserService.class);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"first\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"second\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        userService.removeUser(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"third\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"fourth\"</span>);</span><br><span class=\"line\">        userService.getUserById(<span class=\"string\">\"100\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first</span><br><span class=\"line\">get from DB...<span class=\"number\">100</span></span><br><span class=\"line\">second</span><br><span class=\"line\">removed from DB</span><br><span class=\"line\">third</span><br><span class=\"line\">get from DB...<span class=\"number\">100</span></span><br><span class=\"line\">fourth</span><br></pre></td></tr></table></figure>\n\n<p>那么如何清除缓存中所有元素呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CacheEvict</span>(value = <span class=\"string\">\"users\"</span>,allEntries = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeUser</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">    removeFromDB(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>清除一般发生在方法返回值之后，如何再调用方法之前清除呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CacheEvict</span>(value = <span class=\"string\">\"users\"</span>,beforeInvocation = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeUser</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">    removeFromDB(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用EhCache</p>\n<p>接下来我们来看一下EhCache怎么配。</p>\n<p>导包：spring-context-support，net.ehcache。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ehcache</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:noNamespaceSchemaLocation</span>=<span class=\"string\">\"http://ehcache.org/ehcache.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;cacheManagerEventListenerFactory class=\"com.threewater.cache.MyCacheManagerListener\"/&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">defaultCache</span> <span class=\"attr\">maxEntriesLocalHeap</span>=<span class=\"string\">\"10000\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">persistence</span> <span class=\"attr\">strategy</span>=<span class=\"string\">\"none\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">defaultCache</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache</span> <span class=\"attr\">name</span>=<span class=\"string\">\"users\"</span> <span class=\"attr\">maxEntriesLocalHeap</span>=<span class=\"string\">\"1000\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">cacheEventListenerFactory</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.cache.MyCacheEventListenerFacotory\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">persistence</span> <span class=\"attr\">strategy</span>=<span class=\"string\">\"none\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">cache</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ehcache:annotation-driven</span> <span class=\"attr\">cache-manager</span>=<span class=\"string\">\"ehCacheManager\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ehCacheManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.cache.ehcache.EhCacheCacheManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:cacheManager-ref</span>=<span class=\"string\">\"ehcache\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"ehcache\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.cache.ehcache.EhCacheManagerFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:configLocation</span>=<span class=\"string\">\"ehcache.xml\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCacheEventListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">CacheEventListenerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyElementPut</span><span class=\"params\">(Ehcache cache, Element element)</span> <span class=\"keyword\">throws</span> CacheException </span>&#123;</span><br><span class=\"line\">        System.out.println(element.getObjectKey()+<span class=\"string\">\"added\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyElementRemoved</span><span class=\"params\">(Ehcache cache, Element element)</span> <span class=\"keyword\">throws</span> CacheException </span>&#123;</span><br><span class=\"line\">        System.out.println(element.getObjectKey()+<span class=\"string\">\"removed\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCacheEventListenerFacotory</span> <span class=\"keyword\">extends</span> <span class=\"title\">CacheEventListenerFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CacheEventListener <span class=\"title\">createCacheEventListener</span><span class=\"params\">(Properties properties)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyCacheEventListener();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"userService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Cacheable</span>(<span class=\"string\">\"users\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">getUserById</span><span class=\"params\">(String userId)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFromDB(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> User <span class=\"title\">getFromDB</span><span class=\"params\">(String userId)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"get from DB...\"</span>+userId);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@CacheEvict</span>(value = <span class=\"string\">\"users\"</span>,beforeInvocation = <span class=\"keyword\">true</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeUser</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">        removeFromDB(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeFromDB</span><span class=\"params\">(String userId)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"removed from DB\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"spring-config.xml\"</span>);</span><br><span class=\"line\">        Foo foo = applicationContext.getBean(Foo.class);</span><br><span class=\"line\">        System.out.println(foo.list);</span><br><span class=\"line\">        System.out.println(foo.getList());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first</span><br><span class=\"line\">get from DB...<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">100</span>added</span><br><span class=\"line\">second</span><br><span class=\"line\"><span class=\"number\">100</span>removed</span><br><span class=\"line\">removed from DB</span><br><span class=\"line\">third</span><br><span class=\"line\">get from DB...<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">100</span>added</span><br><span class=\"line\">fourth</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"记录一下我的疑问","url":"https://threewater.xyz/2019/04/23/dairy/","content":"<p>好久没写水文了，最近遇到了很多的问题。</p>\n<p>第一个：对于将要存入数据库的数据，到底要不要验证数据已存在？我觉得这个要看具体需求，像很多登录系统，就有验证用户名存在的功能，他要先判断一下数据库是否存在，然后后面的代码才能执行，如果如果再判断完之后发生了线程切换，刚好有另一个人提前注册了，那么你的用户名会和他相同。一种解决的方法是加上 <code>synchronzied</code> 。这样的话会有很多无辜的代码加入阻塞代码块中，另一种方式是使用数据事务了，根据自己业务需求选择合适的事务。</p>\n<p>第二个问题：如果事务回滚了，对于Spring的声明式事务，一个注解就完事了，我们如何感知事务回滚了？，我们可以在controller层提供统一的异常处理机制，这样如果service发生了我们没有预料的异常，我们可以进行处理。</p>\n","categories":["日记"],"tags":["疑问"]},{"title":"Spring 的事务管理","url":"https://threewater.xyz/2019/04/16/transaction/","content":"<p>今天我们来谈一下我对事务的一点理解。</p>\n<p>主要还是多线程的情况下同一资源的访问问题。无论是在数据库中还是在程序中，这种问题都是普遍存在的。在Java中我们有 <code>synchronized</code> 有可重入锁，有 <code>ThreadLocal</code> 等用来解决多线程问题。在数据库中我们也有 行锁，表锁。如果我们直接使用这些锁将会非常的麻烦，于是数据库为我们提供了 “事务” 这一概念，在我看来，事务就是对这些锁的封装，它就像 <code>synchronized</code> 是一种声明式编程的思想。</p>\n<p>有了事务我们就可以解决多个 <code>connection</code>同时访问同一资源的问题。但是还有以还有一个问题，那就是这个 <code>connection</code> 本身是不是线程安全的，也就是说，有没有可能出现多个线程共享一个<code>connection</code> 的情况呢？我们知道连接都是从连接池获取的，而连接池是无法保证为每一个线程分配单独的连接的。还好，Spring为我们解决了这个问题。前提是我们得使用Spring提供的模板类来编写DAO，或者使用DataSourceUtils 来获取连接。对于Hibernate 可以使用Hibernate提供的模板类，或者SessionFacotryUtils 获取会话。Spring内部是通过ThreadLocal 来为每个线程分配一个连接的。</p>\n<p>这样，如果我们使用Spring 的数据库访问模板，使用Spring的事务管理器。我们就可以不用考虑线程安全问题，并且还可以编写与ORM框架无关的事务管理逻辑，再配合AOP，我们就可以让事务管理代码与业务分离，所以对于AOP来说，事务管理器就想是增强逻辑，只要把这个增强逻辑织入Service就行了。就完美了。</p>\n<h1 id=\"一般配置\"><a href=\"#一般配置\" class=\"headerlink\" title=\"一般配置\"></a>一般配置</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--声明事务管理器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:dataSource-ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"formTarget\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.trasaction.BtForm\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--被事务增强后的代理类--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:transactionManager-ref</span>=<span class=\"string\">\"txManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"formTarget\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--相当于切点--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionAttributes\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"get*\"</span>&gt;</span>PROPAGATION_REQUIRED,readOnly<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"*\"</span>&gt;</span>PROPAGATION_REQUIRED<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基于aop-tx-命名空间的配置：\"><a href=\"#基于aop-tx-命名空间的配置：\" class=\"headerlink\" title=\"基于aop/tx 命名空间的配置：\"></a>基于aop/tx 命名空间的配置：</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--声明事务管理器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">p:dataSource-ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--增强--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"txManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--切点--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceMethod\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.threewater.trasaction.*Forum.*(..))\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--切面--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"serviceMethod\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>基于命名空间的配置更具一般性，他把事务管理器当成了增强逻辑。</p>\n<h1 id=\"基于注解的配置\"><a href=\"#基于注解的配置\" class=\"headerlink\" title=\"基于注解的配置\"></a>基于注解的配置</h1><p>通过注解的配置呢，这样注解就相当于切点啦，我们只需在xml中配置一下增强就行了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional</span>(isolation = Isolation.REPEATABLE_READ )</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BtForm</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--声明事务管理器--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:dataSource-ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"Spring-DAO 的一点理解","url":"https://threewater.xyz/2019/04/15/spring-dao/","content":"<p>今天我来谈一下我对DAO层的一些小小的见解。</p>\n<ol>\n<li>DAO层是给Service层用的，所以他应该屏蔽获取数据的细节，所以Service最好通过接口调用，实现解耦。</li>\n</ol>\n<p>DAO层存在以下问题：</p>\n<ol>\n<li>异常体系混乱，每一个ORM框架都有自己的异常体系，不统一，不同框架使用不同的异常体系，给Service回滚带来很多困难，Service编写的事务回滚带来具体的ORM框架。而且还含有根本不需要try/catch的非运行时异常类，需要try/catch。代码中存在很多try/catch 语句。</li>\n<li>DAO层含有很多通用的代码，比如获取连接，关闭连接，事务回滚，等。这些完全可以抽象出来，通过回调函数实现。</li>\n</ol>\n<p>Spring 解决了以上两个问题</p>\n<ol>\n<li>统一ORM框架和JDBC的异常类，全部转为运行时异常，至于如何神奇的把非运行时异常转成运行时异常的？我不知道。不过这样有一个优点，我们根据心情try/catch 具体的异常类。</li>\n<li>为每一个框架提供访问模板。这样我们可以直接用这个模板，而不用再去写哪些重复的代码了。</li>\n</ol>\n<p>个人对数据源的一点理解</p>\n<ol>\n<li>数据源就像是数据库的代理，提升了获取连接的性能 ( 连接池 ) 。也像一个类，屏蔽了后面使用的具体数据库。这样我们在测试的时候，就可以使用非真实的数据库。</li>\n</ol>\n<p>没有代码  (●ˇ∀ˇ●)</p>\n","categories":["Java"],"tags":["学习"]},{"title":"Java中混乱的日志体系","url":"https://threewater.xyz/2019/04/12/log/","content":"<h1 id=\"Java-混乱的日志体系\"><a href=\"#Java-混乱的日志体系\" class=\"headerlink\" title=\"Java 混乱的日志体系\"></a>Java 混乱的日志体系</h1><p>Java中各种日志框架满天飞，每一个框架所用的日志框架还不同，搞了一大堆，其实主要是还是老版本的问题，一些老的框架，或者老的项目，依然用的是旧日志框架。这就造成了一个问题，你dependencies下面一大堆的日志jar包，新的，旧的，基于API的，基于具体实现的，都有。不同的框架各行其道，用老的日志框架疯狂输出，一大堆没用的信息。Spring5使用的是slf4j。然后还为你依赖了各种桥接包，算是比较良心的了。</p>\n<h1 id=\"统一日志框架\"><a href=\"#统一日志框架\" class=\"headerlink\" title=\"统一日志框架\"></a>统一日志框架</h1><p>SJF4J就是用来统一这种混乱情况的，因为它提供了各种桥接包如：<code>jul over slf4j</code>这样一些框架用java common loging输出的，就会变成使用slf4j输出了。大部分框架都是使用<code>抽象包+实现包</code>的体系，所以我们只保留一个实现。抽象包有<code>java common loging</code>，<code>slf4j</code>实现包有：<code>log4j</code>，<code>log4j2</code>，<code>java util loging</code>。</p>\n<p>那么具体如何统一呢？</p>\n<ol>\n<li>排除框架中所有用到的实现包，保留最新的抽象包。</li>\n<li>添加抽象包的桥接包，把框架中所有的抽象包桥接到slf4j。</li>\n<li>引入自己想要的实现包，然后加入实现包的适配器。</li>\n</ol>\n","categories":["Java"],"tags":["学习"]},{"title":"代理设计模式","url":"https://threewater.xyz/2019/04/12/proxy-1/","content":"<p>代理设计模式用在很多地方，代理可以为使用者提供和目标类相同的功能，代理是目标类的增强，这种增强分为很多方面，在AOP中它是为原始对象加入新的功能。还有一个方面就是代理控制对原始对象的访问，只有满足条件时才访问原始对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">extends</span> <span class=\"title\">RealObject</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">condition</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useThisObject</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"object preparing\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (!condition());</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.useThisObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealObject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useThisObject</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"object is used\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Proxy proxy = <span class=\"keyword\">new</span> Proxy();</span><br><span class=\"line\">        proxy.useThisObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"基于 AspectJ 的 AOP配置","url":"https://threewater.xyz/2019/04/09/aspectj/","content":"<p>前面介绍了Spring中AOP的配置，这种配置要求切面类必须实现Spring的接口，代码与Spring的耦合性较高，配置比较繁琐。现在我们我们用 AspectJ 来实现注解配置，这种配置不需要任何实现任何接口，普通POJO类就行，而且看起来更简洁。注解这种声明式编程最适合我这种厌恶配置文件的。</p>\n<p>第一个例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NaiveWaiter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Waiter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">greetTo</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"greet to \"</span>+name+<span class=\"string\">\"...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serveTo</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"serving \"</span>+name+<span class=\"string\">\"...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PreGreetingAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这一点东西包含了，方位，切点，增强逻辑。</span></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* greetTo(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeGreeting</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"aspect 前\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//我们来测试一下</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建AspectJ代理工厂</span></span><br><span class=\"line\">        AspectJProxyFactory factory = <span class=\"keyword\">new</span> AspectJProxyFactory();</span><br><span class=\"line\">        <span class=\"comment\">//设置目标对象</span></span><br><span class=\"line\">        factory.setTarget(<span class=\"keyword\">new</span> NaiveWaiter());</span><br><span class=\"line\">        <span class=\"comment\">//设置切面</span></span><br><span class=\"line\">        factory.addAspect(PreGreetingAspect.class);</span><br><span class=\"line\">        <span class=\"comment\">//生成代理</span></span><br><span class=\"line\">        Waiter proxy = factory.getProxy();</span><br><span class=\"line\">        proxy.serveTo(<span class=\"string\">\"aspect name\"</span>);</span><br><span class=\"line\">        proxy.greetTo(<span class=\"string\">\"aspect name\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">serving aspect name...</span><br><span class=\"line\">aspect 前</span><br><span class=\"line\">greet to aspect name...</span><br></pre></td></tr></table></figure>\n\n<p>以上我们手动使用ApsectJ创建的，我们来用 Spring 自动配置一下。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"naiveWater\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.aspectj.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.aspectj.PreGreetingAspect\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--自动识别容器中含有@ApsectJ注解的bean，然后织入到符合条件的bean中--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Waiter waiter = context.getBean(<span class=\"string\">\"naiveWaiter\"</span>, Waiter.class);</span><br><span class=\"line\">    waiter.greetTo(<span class=\"string\">\"wo\"</span>);</span><br><span class=\"line\">    waiter.serveTo(<span class=\"string\">\"wo\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aspect 前</span><br><span class=\"line\">greet to wo...</span><br><span class=\"line\">serving wo...</span><br></pre></td></tr></table></figure>\n\n<p>或者使用 aop 命名空间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"naiveWaiter\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.aspectj.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.aspectj.PreGreetingAspect\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--这样, 那么长的类名也省了--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>ApsectJ 的切点表达式函数</p>\n<p>对方法的切点表达式函数有</p>\n<ol>\n<li><p>execution ( 参数 … ) ，参数按顺序有：修饰符 ( 可选 ) ，返回类型，方法名，参数，异常 ( 可选 ) 。方法名可以使用类名+方法名，也可以只是用方法名，如上面的切点函数就只是用了方法名。</p>\n<p>示例 : </p>\n<p>execution (* com.threewater.Waiter.*(..)) : 匹配Waiter的所有方法，子类也行。</p>\n<p>execution (* com.threewater.Waiter+.*(..)) ：匹配Waiter实现类或者子类的所有方法，没有在Waiter中声明的方法也匹配。</p>\n<p>execution (* com.threewater.*(..)) 匹配threewater包下的所有方法。</p>\n<p>execution (* com.threewater..*(..)) 匹配threewater及子孙包下所有方法。</p>\n<p>execution (* com.threewater..<em>.get\\</em>(..)) 匹配threewater及子孙包下所有get开始方法。</p>\n<p>exceution (* get(String,int)) ：匹配get方法，并且方法声明的参数类型为String，int。</p>\n<p>exceution (* get(String,*)) ：第二个方法声明的参数类型可以式任意的。</p>\n<p>exceution (* get(String ,..)) : 第二个可以有多个，也可以没有。</p>\n<p>exceution (* get(com.threewater.Waiter+)) : 方法声明的参数类型为Waiter或的子类,不再java.lang 包下也不是和切面类同一包下使用全限定名。</p>\n<p>以上方法参数是针对方法声明的，而不是实际运行时传入的参数。</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li>@annotation(参数) ：参数为注解类型，匹配某个方法上是否标注了某个注解。</li>\n</ol>\n<p>对运行时入参的类型判断函数有</p>\n<ol>\n<li>args(参数) ：参数为运行时入参的类型名，或子类型，也就是说不管它的方法声明是什么样，只要这个方法的在运行时入参是当前类型，或其子类就行。</li>\n<li>@args(参数) ：参数为注解，这个参数必须注到方法声明参数的子类上。</li>\n</ol>\n<p>对类进行判断的函数有：</p>\n<ol>\n<li><p>within(参数) ：参数为匹配字串，</p>\n<p>示例：within(com.threewater.NaiveWaiter) 匹配 NavieWaiter，如果是接口将没有任何作用，如果是接口，可以用target() 。</p>\n<p>within(com.threewater.*) 匹配threewater包下所有类。</p>\n<p>within(com.threewater.*Dao) 匹配所有以Dao结尾的类。</p>\n</li>\n<li><p>target(参数)：参数为类名</p>\n<p>示例：target(com.threewater.Waiter) 匹配Waiter所有实现类，以及Waiter本身。</p>\n</li>\n<li><p>@witthin(参数) ：参数为注解类型</p>\n<p>示例：@within(com.threewater.MyAnnotation) : 标注了这个注解的类，以及其子类都匹配，尽管子类并没有这个注解。</p>\n</li>\n<li><p>@target(参数) ：参数为注解</p>\n<p>示例：@target(com.threewater.MyAnnotation) ：只有标注了这个注解的类匹配，子类不匹配。</p>\n</li>\n</ol>\n<p>切点函数之间可以进行符合运算，如 ||，！，&amp;&amp;。</p>\n<p>切点也可以被命名，使用@Pointcut进行命名，使用类名.方法名进行引用。</p>\n<p>获取被增强方法的入参：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NaiveWaiter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Waiter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PreGreetingAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"target(NaiveWaiter) &amp;&amp; args(name,age)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getArgs</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">        System.out.println(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        NaiveWaiter waiter = context.getBean(<span class=\"string\">\"naiveWaiter\"</span>, NaiveWaiter.class);</span><br><span class=\"line\">        waiter.greetTo(<span class=\"string\">\"wo\"</span>);</span><br><span class=\"line\">        waiter.serveTo(<span class=\"string\">\"wo\"</span>);</span><br><span class=\"line\">        waiter.get(<span class=\"string\">\"11\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"naiveWaiter\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.aspectj.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.aspectj.PreGreetingAspect\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>获取被增强方法的返回值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NaiveWaiter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Waiter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"get2\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PreGreetingAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//匹配NaiveWaiter所有返回值为String类型的方法</span></span><br><span class=\"line\">\t<span class=\"meta\">@AfterReturning</span>(value = <span class=\"string\">\"target(NaiveWaiter)\"</span>,returning = <span class=\"string\">\"returnStr\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getReturn</span><span class=\"params\">(String returnStr)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(returnStr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\"> \t <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        NaiveWaiter waiter = context.getBean(<span class=\"string\">\"naiveWaiter\"</span>, NaiveWaiter.class);</span><br><span class=\"line\">        waiter.get(<span class=\"string\">\"11\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        waiter.get2();</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br><span class=\"line\">get2</span><br></pre></td></tr></table></figure>\n\n<p>获取被增强方法抛出的异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NaiveWaiter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Waiter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">expMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"gg\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PreGreetingAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing</span>(value = <span class=\"string\">\"target(NaiveWaiter)\"</span>,throwing = <span class=\"string\">\"ilse\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getExp</span><span class=\"params\">(IllegalStateException ilse)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(ilse.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        NaiveWaiter waiter = context.getBean(<span class=\"string\">\"naiveWaiter\"</span>, NaiveWaiter.class);</span><br><span class=\"line\">        waiter.expMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gg</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.IllegalStateException: gg</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，先对异常进行了处理，然后再抛出。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"享元设计模式","url":"https://threewater.xyz/2019/04/09/flyweight/","content":"<p>Flyweight 就是把多个对象中相同或者相似的地方，抽取出来。消除对象之间的重复信息，让所有对象引用这些重复信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ball</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//对于球来说，他只有一种颜色，就是白色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\">    <span class=\"comment\">//但是它的序号却有很多</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Ball</span><span class=\"params\">(String color, <span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> color.hashCode()+<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BallFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Integer,Ball&gt; map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String white=<span class=\"string\">\"white\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">BallFactory</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Ball <span class=\"title\">getBall</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.get(num)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            map.put(num,<span class=\"keyword\">new</span> Ball(white,num));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.get(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Ball ball1 = BallFactory.getBall(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Ball ball2 = BallFactory.getBall(<span class=\"number\">2</span>);</span><br><span class=\"line\">        Ball ball3 = BallFactory.getBall(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Ball ball4 = BallFactory.getBall(<span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(ball1);</span><br><span class=\"line\">        System.out.println(ball2);</span><br><span class=\"line\">        System.out.println(ball3);</span><br><span class=\"line\">        System.out.println(ball4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">113101865</span><br><span class=\"line\">113101865</span><br><span class=\"line\">113101865</span><br><span class=\"line\">113101865</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"外观 (Facade) 设计模式","url":"https://threewater.xyz/2019/04/08/facade/","content":"<p>就是一个类封装复杂细节，提供简单接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Computer computer=<span class=\"keyword\">new</span> Computer();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnOnComputer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        computer.loadOperatingSystem();</span><br><span class=\"line\">        computer.checkHardWare();</span><br><span class=\"line\">        computer.loadMainProgram();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadOperatingSystem</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"operatingSystem is started\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkHardWare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"checking hardWare\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadMainProgram</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"desktop is running\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Facade facade = <span class=\"keyword\">new</span> Facade();</span><br><span class=\"line\">        facade.turnOnComputer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"Spring 中 AOP 的配置","url":"https://threewater.xyz/2019/04/08/aop-config/","content":"<p>AOP是基于动态代理技术来实现的，动态代理，动态代理技术一般有两种，一种是JDK的，一种是cglib的，JDK是通过代理类实现接口，然后持有原始类的引用实现的。cglib是继承原始类实现的。Spring都支持这两种，自己也可以指定使用哪种代理方式。</p>\n<h1 id=\"手动使用-Spring-的-ProxyFactory-。\"><a href=\"#手动使用-Spring-的-ProxyFactory-。\" class=\"headerlink\" title=\"手动使用 Spring 的 ProxyFactory 。\"></a>手动使用 Spring 的 ProxyFactory 。</h1><p>这个类可以为任何类生成代理，还可以添加增强和切面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个类包含了方位和切点信息</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingBeforeAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodBeforeAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(Method method, Object[] objects, Object o)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"How are you Mr.\"</span>+objects[<span class=\"number\">0</span>]+<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Waiter target=<span class=\"keyword\">new</span> NaiveWaiter();</span><br><span class=\"line\">        BeforeAdvice beforeAdvice=<span class=\"keyword\">new</span> GreetingBeforeAdvice();</span><br><span class=\"line\">        ProxyFactory factory = <span class=\"keyword\">new</span> ProxyFactory();</span><br><span class=\"line\">        factory.setTarget(target);</span><br><span class=\"line\">        factory.addAdvice(beforeAdvice);</span><br><span class=\"line\">        Waiter waiter=(Waiter)factory.getProxy();</span><br><span class=\"line\">        waiter.greetTo(<span class=\"string\">\"me\"</span>);</span><br><span class=\"line\">        waiter.serveTo(<span class=\"string\">\"me\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Waiter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">greetTo</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">serveTo</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NaiveWaiter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Waiter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">greetTo</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"greet to \"</span>+name+<span class=\"string\">\"...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">serveTo</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"serving \"</span>+name+<span class=\"string\">\"...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置方式使用ProxyFactory\"><a href=\"#配置方式使用ProxyFactory\" class=\"headerlink\" title=\"配置方式使用ProxyFactory\"></a>配置方式使用ProxyFactory</h1><h2 id=\"前置增强\"><a href=\"#前置增强\" class=\"headerlink\" title=\"前置增强\"></a>前置增强</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingBeforeAdvice\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiter\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyInterfaces</span>=<span class=\"string\">\"com.threewater.aopconfig.Waiter\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"greetAdvice\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"target\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上由于我们指定了 proxyInterfaces 所以Spring会使用JDK代理，我们可以这样设置，使它使用cglib。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingBeforeAdvice\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiter\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyTargetClass</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"greetAdvice\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"target\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后置增强\"><a href=\"#后置增强\" class=\"headerlink\" title=\"后置增强\"></a>后置增强</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingAfterAdvice</span> <span class=\"keyword\">implements</span> <span class=\"title\">AfterReturningAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturning</span><span class=\"params\">(Object o, Method method, Object[] objects, Object o1)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"please enjoy yourself\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetBeforeAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingBeforeAdvice\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetAfterAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingAfterAdvice\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiter\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyTargetClass</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"greetBeforeAdvice,greetAfterAdvice\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"target\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"环绕增强\"><a href=\"#环绕增强\" class=\"headerlink\" title=\"环绕增强\"></a>环绕增强</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MethodInterceptor是AOP联盟的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(MethodInvocation methodInvocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        Object[] arguments = methodInvocation.getArguments();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"How are you Mr. \"</span>+arguments[<span class=\"number\">0</span>]+<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">        Object o = methodInvocation.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Please enjoy yourself\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetInterceptor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingInterceptor\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiter\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyTargetClass</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"greetInterceptor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"target\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常增强\"><a href=\"#异常增强\" class=\"headerlink\" title=\"异常增强\"></a>异常增强</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionManager</span> <span class=\"keyword\">implements</span> <span class=\"title\">ThrowsAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrowing</span><span class=\"params\">(Method method, Object[] args, Object target, Exception ex)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"method: \"</span>+method.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"msg: \"</span>+ex.getMessage());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"回滚事务\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForumService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeForum</span><span class=\"params\">(<span class=\"keyword\">int</span> forumId)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"runtime exp\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addForum</span><span class=\"params\">(Forum forum)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> SQLException(<span class=\"string\">\"database exp\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">    ApplicationContext context=<span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"spring-config.xml\"</span>);</span><br><span class=\"line\">    ForumService forumService=context.getBean(<span class=\"string\">\"forumService\"</span>,ForumService.class);</span><br><span class=\"line\">    forumService.removeForum(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">//不明白，为什么抛出异常之后程序终止了运行。</span></span><br><span class=\"line\">    forumService.addForum(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"forumServiceTarget\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.ForumService\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"forumService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"transactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"forumServiceTarget\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyTargetClass</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"切面\"><a href=\"#切面\" class=\"headerlink\" title=\"切面\"></a>切面</h1><h3 id=\"切面是结合切点，方位，增强逻辑的。\"><a href=\"#切面是结合切点，方位，增强逻辑的。\" class=\"headerlink\" title=\"切面是结合切点，方位，增强逻辑的。\"></a>切面是结合切点，方位，增强逻辑的。</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingAdvisor</span> <span class=\"keyword\">extends</span> <span class=\"title\">StaticMethodMatcherPointcutAdvisor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//切点匹配逻辑</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(Method method, Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Waiter类或者是其子类</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.getName().equals(<span class=\"string\">\"greetTo\"</span>)&amp;&amp;Waiter.class.isAssignableFrom(targetClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--环绕增强，包含了增强逻辑以及方位信息--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetInterceptor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingInterceptor\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--切点添加增强--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetingAdvisor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.advisor.GreetingAdvisor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:advice-ref</span>=<span class=\"string\">\"greetInterceptor\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiterTarget\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">abstract</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"greetingAdvisor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyTargetClass</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiter\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"parent\"</span> <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"waiterTarget\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态正则表达式切面\"><a href=\"#静态正则表达式切面\" class=\"headerlink\" title=\"静态正则表达式切面\"></a>静态正则表达式切面</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"regexAdvisor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.support.RegexpMethodPointcutAdvisor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:advice-ref</span>=<span class=\"string\">\"greetInterceptor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:patterns</span>=<span class=\"string\">\".*greet.*\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiter1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"regexAdvisor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"waiterTarget\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyTargetClass</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态切面\"><a href=\"#动态切面\" class=\"headerlink\" title=\"动态切面\"></a>动态切面</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dynamicAdvisor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.support.DefaultPointcutAdvisor\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pointcut\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--内部bean--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.advisor.GreetingDynamicPointcut\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advice\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingBeforeAdvice\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiter\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"dynamicAdvisor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"waiterTarget\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyTargetClass</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GreetingDynamicPointcut</span> <span class=\"keyword\">extends</span> <span class=\"title\">DynamicMethodMatcherPointcut</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(Method method, Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//静态检查效率高，先是使用静态检查，过滤叫不匹配的类。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"greetTo\"</span>.equals(method.getName())</span><br><span class=\"line\">                &amp;&amp; Waiter.class.isAssignableFrom(targetClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//动态切点和静态切点没什么特别之处，只是多了个入参而已</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(Method method, Class&lt;?&gt; targetClass, Object... args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//再使用动态检查</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"water\"</span>.equals(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流程切面\"><a href=\"#流程切面\" class=\"headerlink\" title=\"流程切面\"></a>流程切面</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaiterDelegate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Waiter waiter;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(String clientName)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//被增强</span></span><br><span class=\"line\">        waiter.greetTo(clientName);</span><br><span class=\"line\">        <span class=\"comment\">//被增强</span></span><br><span class=\"line\">        waiter.serveTo(clientName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setWaiter</span><span class=\"params\">(Waiter waiter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.waiter = waiter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">     \tWaiter waiter = context.getBean(<span class=\"string\">\"waiter\"</span>, Waiter.class);</span><br><span class=\"line\">        waiter.greetTo(<span class=\"string\">\"water\"</span>);<span class=\"comment\">//没有被增强</span></span><br><span class=\"line\">        waiter.serveTo(<span class=\"string\">\"water\"</span>);<span class=\"comment\">//没有被增强</span></span><br><span class=\"line\">        WaiterDelegate waiterDelegate = <span class=\"keyword\">new</span> WaiterDelegate();</span><br><span class=\"line\">        waiterDelegate.setWaiter(waiter);</span><br><span class=\"line\">        waiterDelegate.service(<span class=\"string\">\"water\"</span>);   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetBeforeAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingBeforeAdvice\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiterTarget\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--WaiterDelegate下的service方法里面调用的方法被增强--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"controlFlowPointcut\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.support.ControlFlowPointcut\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.Class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.threewater.aopconfig.advisor.WaiterDelegate\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"service\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"controlFlowAdvisor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.support.DefaultPointcutAdvisor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:pointcut-ref</span>=<span class=\"string\">\"controlFlowPointcut\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:advice-ref</span>=<span class=\"string\">\"greetBeforeAdvice\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiter\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.ProxyFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:interceptorNames</span>=<span class=\"string\">\"controlFlowAdvisor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:target-ref</span>=<span class=\"string\">\"waiterTarget\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:proxyTargetClass</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"不使用ProxyFacotry的自动配置\"><a href=\"#不使用ProxyFacotry的自动配置\" class=\"headerlink\" title=\"不使用ProxyFacotry的自动配置\"></a>不使用ProxyFacotry的自动配置</h1><h3 id=\"他会自动根据容器中Advisor的bean来对原始bean进行增强\"><a href=\"#他会自动根据容器中Advisor的bean来对原始bean进行增强\" class=\"headerlink\" title=\"他会自动根据容器中Advisor的bean来对原始bean进行增强\"></a>他会自动根据容器中Advisor的bean来对原始bean进行增强</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"greetBeforeAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.GreetingBeforeAdvice\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"waiterTarget\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.aopconfig.NaiveWaiter\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--WaiterDelegate下的service方法里面调用的方法被增强--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"controlFlowPointcut\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.support.ControlFlowPointcut\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.Class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.threewater.aopconfig.advisor.WaiterDelegate\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"service\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"controlFlowAdvisor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.support.DefaultPointcutAdvisor\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:pointcut-ref</span>=<span class=\"string\">\"controlFlowPointcut\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:advice-ref</span>=<span class=\"string\">\"greetBeforeAdvice\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用了自动代理，直接获取原bean就行</span></span><br><span class=\"line\">Waiter waiter = context.getBean(<span class=\"string\">\"waiterTarget\"</span>, Waiter.class);</span><br><span class=\"line\">waiter.greetTo(<span class=\"string\">\"water\"</span>);</span><br><span class=\"line\">waiter.serveTo(<span class=\"string\">\"water\"</span>);</span><br><span class=\"line\">WaiterDelegate waiterDelegate = <span class=\"keyword\">new</span> WaiterDelegate();</span><br><span class=\"line\">waiterDelegate.setWaiter(waiter);</span><br><span class=\"line\">waiterDelegate.service(<span class=\"string\">\"water\"</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"初看Android","url":"https://threewater.xyz/2019/04/02/first-android/","content":"<p>layout目录下面就是放一些布局的xml文件，他表示一个View对象，这个有点像HTML。</p>\n<p>drawable目录放一些用xml画的图形，线条，颜色，图片等，有点像CSS。</p>\n<p>values目录下面用xml存储了一下布局文件常用的值。</p>\n<p>Activity类：它表示的是一个页面，这个页面的显示的样子需要用到布局文件，同时它也可以为布局文件添加一些事件，跳转什么的，类似于Javascript。</p>\n<p>R: 这个类，掌管所有资源，Activity需要什么资源直接问他。</p>\n<p>AndroidManifest.xml：所有的Activity都要到这里注册，权限也要在这里注册，在这里设置默认启动的Activity。就像Spring的配置文件，Android就从这个配置文件启动。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"装饰者设计模式","url":"https://threewater.xyz/2019/04/02/decorator/","content":"<p>装饰者和具体的组件都继承自组件，使装饰者看起来像组件，装饰者持有具体组件的引用，然后引用具体组件的方法，这样装饰着既可以装饰组件，也可以装饰其它装饰者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decortor1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Component component;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decortor1</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.component = component;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>+component.cost();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decortor2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Component component;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decortor2</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.component = component;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>+component.cost();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decortor3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Component component;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Decortor3</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.component = component;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>+component.cost();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cost</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Component cm = <span class=\"keyword\">new</span> ConcreteComponent();</span><br><span class=\"line\">        cm=<span class=\"keyword\">new</span> Decortor1(cm);</span><br><span class=\"line\">        cm=<span class=\"keyword\">new</span> Decortor2(cm);</span><br><span class=\"line\">        cm=<span class=\"keyword\">new</span> Decortor3(cm);</span><br><span class=\"line\">        System.out.println(cm.cost());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"组合设计模式","url":"https://threewater.xyz/2019/04/01/component/","content":"<p>就是把对象弄成树结构，这棵树的中间节点和叶子节点都是一个类，这样方便操作。这样如果某一个节点处理不了，可以委托给子节点，就像责任链设计模式一样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//组件抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doOperation</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Component component)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Component component)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">getChild</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Component&gt; list;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NodeComponent</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.i=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"node component\"</span>+i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Component component:list)&#123;</span><br><span class=\"line\">            component.doOperation();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">        list.add(component);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getChild</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeafComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LeafComponent</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.i = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"leaf component\"</span>+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(Component component)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getChild</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Component root=<span class=\"keyword\">new</span> NodeComponent(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Component node1=<span class=\"keyword\">new</span> NodeComponent(<span class=\"number\">2</span>);</span><br><span class=\"line\">        Component node2=<span class=\"keyword\">new</span> NodeComponent(<span class=\"number\">3</span>);</span><br><span class=\"line\">        Component node3=<span class=\"keyword\">new</span> NodeComponent(<span class=\"number\">4</span>);</span><br><span class=\"line\">        root.add(node1);</span><br><span class=\"line\">        root.add(node2);</span><br><span class=\"line\">        root.add(node3);</span><br><span class=\"line\">        Component leaf1=<span class=\"keyword\">new</span> LeafComponent(<span class=\"number\">5</span>);</span><br><span class=\"line\">        Component leaf2=<span class=\"keyword\">new</span> LeafComponent(<span class=\"number\">6</span>);</span><br><span class=\"line\">        Component leaf3=<span class=\"keyword\">new</span> LeafComponent(<span class=\"number\">7</span>);</span><br><span class=\"line\">        Component leaf4=<span class=\"keyword\">new</span> LeafComponent(<span class=\"number\">8</span>);</span><br><span class=\"line\">        node1.add(leaf1);</span><br><span class=\"line\">        node1.add(leaf2);</span><br><span class=\"line\">        node2.add(leaf3);</span><br><span class=\"line\">        node3.add(leaf4);</span><br><span class=\"line\">        root.doOperation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"Spring第一天","url":"https://threewater.xyz/2019/04/01/spring-day1/","content":"<p>spring-context 包，有ApplicationContext。spring-bean包有BeanFactory。spring-core 包一个util包。</p>\n<p>BeanFactory面向spring内部，ApplicationContext面向开发者。BeanFactory需要手动注册工厂处理器，而ApplicationContext可以配置。</p>\n<p>Spring的依赖注入的四种方式：</p>\n<ol>\n<li>set方法注入。</li>\n<li>构造函数注入，注意死锁的情况。</li>\n<li>工厂方法注入。</li>\n<li>注解注入，默认使用byType方式。</li>\n</ol>\n<p>ApplicationContext初始化的时候可以指定其父容器。</p>\n<p>内部bean，不提供外部使用默认scope为prototype。</p>\n<p>通过&lt;null/&gt;标签注入null值。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Foo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"foo1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"111\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"foo2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"111\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"foo3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">null</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bar\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Bar\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"foo\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>集合类型得注入，子bean的属性合并到父bean中：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Foo\"</span> <span class=\"attr\">abstract</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"foo1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"111\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"foo2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"111\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"foo3\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"childFoo\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"foo\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span> <span class=\"attr\">merge</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>qwe<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>singleton的bean想要里面的某个属性是prototype的，也就是每次获取singleton的某个属性他都是新new出来的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Bar\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Foo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:foo1</span>=<span class=\"string\">\"111\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:foo2</span>=<span class=\"string\">\"111\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:foo3</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">lookup-method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"getBar\"</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"bar\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>手动实现实现FactoryBean实现注入，一般适用于Bean的创建比较复杂的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">Foo</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String foo1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> foo2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> foo3;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bar bar;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBar</span><span class=\"params\">(Bar bar)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bar = bar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setInfo</span><span class=\"params\">(String args)</span></span>&#123;</span><br><span class=\"line\">        String[] split = args.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        foo1=split[<span class=\"number\">0</span>];</span><br><span class=\"line\">        foo2=Integer.parseInt(split[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        foo3=Boolean.parseBoolean(split[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Foo <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Foo(foo1,foo2,foo3,bar);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Foo.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Bar\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"foo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.FooFactoryBean\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:info</span>=<span class=\"string\">\"111,111,true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:bar-ref</span>=<span class=\"string\">\"bar\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>说明spring的属性注入方式是按setXXX来判断的，而不管它到底有没有对应的属性，而且进行属性设置的时候只能有一个参数。</p>\n<p>如果注解标记集合元素时，spring会把容器中所有符合集合泛型的bean注入到集合中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个顺序可以决定注入集合的顺序</span></span><br><span class=\"line\"><span class=\"meta\">@Order</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Bar&gt; list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.threewater\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bar\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Bar\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bar1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Bar\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bar2\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.threewater.Bar\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"对XML的一点理解","url":"https://threewater.xyz/2019/04/01/xml/","content":"<p>这篇博客写的不错<a href=\"https://blog.csdn.net/lengxiao1993/article/details/77914155\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lengxiao1993/article/details/77914155</a></p>\n<p>这里总结一下xml，如有理解不对的地方，还望指正。</p>\n<p>XML分为标签定义，标签使用，标签解析。</p>\n<p>如果世界上有这么多标签，如何保证自己定义的标签不会和别人定义的标签冲突，一种是在定义时保证标签全球唯一，比如：URL+标签名。但是这种方式在定义和使用时标签都会很长。另一种是在使用时使用命名空间，定义的时候随便定义，使用的时候，加上URL，如果在使用的时候直接使用URL，那么也会很长，所以用别名表示这个命名空间。由于我们自己定义标签的情况很少，一般都是使用大厂的标签，所以我们在使用不同大厂的标签时，为大厂的命名空间加上一个别名就行了。</p>\n<p>以上只是解决了在写xml时重复标签表示的问题，还有重复标签解析的问题，所以我们还需要加载一份解析文件。而这一功能是共性功能，于是W3C为我们定义了规范，也就是xsi。</p>\n<p>我们来具体看一下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>xmlns默认命名空间，表示我们写的这个xml大部分用的是这个网址的。</p>\n<p>xmlns:xsi 与xsi:schemaLocation 用来进行命名空间与解析文件的关联。</p>\n<h1 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h1><p>一般的。框架或者jar包都会自带一个xsd文件。所以我们指定xsi:schemaLocation 就可以用，但是有些jar包不会带这个xsd文件，比如<code>ehcache</code>，我们需要手动下载，不然，idea就会报错或者没有提示，一般我们通过idea的自动补全功能可以直接下载，但是idea默认会下载到idea的目录下，没有放到我们项目的根路径下，如果这项目部署到服务器上，解析这个xml的时候还是会报错，所以最好自己下载下来，放到classpath下。</p>\n<p>采用这种xsd的xml很严格，连标签的顺序都有要求。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"Bridge设计模式","url":"https://threewater.xyz/2019/03/28/pridge/","content":"<p>TV 和 RemoteControl 之间 通过接口和抽象类耦合，就是不同实现类的桥梁。这样TV 和 RemoteControl 可以独立实现，互不影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> TV tv;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RemoteControl</span><span class=\"params\">(TV tv)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tv=tv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRemoteControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">RemoteControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyRemoteControl</span><span class=\"params\">(TV tv)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(tv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my remote control 1\"</span>);</span><br><span class=\"line\">        tv.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my remote control 1\"</span>);</span><br><span class=\"line\">        tv.on();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TCL</span> <span class=\"keyword\">implements</span> <span class=\"title\">TV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"TCL is on\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"TCL is off\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TCL tcl = <span class=\"keyword\">new</span> TCL();</span><br><span class=\"line\">        RemoteControl remoteControl=<span class=\"keyword\">new</span> MyRemoteControl(tcl);</span><br><span class=\"line\">        remoteControl.on();</span><br><span class=\"line\">        remoteControl.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my remote control 1</span><br><span class=\"line\">TCL is on</span><br><span class=\"line\">my remote control 1</span><br><span class=\"line\">TCL is off</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"适配器设计模式","url":"https://threewater.xyz/2019/03/27/adapter/","content":"<p>适配器就是把一种对象转成另一种对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//苹果的lighting接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Lighting</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">iPhoneCharge</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//安卓的usb接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Usb</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">usbCharge</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IphoneX</span> <span class=\"keyword\">implements</span> <span class=\"title\">Lighting</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">iPhoneCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"iphone is charging\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Usb</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lighting lighting;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Adapter</span><span class=\"params\">(Lighting lighting)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lighting=lighting;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">usbCharge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lighting.iPhoneCharge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//插座 只有usb孔</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Socket</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">charge</span><span class=\"params\">(Usb usb)</span></span>&#123;</span><br><span class=\"line\">        usb.usbCharge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        IphoneX iphoneX = <span class=\"keyword\">new</span> IphoneX();</span><br><span class=\"line\">        Adapter USBadapter = <span class=\"keyword\">new</span> Adapter(iphoneX);</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">new</span> Socket();</span><br><span class=\"line\">        socket.charge(USBadapter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"空对象设计模式","url":"https://threewater.xyz/2019/03/26/null/","content":"<p>我们希望不进行null对象的判断，而是该返回什么对象就返回什么对象，只是如果本来本来是要返回null的这个我们使用空对象来代替。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractOperation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteOperation</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractOperation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"real operation\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NullOperation</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractOperation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//empty</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AbstractOperation <span class=\"title\">getAnObject</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NullOperation();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteOperation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不用进行null判断</span></span><br><span class=\"line\">        AbstractOperation operation = getAnObject(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        operation.doSomething();</span><br><span class=\"line\">        AbstractOperation operation1 = getAnObject(<span class=\"number\">1</span>);</span><br><span class=\"line\">        operation.doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"访问者设计模式","url":"https://threewater.xyz/2019/03/25/visitor/","content":"<p>每一个元素都应该有一个接收访问者的方法，用来给访问者访问自己。</p>\n<p>一个对象可能有很多元素组成，元素又由元素组成，这个对象可以接收一个访问者对象，来对本对象进行访问。</p>\n<p>这样由于访问者是独立于该对象存在的，所以他有自由权来决定以何种方式访问。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Element</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accepte</span><span class=\"params\">(Visitor visitor)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Customer customer)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Order order)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Item item)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerGroup</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Customer&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCustomer</span><span class=\"params\">(Customer customer)</span></span>&#123;</span><br><span class=\"line\">        list.add(customer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">acceptVisitor</span><span class=\"params\">(Visitor visitor)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Customer customer:list)&#123;</span><br><span class=\"line\">            customer.accepte(visitor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span> <span class=\"keyword\">implements</span> <span class=\"title\">Element</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Item</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accepte</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;</span><br><span class=\"line\">        visitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> <span class=\"keyword\">implements</span> <span class=\"title\">Element</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Order</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Item&gt; items=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accepte</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;</span><br><span class=\"line\">        visitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Item item:items)&#123;</span><br><span class=\"line\">            item.accepte(visitor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addItem</span><span class=\"params\">(Item item)</span></span>&#123;</span><br><span class=\"line\">        items.add(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> <span class=\"keyword\">implements</span> <span class=\"title\">Element</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    List&lt;Order&gt; orders=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accepte</span><span class=\"params\">(Visitor visitor)</span> </span>&#123;</span><br><span class=\"line\">        visitor.visit(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Order order:orders)&#123;</span><br><span class=\"line\">            order.accepte(visitor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addOrder</span><span class=\"params\">(Order order)</span></span>&#123;</span><br><span class=\"line\">        orders.add(order);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Visitor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> customerNum;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> orderNum;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> itemNum;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Customer customer)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(customer.getName());</span><br><span class=\"line\">        customerNum++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(order.getName());</span><br><span class=\"line\">        orderNum++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">visit</span><span class=\"params\">(Item item)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(item.getName());</span><br><span class=\"line\">        itemNum++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showRes</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"customerNum: \"</span>+customerNum);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"orderNum: \"</span>+orderNum);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"itemNum: \"</span>+itemNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> clss Client&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        CustomerGroup customerGroup = <span class=\"keyword\">new</span> CustomerGroup();</span><br><span class=\"line\">        Item i1 = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"i1\"</span>);</span><br><span class=\"line\">        Item i2 = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"i2\"</span>);</span><br><span class=\"line\">        Item i3 = <span class=\"keyword\">new</span> Item(<span class=\"string\">\"i3\"</span>);</span><br><span class=\"line\">        Order order1=<span class=\"keyword\">new</span> Order(<span class=\"string\">\"o1\"</span>);</span><br><span class=\"line\">        Order order2=<span class=\"keyword\">new</span> Order(<span class=\"string\">\"o2\"</span>);</span><br><span class=\"line\">        Order order3=<span class=\"keyword\">new</span> Order(<span class=\"string\">\"o3\"</span>);</span><br><span class=\"line\">        Customer c1 = <span class=\"keyword\">new</span> Customer(<span class=\"string\">\"c1\"</span>);</span><br><span class=\"line\">        Customer c2 = <span class=\"keyword\">new</span> Customer(<span class=\"string\">\"c3\"</span>);</span><br><span class=\"line\">        Customer c3 = <span class=\"keyword\">new</span> Customer(<span class=\"string\">\"c3\"</span>);</span><br><span class=\"line\">        order1.addItem(i1);</span><br><span class=\"line\">        order2.addItem(i2);</span><br><span class=\"line\">        order3.addItem(i3);</span><br><span class=\"line\">        c1.addOrder(order1);</span><br><span class=\"line\">        c2.addOrder(order2);</span><br><span class=\"line\">        c3.addOrder(order3);</span><br><span class=\"line\">        customerGroup.addCustomer(c1);</span><br><span class=\"line\">        customerGroup.addCustomer(c2);</span><br><span class=\"line\">        customerGroup.addCustomer(c3);</span><br><span class=\"line\">        ConcreteVisitor concreteVisitor = <span class=\"keyword\">new</span> ConcreteVisitor();</span><br><span class=\"line\">        customerGroup.acceptVisitor(concreteVisitor);</span><br><span class=\"line\">        concreteVisitor.showRes();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1</span><br><span class=\"line\">o1</span><br><span class=\"line\">i1</span><br><span class=\"line\">c3</span><br><span class=\"line\">o2</span><br><span class=\"line\">i2</span><br><span class=\"line\">c3</span><br><span class=\"line\">o3</span><br><span class=\"line\">i3</span><br><span class=\"line\">customerNum: 3</span><br><span class=\"line\">orderNum: 3</span><br><span class=\"line\">itemNum: 3</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"Lambda与函数式接口","url":"https://threewater.xyz/2019/03/25/lambda/","content":"<p>Lambda可以简化代码的编写。Lambda表达式函数式接口有密切的关系。Lambda表达式就是实现函数式接口的简写形式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">File[] files = file.listFiles(<span class=\"keyword\">new</span> FilenameFilter() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File dir, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.endsWith(<span class=\"string\">\".txt\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//由于要实现的接口只有一个方法</span></span><br><span class=\"line\"><span class=\"comment\">//listFiles知道接口类型，所以我们可以省略</span></span><br><span class=\"line\">File[] files1 = file.listFiles((File dir, String names) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> names.endsWith(<span class=\"string\">\".txt\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//由于参数类型我们也知道，所以也可以省略</span></span><br><span class=\"line\">File[] files1 = file.listFiles((dir,names) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> names.endsWith(<span class=\"string\">\".txt\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//当只有一条语句的时候我们也可以省略</span></span><br><span class=\"line\">File[] files1 = file.listFiles((dir,names) -&gt; names.endsWith(<span class=\"string\">\".txt\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//虽然以上写法更简洁，我们可以更专注逻辑本身，虽然程序知道这些信息，但是我们自己却看不到。</span></span><br></pre></td></tr></table></figure>\n\n<p>Lambda 与匿名内部类有很多相似的地方。他们都可以访问局部变量，要求他们是final的，不能重新赋值，如果硬是要赋值，必须把局部变量转成数组1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String b=<span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">        File[] files1 = file.listFiles((File dir, String names) -&gt; b.endsWith(<span class=\"string\">\".txt\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ExecutorService executor=Executors.newFixedThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        executor.submit(() -&gt; &#123;</span><br><span class=\"line\">            a=<span class=\"string\">\"qwe\"</span>;</span><br><span class=\"line\">            c=<span class=\"string\">\"qwe\"</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lambda也可以访问成员变量，不要求他们是final的，可以修改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String c=<span class=\"string\">\"aa\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String d=<span class=\"string\">\"aaa\"</span>;</span><br><span class=\"line\">        ExecutorService executor=Executors.newFixedThreadPool(<span class=\"number\">1</span>);</span><br><span class=\"line\">        executor.submit(() -&gt; &#123;</span><br><span class=\"line\">            a=<span class=\"string\">\"qwe\"</span>;</span><br><span class=\"line\">            c=<span class=\"string\">\"qwe\"</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lambda的类型就是函数式接口，就是我们可以用函数式接口引用Lambda表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FileFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File pathname)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FileFilter fileFilter2=<span class=\"keyword\">new</span> FileFilter() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File pathname)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pathname.getName().endsWith(<span class=\"string\">\".txt\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">FileFilter fileFilter1=path-&gt; path.getName().endsWith(<span class=\"string\">\".txt\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>方法引用，对于Lambda我们可以用方法引用进一步进行简化。方法引用也可以调用构造方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">FileFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File pathname)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">FileFilter fileFilter4=<span class=\"keyword\">new</span> FileFilter() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> file.isFile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">FileFilter fileFilter4= file1 -&gt; file1.isFile();</span><br><span class=\"line\">FileFilter fileFilter2= File::isFile;</span><br></pre></td></tr></table></figure>\n\n<p>对于FileFilter不是泛型的，有很多和他差不多的函数式接口，他们是泛型的，它更通用，用于代码传递。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Function</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//于是对于文件过滤器我们也可以这样写</span></span><br><span class=\"line\">Function&lt;File,Boolean&gt; fileFilter5=(File file1) -&gt; file1.isFile();</span><br><span class=\"line\">Function&lt;File,Boolean&gt; fileFilter6=File::isFile;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"正则表达式基础","url":"https://threewater.xyz/2019/03/24/regular-expression/","content":"<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><h2 id=\"单个字符\"><a href=\"#单个字符\" class=\"headerlink\" title=\"单个字符\"></a>单个字符</h2><ol>\n<li>普通字符：1，2，0，水 ，z，A等</li>\n<li>特殊字符：一般以\\开头如：\\n，\\t 等</li>\n<li>特殊字符和普通字符，都可以用八进制和十六进制表示，不过一般用的少</li>\n<li>\\ 本身，如果要表示它，必须用两个：\\</li>\n<li>元字符：有特殊意义的字符，如：<code>.</code> <code>*</code> <code>?</code> <code>+</code> 要表示这些字符本身，必须加上\\</li>\n</ol>\n<p>. 号可以匹配除换行符以外的任意字符，如果在单行匹配模式下，他也可以匹配换行符。<br>指定单行匹配模式。</p>\n<ol>\n<li>在正则表达式中指定：（？s)a.b </li>\n<li>在Java Api 中指定Pattern.DOTALL </li>\n</ol>\n<h2 id=\"字符组\"><a href=\"#字符组\" class=\"headerlink\" title=\"字符组\"></a>字符组</h2><p>字符组是用 [] 括起来的字符：如：[123] ，[0-9] ，[0-9a-z] 。排除0-9之间的字符[^0-9]。在字符组中 <code>.</code> 和<code>*</code> 就表示它本身。<br>有一些预定义的字符组：</p>\n<ol>\n<li>\\d =[0-9] 与之对应的非为 \\D</li>\n<li>\\w = [0-9a-z_A-Z] \\W</li>\n<li>\\s = [\\t\\n\\f\\r] \\S</li>\n</ol>\n<h2 id=\"量词\"><a href=\"#量词\" class=\"headerlink\" title=\"量词\"></a>量词</h2><p>量词是指出现指定次数的字符组</p>\n<ol>\n<li><ul>\n<li>：表示前面的字符可以一次或者多次出现 ab{1,}</li>\n</ul>\n</li>\n<li><ul>\n<li>：前面字符0次或者多次出现 ab{0,}</li>\n</ul>\n</li>\n<li>？ ：前面的字符出现一次或者零次 ab{0,1}</li>\n<li>ab{0，10} 出现0次到10次，ab{3}，必须出现三次</li>\n</ol>\n<p>量词默认匹配方式贪婪的，碰到可能结束的地方不会提前结束，会一直匹配到最后一个<br>如果想要让他变的懒惰可以在后面加上？ 如：abccccb 对于a.<em>?b ， 他有两次匹配。但对于 a.</em>b 它只有一次匹配</p>\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><p>分组就是不可分割的组如：（ab）表示一组 （ab|234|er) 表示匹配其中的一组。</p>\n<h2 id=\"特殊边界匹配\"><a href=\"#特殊边界匹配\" class=\"headerlink\" title=\"特殊边界匹配\"></a>特殊边界匹配</h2><ol>\n<li>^ 匹配字符串的开始，如^ab 表示字符串必须以ab开始</li>\n<li>$表示字符串必须以什么结束</li>\n<li>以上两种默认都是单行匹配模式，也就是只匹配一行。可以指定其为多行匹配模式，这样对于多行他就会有多个结果匹配，（?m)ab$ 可以指定多行匹配模式或者使用Pattern.MULTILINE。</li>\n<li>\\A 不管什么模式，匹配的总是整个字符串的开始边界。</li>\n<li>\\Z 和 \\z 不管什么模式，匹配的是整个字符串的结束边界，而\\Z 匹配的是换行符之前的边界，而\\z 匹配的总是结束边界。如：对于ab\\nab   ，ab\\Z 和ab \\z 都会匹配，对于ab\\nab\\n ， ab\\z 不会匹配。</li>\n<li>\\b 表示单词匹配， 如 我\\b 可以匹配：<code>它 我 它</code>，不能匹配 <code>是我是</code></li>\n</ol>\n<h2 id=\"环视边界匹配\"><a href=\"#环视边界匹配\" class=\"headerlink\" title=\"环视边界匹配\"></a>环视边界匹配</h2><ol>\n<li>(?….) 右边的字符串能匹配指定的表达式，非是 (?!…)</li>\n<li>(?&lt;=…) 左边的字符串匹配指定的表达式，非是(?!…)</li>\n</ol>\n<h2 id=\"把所有字符都视为普通字符\"><a href=\"#把所有字符都视为普通字符\" class=\"headerlink\" title=\"把所有字符都视为普通字符\"></a>把所有字符都视为普通字符</h2><p>在\\Q……\\E 之间的字符都会视为不同字符</p>\n<h2 id=\"忽略大小写\"><a href=\"#忽略大小写\" class=\"headerlink\" title=\"忽略大小写\"></a>忽略大小写</h2><p>(?!) 或者 Pattern.CASE_INSENSITIVE</p>\n<p>多个模式使用 | 连接</p>\n<h1 id=\"Java-API\"><a href=\"#Java-API\" class=\"headerlink\" title=\"Java API\"></a>Java API</h1><h2 id=\"邮件编码\"><a href=\"#邮件编码\" class=\"headerlink\" title=\"邮件编码\"></a>邮件编码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZIP</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pattern compile = Pattern.compile(<span class=\"string\">\"(?&lt;![0-9])[0-9]&#123;6&#125;(?![0-9])\"</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isZipCode</span><span class=\"params\">(String text)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> compile.matcher(text).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">findZipCode</span><span class=\"params\">(String text)</span></span>&#123;</span><br><span class=\"line\">        Matcher matcher = compile.matcher(text);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (matcher.find())&#123;</span><br><span class=\"line\">            System.out.println(matcher.group());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"电话号码\"><a href=\"#电话号码\" class=\"headerlink\" title=\"电话号码\"></a>电话号码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneNumber</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pattern pattern=Pattern.compile(<span class=\"string\">\"(?&lt;![0-9])(0|\\\\+86|0086\\\\s?)?1[3-8][0-9]-?[0-9]&#123;4&#125;-?[0-9]&#123;4&#125;(?![0-9])&#125;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPhoneNumber</span><span class=\"params\">(String text)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pattern.matcher(text).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"maven的基本使用","url":"https://threewater.xyz/2019/03/17/maven/","content":"<p>项目1的pom</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 域名倒叙+项目名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.imooc.maven01<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 项目名-模块名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven01-model<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 包名一般为：域名倒叙+项目名+模块名 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>mvn package：会把项目打包放到target目录下</li>\n<li>mvn clean：会清除target目录</li>\n<li>mvn install：会把当前项目打包发到本地仓库</li>\n</ol>\n<p>项目2中导入项目1依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.imooc.maven01<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven01-model<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>会有很多的第三方jar包下到你的本地仓库，为了避免冲突，使用域名的方法来命名。</p>\n<p>项目1在本地仓库的路径为 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.m2\\repository\\com\\imooc\\maven01\\maven01-model\\1.0-SNAPSHOT\\jar包</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，他是以groupid+artifactid+version来放放jar包的。</p>\n<p>在maven项目的main/java目录下创建的目录，compile后会生成到classes文件夹。package对classes进行打包？。</p>\n<p>install把打包的文件存入本地仓库?。</p>\n<p>maven之所以有自己标准的目录结构是因为，不符合目录结构的文件会被忽略。</p>\n<p>那么如果不同jar包下含有相同的类以及含有相同的包怎么办呢？我也不知道，所以最好域名来定义包名。</p>\n<p>mvn archetype:generate 可以创建maven标准骨架。</p>\n<h2 id=\"在package执行时对源码进行打包\"><a href=\"#在package执行时对源码进行打包\" class=\"headerlink\" title=\"在package执行时对源码进行打包\"></a>在package执行时对源码进行打包</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;pluginManagement&gt;&amp;lt;!&amp;ndash; lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) &amp;ndash;&amp;gt;--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>jar-no-fork<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;/pluginManagement&gt;--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开发环境和生产环境的区分\"><a href=\"#开发环境和生产环境的区分\" class=\"headerlink\" title=\"开发环境和生产环境的区分\"></a>开发环境和生产环境的区分</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 先定义两个profiles --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">env</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">env</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>prod<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">env</span>&gt;</span>prod<span class=\"tag\">&lt;/<span class=\"name\">env</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--指定map映射器，根据环境变量读取配置文件，配置文件中所有的值都会放入map中--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>src/main/resources/config/db-$&#123;env&#125;.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--加载所有资源文件，不使用map映射，由于spring的配置文件也使用了$&#123;&#125;表达式--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 为了不与maven的冲突，这里filtering配置为false --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- 加载所有文件 --&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--加载数据库配置文件，使用map映射--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>config/db.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#db.properties 所有值都会被maven动态填充</span><br><span class=\"line\">jdbc.driverClass=$&#123;jdbc.driverClass&#125;</span><br><span class=\"line\">jdbc.url=$&#123;jdbc.url&#125;</span><br><span class=\"line\">jdbc.username=$&#123;jdbc.username&#125;</span><br><span class=\"line\">jdbc.password=$&#123;jdbc.password&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#db-dev.properties 所有值会被映射到maven的map中</span><br><span class=\"line\">jdbc.driverClass=com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql:///open-api?serverTimezone=Asia/Shanghai</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=root</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"服务器Ubuntu16.04 安装 Oracle Jdk8","url":"https://threewater.xyz/2019/03/17/install-jdk8/","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install software-properties-common</span><br><span class=\"line\">sudo add-apt-repository ppa:webupd8team/java</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install oracle-java8-installer</span><br><span class=\"line\">sudo apt install oracle-java8-set-<span class=\"keyword\">default</span></span><br><span class=\"line\">javac -version</span><br></pre></td></tr></table></figure>\n\n","categories":["Java","服务器"],"tags":["学习"]},{"title":"ClassLoader基础","url":"https://threewater.xyz/2019/03/15/ClassLoader/","content":"<p>一般一个程序有三个ClassLoader，他们分别分别管理自己的Class对象，而且他们大致呈父子关系，这种父子关系不是继承关系，是指，如果要加载类，先交给父类加载，如果父类加载不了，再由子类加载。当然我们也可以自定义加载器。我们来看一下结构。</p>\n<img src=\"/2019/03/15/ClassLoader/classloader.svg\">\n\n<p>日常用的类是由Boostrap加载的，扩展类库有Extension加载，Application加载我们自己写的类，以上三个类加载器我们是不能new的。MyClassLoader1和2是我们直接写的ClassLoader，一般我们自定义的classloader是实现<code>findClass()</code>方法，所以如果要加载类，还是会从先从父类加载。</p>\n<p>类加载之后变成了Class对象，那么既然是对象，就有可能创建多个实例，如果我们用MyClassLoader1的<code>loadClass()</code>加载了ClassA，他就变成了ClassA对象，那么我们想要创建另一个ClassA对象该怎么办呢？你可能会说我们重新调用<code>loadClass()</code>不久可以了吗？，这是不行的，因为他会先检查这个ClassA存不存在，而这里是存在的。如果我们创建两个ClassA对象。那么那么再创建一个MyClassLoader1或者用MyClassLoader2加载，也就是说，每个类加载器对象管理的类对象是不同的。他们互不影响。</p>\n<p>那么如果有Class的字节码改变了，我们可以创建一个新的类加载器对象来加载更改后的字节码对象。</p>\n<p>我觉得类加载器是动态代理的基础，我们可以在运行时生成代理类的字节码，只要这个字节码符合java的规范，他就可以扔给加载器加载，创建类对象，然后通过反射new出来。</p>\n<h2 id=\"类查看加载自己的ClassLoader\"><a href=\"#类查看加载自己的ClassLoader\" class=\"headerlink\" title=\"类查看加载自己的ClassLoader\"></a>类查看加载自己的ClassLoader</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassLoaderDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ClassLoader loader=ClassLoaderDemo.class.getClassLoader();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loader!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(loader.getClass().getName());</span><br><span class=\"line\">            loader=loader.getParent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(String.class.getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载不同的class对象\"><a href=\"#加载不同的class对象\" class=\"headerlink\" title=\"加载不同的class对象\"></a>加载不同的class对象</h2><p>那么是不是只要创建两个classLoader就可以创建两个class对象呢？不是的，尽管我们我们有两个classloader，但是他可能父类AppClassLoader加载完了，所以我们必须把class文件放到AppClassLoader找不到的地方。然后手动加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        MyClassLoader loader1 = <span class=\"keyword\">new</span> MyClassLoader();</span><br><span class=\"line\">        loader1.loadClass(<span class=\"string\">\"java.lang.String\"</span>);</span><br><span class=\"line\">        Class&lt;?&gt; Test1 = loader1.loadClass(<span class=\"string\">\"com.chapter24.Test\"</span>);</span><br><span class=\"line\">        MyClassLoader loader2=<span class=\"keyword\">new</span> MyClassLoader();</span><br><span class=\"line\">        Class&lt;?&gt; Test2 = loader2.loadClass(<span class=\"string\">\"com.chapter24.Test\"</span>);</span><br><span class=\"line\">        System.out.println(Test1.getClassLoader().getClass().getName());</span><br><span class=\"line\">        System.out.println(Test2.getClassLoader().getClass().getName());</span><br><span class=\"line\">        System.out.println(loader1==loader2);</span><br><span class=\"line\">        System.out.println(Test1==Test2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\">sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>果然，他被父类加载了。</p>\n<p>如果想要父类不加载，那么就要让父类找不到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BASE_DIR=<span class=\"string\">\"C:/Users/water/IdeaProjects/the logic of java programming/target/classes/\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name)&#123;</span><br><span class=\"line\">        name=name+<span class=\"string\">\".chapter24.Test\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = getClassByte();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> defineClass(name,bytes,<span class=\"number\">0</span>,bytes.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        String property = System.getProperty(<span class=\"string\">\"user.dir\"</span>);</span><br><span class=\"line\">        System.out.println(property);</span><br><span class=\"line\">        MyClassLoader loader1 = <span class=\"keyword\">new</span> MyClassLoader();</span><br><span class=\"line\">        <span class=\"comment\">//让父类找不到</span></span><br><span class=\"line\">        Class&lt;?&gt; Test1 = loader1.loadClass(<span class=\"string\">\"com\"</span>);</span><br><span class=\"line\">        MyClassLoader loader2=<span class=\"keyword\">new</span> MyClassLoader();</span><br><span class=\"line\">        Class&lt;?&gt; Test2 = loader2.loadClass(<span class=\"string\">\"com\"</span>);</span><br><span class=\"line\">        System.out.println(Test1.getClassLoader().getClass().getName());</span><br><span class=\"line\">        System.out.println(Test2.getClassLoader().getClass().getName());</span><br><span class=\"line\">        System.out.println(loader1==loader2);</span><br><span class=\"line\">        System.out.println(Test1==Test2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] getClassByte()&#123;</span><br><span class=\"line\">        String filename=BASE_DIR+<span class=\"string\">\"com/chapter24/Test.class\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            FileInputStream fin = <span class=\"keyword\">new</span> FileInputStream(filename);</span><br><span class=\"line\">            ByteArrayOutputStream bout = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] tmp=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> r;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((r=fin.read(tmp))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                bout.write(tmp,<span class=\"number\">0</span>,r);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bout.toByteArray();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.chapter24.MyClassLoader</span><br><span class=\"line\">com.chapter24.MyClassLoader</span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"策略设计模式","url":"https://threewater.xyz/2019/03/15/strategy/","content":"<p>策略设计模式与状态设计模式相似，但是状态设计模式是状态来改变状态，是被动的改变。而策略设计模式是主动的改变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wangwang</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BigDog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wangwang</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wang wang\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallDog</span> <span class=\"keyword\">implements</span> <span class=\"title\">Dog</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">wangwang</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"wuwu\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDog</span> </span>&#123;</span><br><span class=\"line\">    Dog dog;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDog</span><span class=\"params\">(Dog dog)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dog=dog;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        dog.wangwang();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyDog myDog = <span class=\"keyword\">new</span> MyDog();</span><br><span class=\"line\">        myDog.setDog(<span class=\"keyword\">new</span> BigDog());</span><br><span class=\"line\">        myDog.say();</span><br><span class=\"line\">        myDog.setDog(<span class=\"keyword\">new</span> SmallDog());</span><br><span class=\"line\">        myDog.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"状态设计模式","url":"https://threewater.xyz/2019/03/15/state/","content":"<p>一个对象会有很多种状态，虽然对象的操作是一样的，但是在不同状态下的操作结果是不同的，对象可能因为某些操作从一种状态转变为另外一种状态。对象应该保存多种状态，但是他有一个表示当前状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//投一分钱</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertQuarter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//弹出一分钱</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ejectQuarter</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//弹出糖果</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">turnCrank</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HasQuarterState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> GumballMachine machine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HasQuarterState</span><span class=\"params\">(GumballMachine machine)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.machine=machine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertQuarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"dont insert quarter second\"</span>);</span><br><span class=\"line\">        machine.setCurrentState(machine.getSoldState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ejectQuarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"please wait\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnCrank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"please wait\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoQuarterState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> GumballMachine machine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NoQuarterState</span><span class=\"params\">(GumballMachine machine)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.machine=machine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertQuarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"you have insert a quarter\"</span>);</span><br><span class=\"line\">        machine.setCurrentState(machine.getSoldState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ejectQuarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"you dont insert a quarter\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnCrank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"no quarter\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoldOutState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> GumballMachine machine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SoldOutState</span><span class=\"params\">(GumballMachine machine)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.machine=machine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertQuarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sorry the gumball sold out\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ejectQuarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"please insert quarter\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnCrank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"sorry the gumball sold out\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoldState</span> <span class=\"keyword\">implements</span> <span class=\"title\">State</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> GumballMachine machine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SoldState</span><span class=\"params\">(GumballMachine machine)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.machine=machine;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertQuarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"dont insert quarter twice\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ejectQuarter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"eject quarter\"</span>);</span><br><span class=\"line\">        machine.setCurrentState(machine.getNoQuarterState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnCrank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(machine.realseBall())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"here. give you a gumball\"</span>);</span><br><span class=\"line\">            machine.setCurrentState(machine.getNoQuarterState());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"sorry the gumball sold out\"</span>);</span><br><span class=\"line\">            machine.setCurrentState(machine.getSoldOutState());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;\t</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GumballMachine</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State hasQuarterState;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State noQuarterState;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State soldOutState;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State soldState;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> State currentState;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GumballMachine</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count=count;</span><br><span class=\"line\">        hasQuarterState=<span class=\"keyword\">new</span> HasQuarterState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        noQuarterState=<span class=\"keyword\">new</span> NoQuarterState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        soldOutState=<span class=\"keyword\">new</span> SoldOutState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        soldState=<span class=\"keyword\">new</span> SoldState(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        currentState=count&gt;<span class=\"number\">0</span>?noQuarterState:soldOutState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getHasQuarterState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hasQuarterState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getNoQuarterState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> noQuarterState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getSoldOutState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> soldOutState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> State <span class=\"title\">getSoldState</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> soldState;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCurrentState</span><span class=\"params\">(State state)</span></span>&#123;</span><br><span class=\"line\">        currentState=state;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">realseBall</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp=count;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count&gt;<span class=\"number\">0</span>) count--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmp&gt;<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertQuarter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        currentState.insertQuarter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ejectQuarter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        currentState.ejectQuarter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">turnCrank</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        currentState.turnCrank();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        GumballMachine machine = <span class=\"keyword\">new</span> GumballMachine(<span class=\"number\">4</span>);</span><br><span class=\"line\">        machine.ejectQuarter();</span><br><span class=\"line\">        machine.insertQuarter();</span><br><span class=\"line\">        machine.ejectQuarter();</span><br><span class=\"line\">        machine.turnCrank();</span><br><span class=\"line\">        machine.ejectQuarter();</span><br><span class=\"line\">        machine.insertQuarter();</span><br><span class=\"line\">        machine.turnCrank();</span><br><span class=\"line\">        machine.turnCrank();</span><br><span class=\"line\">        machine.insertQuarter();</span><br><span class=\"line\">        machine.turnCrank();</span><br><span class=\"line\">        machine.ejectQuarter();</span><br><span class=\"line\">        machine.insertQuarter();</span><br><span class=\"line\">        machine.turnCrank();</span><br><span class=\"line\">        machine.insertQuarter();</span><br><span class=\"line\">        machine.turnCrank();</span><br><span class=\"line\">        machine.turnCrank();</span><br><span class=\"line\">        machine.insertQuarter();</span><br><span class=\"line\">        machine.turnCrank();</span><br><span class=\"line\">        machine.ejectQuarter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">you dont insert a quarter</span><br><span class=\"line\">you have insert a quarter</span><br><span class=\"line\">eject quarter</span><br><span class=\"line\">no quarter</span><br><span class=\"line\">you dont insert a quarter</span><br><span class=\"line\">you have insert a quarter</span><br><span class=\"line\">here. give you a gumball</span><br><span class=\"line\">no quarter</span><br><span class=\"line\">you have insert a quarter</span><br><span class=\"line\">here. give you a gumball</span><br><span class=\"line\">you dont insert a quarter</span><br><span class=\"line\">you have insert a quarter</span><br><span class=\"line\">here. give you a gumball</span><br><span class=\"line\">you have insert a quarter</span><br><span class=\"line\">here. give you a gumball</span><br><span class=\"line\">no quarter</span><br><span class=\"line\">you have insert a quarter</span><br><span class=\"line\">sorry the gumball sold out</span><br><span class=\"line\">please insert quarter</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"观察者设计模式","url":"https://threewater.xyz/2019/03/15/obsrever/","content":"<p>主题持有观察者的引用，一旦主题发生更新，立马通知观察者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer observer)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer observer)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">notifyObserver</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp,<span class=\"keyword\">float</span> humidity,<span class=\"keyword\">float</span> pressure)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoogleWeather</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temp=temp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity=humidity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pressure=pressure;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"google weather updated\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduWeather</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temp=temp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity=humidity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pressure=pressure;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"baidu weather updated\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaobaoWeather</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temp=temp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity=humidity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pressure=pressure;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"taobao weather updated\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubjectImp</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temp;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SubjectImp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProperties</span><span class=\"params\">(<span class=\"keyword\">float</span> temp,<span class=\"keyword\">float</span> humidity,<span class=\"keyword\">float</span> pressure)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.temp=temp;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.humidity=humidity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pressure=pressure;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer observer)</span> </span>&#123;</span><br><span class=\"line\">        list.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer observer)</span> </span>&#123;</span><br><span class=\"line\">        list.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObserver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Observer observer:list)&#123;</span><br><span class=\"line\">            observer.update(temp,humidity,pressure);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SubjectImp subjectImp = <span class=\"keyword\">new</span> SubjectImp();</span><br><span class=\"line\">        BaiduWeather baiduWeather = <span class=\"keyword\">new</span> BaiduWeather();</span><br><span class=\"line\">        GoogleWeather googleWeather = <span class=\"keyword\">new</span> GoogleWeather();</span><br><span class=\"line\">        TaobaoWeather taobaoWeather = <span class=\"keyword\">new</span> TaobaoWeather();</span><br><span class=\"line\">        subjectImp.registerObserver(baiduWeather);</span><br><span class=\"line\">        subjectImp.registerObserver(googleWeather);</span><br><span class=\"line\">        subjectImp.registerObserver(taobaoWeather);</span><br><span class=\"line\">        subjectImp.setProperties(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">        subjectImp.notifyObserver();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"注解","url":"https://threewater.xyz/2019/03/14/annotation/","content":"<p>通过注解，我们可以在运行时获取信息，我们来通过注解和反射，实现一个简单的DI。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SimpleInject &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceA</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceB</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//依赖注入</span></span><br><span class=\"line\">    <span class=\"meta\">@SimpleInject</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceA serviceA;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(serviceA==<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDI</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getInstance</span><span class=\"params\">(Class&lt;T&gt; cls)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        T instance = cls.newInstance();</span><br><span class=\"line\">        Field[] fields = cls.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Field field:fields)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(field.isAnnotationPresent(SimpleInject.class))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!field.isAccessible()) field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                field.set(instance,getInstance(field.getType()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SimpleDI di = <span class=\"keyword\">new</span> SimpleDI();</span><br><span class=\"line\">        ServiceB b = di.getInstance(ServiceB.class);</span><br><span class=\"line\">        b.useA();<span class=\"comment\">//输出false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注解的属性有其限制\"><a href=\"#注解的属性有其限制\" class=\"headerlink\" title=\"注解的属性有其限制\"></a>注解的属性有其限制</h2><p>1.基本数据类型<br>2.String<br>3.枚举类型<br>4.注解类型<br>5.Class类型<br>6.以上类型的一维数组类型</p>\n","categories":["Java"],"tags":["学习"]},{"title":"代理与AOP和DI","url":"https://threewater.xyz/2019/03/14/proxy/","content":"<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>静态代理，就是代理和原始类实现同一接口，然后代理类含有原始类的引用，重写代理类的方法时在中间加上原始类的方法。这种代理方式，有其局限性：他只能代理一种类，不能代理实现其它接口的类，必须创建两个对象，原始对象和代理对象。</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><h3 id=\"Jdk-提供的代理\"><a href=\"#Jdk-提供的代理\" class=\"headerlink\" title=\"Jdk 提供的代理\"></a>Jdk 提供的代理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDKProxyService</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object object;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JDKProxyService</span><span class=\"params\">(Object realObject)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.object=realObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello before\"</span>);</span><br><span class=\"line\">        Object res = method.invoke(object, args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello after\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        IService realService = <span class=\"keyword\">new</span> RealService();</span><br><span class=\"line\">        InvocationHandler handler=<span class=\"keyword\">new</span> JDKProxyService(realService);</span><br><span class=\"line\">        IService proxy = (IService)Proxy.newProxyInstance(IService.class.getClassLoader(), <span class=\"keyword\">new</span> Class[]&#123;IService.class&#125;, handler);</span><br><span class=\"line\">        proxy.Hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Jdk提供的方法呢，解决了只能代理特定类的问题。但是有以下缺点：1. 代理类必须实现接口，而且也只能代理接口的方法，还是必须创建原始对象和代理对象。这种代理比较神奇的地方在于，它能在运行时创建一个实现特定接口的类！而这个类在运行之前时根本不存在的！而且它必须实现这些接口的所有方法。</p>\n<h3 id=\"第三方类库实现的动态代理\"><a href=\"#第三方类库实现的动态代理\" class=\"headerlink\" title=\"第三方类库实现的动态代理\"></a>第三方类库实现的动态代理</h3><p>cglib这个第三方库也可以实现动态代理，它比官方Jdk更强大，原始类可以不实现接口，也可以创建代理类，也就是相当于它能在运行时创建原始类的父类，同时重写原始类的非final的public方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibProxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealService</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"read hello\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"hello before\"</span>);</span><br><span class=\"line\">            Object res = methodProxy.invokeSuper(o, objects);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"hello last\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getProxy</span><span class=\"params\">(Class&lt;T&gt; cls)</span></span>&#123;</span><br><span class=\"line\">        Enhancer enhancer=<span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(RealService.class);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> SimpleInterceptor());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        CGLibProxy cgLibProxy = <span class=\"keyword\">new</span> CGLibProxy();</span><br><span class=\"line\">        RealService proxy = cgLibProxy.getProxy(RealService.class);</span><br><span class=\"line\">        proxy.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>cglib不用创建原始对象，他是直接对类进行进行扩展的，也就是它新建了一个子类，然后创建这个子类，代理类和原始类呈父子关系。而Jdk是实现和原始类相同的接口，然后内部持有原始类的引用，代理类和原始类呈组合关系。然后创建代理类，代理类和原始类没有父子关系，这也就是为什么Jdk只能用接口来引用了。而cglib可以用原始类来引用。</p>\n<p>以上代理类都是我们手动创建的，我们有了动态代理，我们就可以在不修改原始类的情况下，为类添加功能，让原始类只关注业务逻辑，其它操作我们运行时加入进去，也就为面向切面编程 (AOP) 提供了可能。那用户就不能自己new对象，我们需要注入(DI)用户需要的对象。那你可能会说：我们只要告诉用户让他们不要用new而用我们的<code>getProxy</code>方法不就可以了吗！但这样还是不够优雅，我们希望更优雅一点，我们想声明式编程，就是用户只要说一声我需要一个对象，我们就给他一个代理对象，这个过程我们通过注解实现。Spring框架就是DI和AOP的不错实现。这两个概念是不可分割的，我们想要AOP就必须DI，再配合注解实现声明式编程，让DI更优雅。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用来实现注入(DI)的注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.FIELD)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SimpleInject &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"comment\">//用来实现增强(AOP)的注解</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Aspect &#123;</span><br><span class=\"line\">    Class&lt;?&gt;[] value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//对ServiceA和ServiceB增强</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>(&#123;ServiceA.class, ServiceB.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceLogAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(Object object, Method method,Object[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before \"</span>+method.getDeclaringClass().getSimpleName()+<span class=\"string\">\"::\"</span>+method.getName()+<span class=\"string\">\", args:\"</span>+ Arrays.toString(args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(Object object,Method method,Object[] args,Object res)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after \"</span>+method.getDeclaringClass().getSimpleName()+<span class=\"string\">\"::\"</span>+method.getName()+<span class=\"string\">\", args:\"</span>+Arrays.toString(args)+<span class=\"string\">\", result:\"</span>+res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//对ServiceB的异常进行增强</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span>(ServiceB.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionAspect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">exception</span><span class=\"params\">(Object object, Method method,Object[] args,Throwable e)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"exception happened when calling:\"</span>+method.getName()+<span class=\"string\">\",args:\"</span>+ Arrays.toString(args));</span><br><span class=\"line\">        System.out.println(e.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceA</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloA1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"helloA1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ServiceA_res\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceB</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//进行依赖注入</span></span><br><span class=\"line\">    <span class=\"meta\">@SimpleInject</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceA serviceA;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">useA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(serviceA==<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">errorMethod</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"error in serviceB\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实验</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ServiceA serviceA = SpringContainer.getInstance(ServiceA.class);</span><br><span class=\"line\">        serviceA.helloA1();</span><br><span class=\"line\">        ServiceB serviceB = SpringContainer.getInstance(ServiceB.class);</span><br><span class=\"line\">        serviceB.useA();</span><br><span class=\"line\">        serviceB.errorMethod();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">before ServiceA::helloA1, args:[]</span><br><span class=\"line\">helloA1</span><br><span class=\"line\">after ServiceA::helloA1, args:[], result:ServiceA_res</span><br><span class=\"line\">before ServiceB::useA, args:[]</span><br><span class=\"line\">false</span><br><span class=\"line\">after ServiceB::useA, args:[], result:null</span><br><span class=\"line\">before ServiceB::errorMethod, args:[]</span><br><span class=\"line\">exception happened when calling:errorMethod,args:[]</span><br><span class=\"line\">java.lang.Exception: error in serviceB</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringContainer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//要增强的类的切点方法集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Class&lt;?&gt;,Map&lt;InterceptPoint, List&lt;Method&gt;&gt;&gt; interceptMethodMap=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//这里应该通过扫描包获得</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Class&lt;?&gt;[] aspects=<span class=\"keyword\">new</span> Class[]&#123;ServiceLogAspect.class,ExceptionAspect.class&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//扫描所有切面类</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class&lt;?&gt; cls:aspects)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取切面类的增强方法</span></span><br><span class=\"line\">            Method before = getMethod(<span class=\"string\">\"before\"</span>, cls);</span><br><span class=\"line\">            Method after = getMethod(<span class=\"string\">\"after\"</span>, cls);</span><br><span class=\"line\">            Method exception = getMethod(<span class=\"string\">\"exception\"</span>, cls);</span><br><span class=\"line\">            <span class=\"comment\">//获取要增强的类</span></span><br><span class=\"line\">            Aspect aspect = cls.getAnnotation(Aspect.class);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(Class&lt;?&gt; primitive:aspect.value())&#123;</span><br><span class=\"line\">                initMap(primitive, AFTER,after);</span><br><span class=\"line\">                initMap(primitive,BEFORE,before);</span><br><span class=\"line\">                initMap(primitive, EXCEPTION,exception);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initMap</span><span class=\"params\">(Class&lt;?&gt; primitive,InterceptPoint point,Method method)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(method==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        Map&lt;InterceptPoint, List&lt;Method&gt;&gt; map = interceptMethodMap.computeIfAbsent(primitive, k -&gt; <span class=\"keyword\">new</span> HashMap&lt;&gt;());</span><br><span class=\"line\">        List&lt;Method&gt; list = map.computeIfAbsent(point, k -&gt; <span class=\"keyword\">new</span> ArrayList&lt;&gt;());</span><br><span class=\"line\">        list.add(method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取某个类的方法,没有返回空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Method <span class=\"title\">getMethod</span><span class=\"params\">(String point,Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class=\"line\">        Method method = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"before\"</span>.equals(point)) &#123;</span><br><span class=\"line\">                method = cls.getMethod(point, Object.class, Method.class, Object[].class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"after\"</span>.equals(point)) &#123;</span><br><span class=\"line\">                method=cls.getMethod(point, Object.class, Method.class, Object[].class, Object.class);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                method=cls.getMethod(point, Object.class, Method.class, Object[].class, Throwable.class);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (NoSuchMethodException ignored)&#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增强此类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">createInstance</span><span class=\"params\">(Class&lt;T&gt; cls)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!interceptMethodMap.containsKey(cls)) <span class=\"keyword\">return</span> cls.newInstance();</span><br><span class=\"line\">        Enhancer enhancer=<span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(cls);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> AspectInterceptor());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)enhancer.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">getInstance</span><span class=\"params\">(Class&lt;T&gt; cls)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//看看此类是否需要增强</span></span><br><span class=\"line\">        T instance = createInstance(cls);</span><br><span class=\"line\">        <span class=\"comment\">//增强完之后再进行依赖注入</span></span><br><span class=\"line\">        Field[] fields = cls.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Field field:fields)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(field.isAnnotationPresent(SimpleInject.class))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!field.isAccessible()) field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                field.set(instance,getInstance(field.getType()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从map中取出切点方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;Method&gt; <span class=\"title\">getInterceptMethods</span><span class=\"params\">(Class&lt;?&gt; cls,InterceptPoint point)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;InterceptPoint, List&lt;Method&gt;&gt; map = interceptMethodMap.get(cls);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        List&lt;Method&gt; methods = map.get(point);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(methods==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> methods;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AspectInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            List&lt;Method&gt; methods = getInterceptMethods(o.getClass().getSuperclass(), BEFORE);</span><br><span class=\"line\">            Object res=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Method before : methods) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//静态方法传递null</span></span><br><span class=\"line\">                before.invoke(<span class=\"keyword\">null</span>, o, method, objects);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                 res= methodProxy.invokeSuper(o, objects);</span><br><span class=\"line\">                methods = getInterceptMethods(o.getClass().getSuperclass(), AFTER);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Method before : methods) &#123;</span><br><span class=\"line\">                    before.invoke(<span class=\"keyword\">null</span>, o, method, objects, res);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Throwable e)&#123;</span><br><span class=\"line\">                methods=getInterceptMethods(o.getClass().getSuperclass(), EXCEPTION);</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(Method exception:methods)&#123;</span><br><span class=\"line\">                    exception.invoke(<span class=\"keyword\">null</span>,o,method,objects,e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上我们便简单的实现了AOP和DI。但是他不是单例的，这里ServiceA创建了两次。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"反射基础","url":"https://threewater.xyz/2019/03/13/reflect/","content":"<p>反射会破坏封装。发射可以破坏单例，如果是枚举实现的单例，反射也不能破坏。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> Grade&#123;</span><br><span class=\"line\">        GR,GD</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Constructor&lt;?&gt;[] con = Student.class.getDeclaredConstructors();</span><br><span class=\"line\">        con[<span class=\"number\">0</span>].setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//可以</span></span><br><span class=\"line\">        Student student = (Student)con[<span class=\"number\">0</span>].newInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Constructor&lt;?&gt;[] constructors = Grade.class.getDeclaredConstructors();</span><br><span class=\"line\">        constructors[<span class=\"number\">0</span>].setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//抛出异常，不能通过反射创建枚举对象</span></span><br><span class=\"line\">        Object o = constructors[<span class=\"number\">0</span>].newInstance();</span><br><span class=\"line\">        System.out.println(o.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类型检查和类型转换\"><a href=\"#类型检查和类型转换\" class=\"headerlink\" title=\"类型检查和类型转换\"></a>类型检查和类型转换</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Object list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    Class aClass = Class.forName(<span class=\"string\">\"java.util.ArrayList\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//动态类型检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aClass.isInstance(list))&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"yes\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ArrayList cast = cast(list, ArrayList.class);</span><br><span class=\"line\">    System.out.println(cast==list);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//动态类型转换，类似于强转</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">cast</span><span class=\"params\">(Object obj,Class&lt;T&gt; cls)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls.cast(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态创建数组\"><a href=\"#动态创建数组\" class=\"headerlink\" title=\"动态创建数组\"></a>动态创建数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过Array类动态创建数组</span></span><br><span class=\"line\">Object obj = Array.newInstance(String.class, <span class=\"number\">10</span>);</span><br><span class=\"line\">System.out.println(obj.getClass().getSimpleName());</span><br><span class=\"line\"><span class=\"comment\">//动态设置数组值</span></span><br><span class=\"line\">Array.set(obj,<span class=\"number\">0</span>,<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">System.out.println(((Object[])obj)[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"利用反射实现简单的序列化\"><a href=\"#利用反射实现简单的序列化\" class=\"headerlink\" title=\"利用反射实现简单的序列化\"></a>利用反射实现简单的序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> prise;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isOld;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Book</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> prise, <span class=\"keyword\">boolean</span> isOld)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prise = prise;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isOld = isOld;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//get set ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerializaer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toString</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IllegalAccessException </span>&#123;</span><br><span class=\"line\">        StringBuilder builder=<span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Class&lt;?&gt; aClass = obj.getClass();</span><br><span class=\"line\">        builder.append(aClass.getName()).append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Field field:aClass.getDeclaredFields())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!field.isAccessible()) field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            String name = field.getName();</span><br><span class=\"line\">            Object value = field.get(obj);</span><br><span class=\"line\">            builder.append(name).append(<span class=\"string\">\"=\"</span>).append(value.toString());</span><br><span class=\"line\">            builder.append(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">toObject</span><span class=\"params\">(String str)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String[] split = str.split(<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">        Class&lt;?&gt; aClass = Class.forName(split[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        Object obj = aClass.newInstance();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;split.length;i++)&#123;</span><br><span class=\"line\">            String[] split1 = split[i].split(<span class=\"string\">\"=\"</span>);</span><br><span class=\"line\">            Field field = aClass.getDeclaredField(split1[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!field.isAccessible()) field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            field.set(obj,prase(field.getType(),split1[<span class=\"number\">1</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title\">prase</span><span class=\"params\">(Class type,String str)</span></span>&#123;</span><br><span class=\"line\">        Object obj=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(type==<span class=\"keyword\">int</span>.class)&#123;</span><br><span class=\"line\">            obj=Integer.parseInt(str);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==<span class=\"keyword\">boolean</span>.class)&#123;</span><br><span class=\"line\">            obj=Boolean.parseBoolean(str);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type==String.class)&#123;</span><br><span class=\"line\">            obj=str;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Book java = <span class=\"keyword\">new</span> Book(<span class=\"string\">\"java\"</span>, <span class=\"number\">18</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        String str=toString(java);</span><br><span class=\"line\">        Book prase = (Book)toObject(str);</span><br><span class=\"line\">        System.out.println(prase.getName());</span><br><span class=\"line\">        System.out.println(prase.getPrise());</span><br><span class=\"line\">        System.out.println(prase.isOld());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"备忘录设计模式","url":"https://threewater.xyz/2019/03/12/memento/","content":"<p>备忘录应该有两个接口，一个提供外部的标志接口，这个接口不应该暴露细节，只要表明他是一个备忘录，一个是给原始对象的宽接口，通过这个接口，原始对象可以获得细节，来进行恢复操作。</p>\n<p>由于备份和恢复都涉及具体细节，所以这个操作最好由原始对象来做。</p>\n<p>这里我们以保存和恢复书签为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//提供给书的，用来恢复细节</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookOrigintor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getIndex</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//提供给外部的，只是表明他是书签</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BookCareTaker</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//备忘录</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookOrigintorImp</span> <span class=\"keyword\">implements</span> <span class=\"title\">BookOrigintor</span>,<span class=\"title\">BookCareTaker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BookOrigintorImp</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.index=index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getIndex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\">    <span class=\"comment\">//get set ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        index=(<span class=\"keyword\">int</span>)Math.random()*<span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//涉及具体细节，恢复交给书来做，需要一个书签。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restore</span><span class=\"params\">(BookCareTaker careTaker)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = ((BookOrigintor) careTaker).getIndex();</span><br><span class=\"line\">        setIndex(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BookCareTaker <span class=\"title\">backUp</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BookOrigintorImp(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"线程之间的协作工具类","url":"https://threewater.xyz/2019/03/12/thread-coopeartion/","content":"<p>wait() /notify() 是最基本的，Java为我们提供了一些线程协作的工具类。</p>\n<h2 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h2><p>读写锁，他有两个锁读锁和写锁，和一个等待队列，如果一个线程持有读锁，它可以唤醒队列中前面想要读的线程。所以它的读可以说是并行的。如果一个线程持有写锁，那么任何线程都不能进入。</p>\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><p>信号量，用来限制并发访问数量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Semaphore semaphore = <span class=\"keyword\">new</span> Semaphore(<span class=\"number\">100</span>);<span class=\"comment\">//限制并发访问数为100</span></span><br><span class=\"line\">semaphore.tryAcquire();<span class=\"comment\">//尝试获取许可，消耗1</span></span><br><span class=\"line\">semaphore.release();<span class=\"comment\">//释放许可，增加1</span></span><br><span class=\"line\">semaphore.acquire();<span class=\"comment\">//如果没有获取到，会阻塞</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Semaphore semaphore=<span class=\"keyword\">new</span> Semaphore(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">login</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!semaphore.tryAcquire())</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"server is explode\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logout</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        semaphore.release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h2><p>倒计时门栓</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">100</span>);<span class=\"comment\">//初始计数值</span></span><br><span class=\"line\">latch.await();<span class=\"comment\">//如果计数值不为0，线程等待</span></span><br><span class=\"line\">latch.countDown();<span class=\"comment\">//计数器减1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同时开始\"><a href=\"#同时开始\" class=\"headerlink\" title=\"同时开始\"></a>同时开始</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RacerDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Racer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> CountDownLatch latch;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Racer</span><span class=\"params\">(CountDownLatch latch)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.latch=latch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                latch.await();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"  is start\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        CountDownLatch latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            Racer racer = <span class=\"keyword\">new</span> Racer(latch);</span><br><span class=\"line\">            racer.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        latch.countDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主从协作\"><a href=\"#主从协作\" class=\"headerlink\" title=\"主从协作\"></a>主从协作</h3><p>主线程必须等待子线程结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WorkerDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> CountDownLatch latch;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(CountDownLatch latch)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.latch=latch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">10000</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            latch.countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        CountDownLatch latch=<span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Worker(latch).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        latch.await();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"all thread arrived\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h2><h3 id=\"集合点\"><a href=\"#集合点\" class=\"headerlink\" title=\"集合点\"></a>集合点</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CyclicBarrierDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tourist</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> CyclicBarrier barrier;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tourist</span><span class=\"params\">(CyclicBarrier barrier)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.barrier=barrier;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep((<span class=\"keyword\">int</span>)Math.random()*<span class=\"number\">1000</span>);</span><br><span class=\"line\">                barrier.await();</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" is arrive 1\"</span>);</span><br><span class=\"line\">                Thread.sleep((<span class=\"keyword\">int</span>)Math.random()*<span class=\"number\">1000</span>);</span><br><span class=\"line\">                barrier.await();</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\" is arrive 2\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        CyclicBarrier cyclicBarrier = <span class=\"keyword\">new</span> CyclicBarrier(<span class=\"number\">10</span>,</span><br><span class=\"line\">                () -&gt; System.out.println(<span class=\"string\">\"all tourist is finished.\"</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Tourist(cyclicBarrier).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all tourist is finished.</span><br><span class=\"line\">Thread-<span class=\"number\">9</span> is arrive <span class=\"number\">1</span></span><br><span class=\"line\">Thread-<span class=\"number\">4</span> is arrive <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">all tourist is finished.</span><br><span class=\"line\">Thread-<span class=\"number\">9</span> is arrive <span class=\"number\">2</span></span><br><span class=\"line\">Thread-<span class=\"number\">0</span> is arrive <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><p>Thread类有一个属性ThreadLocalMap，它是ThreadLocal的静态内部类，ThreadLocal就往这个属性存值，所以每一个线程都有一份。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"异步执行任务基础","url":"https://threewater.xyz/2019/03/11/executor/","content":"<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><h2 id=\"并发队列介绍\"><a href=\"#并发队列介绍\" class=\"headerlink\" title=\"并发队列介绍\"></a>并发队列介绍</h2><p>队列就是一种先进先出的结构，当多个线程访问同一个队列时可能会出现出现问题，现在我们来看一下队列的并发版本。</p>\n<ol>\n<li>无锁非阻塞并发队列：<code>ConcurrentLinkedQueue</code>和<code>ConcurrentLinkedDueue</code>内部使用链表实现，无界，使用CAS和循环保证线程安全。</li>\n<li>普通阻塞队列：<code>ArrayBlockingQueue</code>，<code>LinkedBlockingQueue</code>，<code>LinkedBlockingDueue</code>。一个基于数组实现，一个基于链表实现，基于数组实现的有界，基于链表实现的默认无界，内部使用<code>ReentrantLock</code> 和显式条件保证并发安全。</li>\n<li>优先级阻塞队列：不是先进先出队列，而是按优先级进出，要么实现比较接口，要么提供比较接口。无界。也是用显式锁和显式条件保证线程安全。</li>\n<li>延时阻塞队列：<code>DelayQueue</code> 按时间进行排序，取的时候看哪个过期了就拿哪个，如果没有元素过期，那么就拿快过期的，同时拿的线程睡眠过期间隔，如果睡眠期间由于新的元素加入，那么重新计算过期时间，唤醒睡眠线程，重新拿。使用显式锁保证安全。</li>\n<li>其它阻塞队列：<code>SynchronousQueue</code>：如果操作需要等待另一个线程的出队操作，出队操作需要等待另一个线程的入队操作。<code>LinkedTransferQueue</code>：继承自<code>BlockingQueue</code>，对存取操作进行了一些优化，如果有取操作在等待，如果当另外一个线程存元素的时候，会直接给取操作的线程。</li>\n</ol>\n<h2 id=\"异步任务执行服务\"><a href=\"#异步任务执行服务\" class=\"headerlink\" title=\"异步任务执行服务\"></a>异步任务执行服务</h2><p>以前我们想要执行异步任务的时候，必须自己创建线程，以及获取异步结果的具体细节。现在JDK为我们提供了一种实现，我们执行异步任务更简单。我们来一下基本类。</p>\n<ol>\n<li>Runnable ，Callable ：表示要异步执行的任务</li>\n<li>ExecutorService：执行服务，执行具体任务，并且返回任务执行结果</li>\n<li>Future：表示执行结果</li>\n</ol>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//泛型为返回结果的类型</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">String</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">1000</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"my task is finished\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class=\"line\">        ExecutorService executor = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        <span class=\"comment\">//执行异步任务并返回提交结果</span></span><br><span class=\"line\">        Future&lt;String&gt; res = executor.submit(<span class=\"keyword\">new</span> myTask());</span><br><span class=\"line\">        <span class=\"comment\">//submit方法还可以接收runnable。</span></span><br><span class=\"line\">        <span class=\"comment\">//如果传递的是runnable，那么还可以提供一个预先返回值，当任务执行完时，</span></span><br><span class=\"line\">        <span class=\"comment\">//会返回这个预置结果值。在run方法对预置的任何改变都没用</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"comment\">//查看提交结果</span></span><br><span class=\"line\">        System.out.println(res.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myTask2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> res=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//尽管这里改变了，但是输出还是2。</span></span><br><span class=\"line\">            setRes(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRes</span><span class=\"params\">(<span class=\"keyword\">int</span> res)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.res=res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于需要用子线程来需要返回处理结果的，还是要用callable接口。</p>\n<h3 id=\"方法介绍\"><a href=\"#方法介绍\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h3><p>Future 类</p>\n<ol>\n<li>boolean cancel(boolean mayInterruptIfRunning)：用于取消任务。 如果任务已完成，以取消或者不能取消，返回false。如果任务未开始，则不再运行。如果在运行，且参数为true，则产生中断，如果run方法中不响应中断，那你也没办法。</li>\n</ol>\n<p>ExecutorService </p>\n<p>任务执行服务，可以接收很多任务的执行，所以如果不关闭的话，他会一直等待新任务。</p>\n<ol>\n<li>void    shutdown() ：不再接收新任务，已执行的任务继续执行，即使任务还未开始执行</li>\n<li>List<runnable> shutdownNow()：终止所有任务，正在运行的任务产生中断，返回已提交但未运行的任务。</runnable></li>\n<li>invokeAll 传递批量任务，必须等所有任务执行完，才返回 Future。</li>\n<li>invokeAny 传递批量任务，只要有一个任务执行完了就返回执行结果，其它任务都取消。</li>\n</ol>\n<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><p>线程池：是ExecutorService的子类，表明他也是一个异步执行服务。前面我们使用了<code>newSingleThreadExecutor</code>，它是一个单线程的Executor。而线程池是一个多线程的：他有很多工作线程，以及任务队列。工作线程从任务队列中取任务执行。用法都一样，不过他有一个关键参数。</p>\n<ol>\n<li>corePoolSize 表示核心线程数</li>\n<li>maximumPoolSize 最大线程数，一般大于等于核心线程数</li>\n<li>keepAliveTime 空闲线程存活时间</li>\n</ol>\n<p>刚new对象时，一个线程都没有。以后每来一个任务，都创建一个线程，直到达到最大线程数。这是如果有空闲线程且超过存活时间，那么线程会减少，减少到核心线程数。也可以指定参数，使核心线程数也被减少。</p>\n<p>任务队列使用前面介绍的并发队列实现的。如果没有空闲线程，且队列有界，那么就会拒绝任务，默认的拒绝方式是抛出异常。</p>\n<h3 id=\"ExecutorService的一些实现类\"><a href=\"#ExecutorService的一些实现类\" class=\"headerlink\" title=\"ExecutorService的一些实现类\"></a>ExecutorService的一些实现类</h3><ol>\n<li>newSingleThreadExecutor ：只有一个线程，其它任务加入无界等待队列</li>\n<li>newFixedThreadPool(int nThreads) ：有n个线程，其它任务加入无界等待队列</li>\n<li>newCachedThreadPool()：空闲线程存活一分钟，如果如果当前没有空闲线程，则无限的创建新线程。</li>\n</ol>\n<p>何时使用</p>\n<p>如果系统负载很高，用第二个。如果负载不高，且每个线程的运行时间都很短，可以用第三个。</p>\n<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><p>定时任务主要有两个类</p>\n<ol>\n<li>TimerTask抽象类，需要用户实现run方法，表示一个定时任务</li>\n<li>Timer具体定时任务的执行类，通过schedule方法传递任务</li>\n<li>schedule：当前任务在前面任务<code>开始之前</code>延迟一定时间后执行，如果前面的任务运行时间过长，那么后面的任务会立马执行。</li>\n<li>scheduleAtFixedRate：从指定时间开始，按固定频率执行，如果被耽误了，则一次执行完所有过期任务。</li>\n</ol>\n<h4 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h4><p>它只有一个线程，一个等待队列。队列是按过期时间排序的，哪个快过期了哪个就在前面。每次取的时候，就检查过期时间，每次入的时候就吧快过期的放前面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicTimer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTimerTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">TimerTask</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"delay task\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">        timer.schedule(<span class=\"keyword\">new</span> DelayTask(),<span class=\"number\">10</span>);</span><br><span class=\"line\">        timer.schedule(<span class=\"keyword\">new</span> MyTimerTask(),<span class=\"number\">100</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delay task</span><br><span class=\"line\">hello<span class=\"comment\">//紧跟delay task 输出的</span></span><br><span class=\"line\">hello</span><br><span class=\"line\">hello</span><br><span class=\"line\">hello</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"中介者设计模式","url":"https://threewater.xyz/2019/03/11/mediator/","content":"<p>中介者相当于各个实体的信息交换中心，所有实体产生了什么事件或者信息，本来应该通知给某个相关的实体，现在它直接告诉中介，然后由中介决定传递给其它相关的实体。降低了实体与实体之间的耦合。</p>\n<p>这样每个实体，持有中介的引用，一发生事情就告诉中介，每个中介持有所有实体的引用，接收所有实体的信息，然后决定发给哪些或者哪个实体。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//有事件发生就告诉中介</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onEvent</span><span class=\"params\">(Mediator mediator)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Mediator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doEvent</span><span class=\"params\">(String e)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColleagueA</span> <span class=\"keyword\">implements</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onEvent</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//A 发生了事件就通知中介，让中介去发送这个消息</span></span><br><span class=\"line\">        mediator.doEvent(<span class=\"string\">\"A event\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">thingA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"colleague A thing\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColleagueB</span> <span class=\"keyword\">implements</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onEvent</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">        mediator.doEvent(<span class=\"string\">\"B event\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">thingB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"colleague B thing\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColleagueC</span> <span class=\"keyword\">implements</span> <span class=\"title\">Colleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onEvent</span><span class=\"params\">(Mediator mediator)</span> </span>&#123;</span><br><span class=\"line\">        mediator.doEvent(<span class=\"string\">\"C event\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">thingC</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"colleague C thing\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Mediator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ColleagueA colleagueA;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ColleagueB colleagueB;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ColleagueC colleagueC;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteMediator</span><span class=\"params\">(ColleagueA colleagueA, ColleagueB colleagueB, ColleagueC colleagueC)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.colleagueA = colleagueA;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.colleagueB = colleagueB;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.colleagueC = colleagueC;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doEvent</span><span class=\"params\">(String e)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</span><br><span class=\"line\">                send2BC();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</span><br><span class=\"line\">                send2C();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"C\"</span>:</span><br><span class=\"line\">                send2A();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">send2BC</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"send to B C\"</span>);</span><br><span class=\"line\">        colleagueB.thingB();</span><br><span class=\"line\">        colleagueC.thingC();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">send2C</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"send to C\"</span>);</span><br><span class=\"line\">        colleagueC.thingC();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">send2A</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"send to A\"</span>);</span><br><span class=\"line\">        colleagueA.thingA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"解释器设计模式","url":"https://threewater.xyz/2019/03/11/interpreter/","content":"<p>利用基本表达式（运算符，数值）建立通用的抽象计算模型，然后用这个抽象模型进行运算或者判断。</p>\n<h3 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>判断某个字符串是否符合某种规则，如</p>\n<p>满足<code>A and (B or C D)</code>的字符串有</p>\n<p>[ A B ] ，[ A C D ]。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表达式抽象，如果此表达式正确返回true，错误返回false</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">interpreter</span><span class=\"params\">(String str)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String literal;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TerminalExpression</span><span class=\"params\">(String literal)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.literal = literal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpreter</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//用来分隔字符串，类似于split方法，遗留类，不建议使用</span></span><br><span class=\"line\">        StringTokenizer tokenizer=<span class=\"keyword\">new</span> StringTokenizer(str);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tokenizer.hasMoreTokens())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tokenizer.nextToken().equals(literal)) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndExpression</span> <span class=\"keyword\">implements</span> <span class=\"title\">Expression</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Expression exp1;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Expression exp2;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndExpression</span><span class=\"params\">(Expression exp1, Expression exp2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.exp1 = exp1;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.exp2 = exp2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interpreter</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exp1.interpreter(str)&amp;&amp;exp2.interpreter(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//构建解释器</span></span><br><span class=\"line\">        Expression a = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        Expression b = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"B\"</span>);</span><br><span class=\"line\">        Expression c = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"C\"</span>);</span><br><span class=\"line\">        Expression d = <span class=\"keyword\">new</span> TerminalExpression(<span class=\"string\">\"D\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//C D</span></span><br><span class=\"line\">        Expression cd= <span class=\"keyword\">new</span> AndExpression(c,d);</span><br><span class=\"line\">        <span class=\"comment\">//B or C D</span></span><br><span class=\"line\">        Expression BorCD=<span class=\"keyword\">new</span> OrExpression(b,cd);</span><br><span class=\"line\">        <span class=\"comment\">//A and (B or C D)</span></span><br><span class=\"line\">        Expression AandBorCD=<span class=\"keyword\">new</span> AndExpression(a,BorCD);</span><br><span class=\"line\">        String[] strs=&#123;<span class=\"string\">\"A B\"</span>,<span class=\"string\">\"A C D\"</span>,<span class=\"string\">\"A D\"</span>,<span class=\"string\">\"A C E\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s:strs)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> res = AandBorCD.interpreter(s);</span><br><span class=\"line\">            System.out.println(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">true</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br><span class=\"line\"><span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"优先级队列","url":"https://threewater.xyz/2019/03/10/priority-queue/","content":"<p>在Java中<code>priority queue</code>是用堆实现的。<code>linkedList</code>只能保证插入有序，<code>TreeMap</code>可以保证有序，但是必须提供键，如果希望保持队列有序，那么就只有<code>priority queue</code>了。插入和删除的时间复杂度为O(log(n))。获取最大或最小元素为O(1)。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"了解并发容器","url":"https://threewater.xyz/2019/03/08/concurrent-container/","content":"<p>虽然我们已经有了同步容器，但是同步容器只有一把锁，迭代的时候，如果发生了结构性的修改，会抛出异常。一把锁，在高并发的情况下，一把锁显然不够，会有很多的人等待。那么就有了并发容器类，定义在JUC包中。我们简单了解了一下。</p>\n<h2 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h2><p>内部通过数组实现，数组使用<code>volatile</code>修饰，保证内存可见性。读方法没必要同步和锁，添加方法内部使用，<code>ReentrantLock</code>锁。他是复制一个数组，长度加1，然后更改变量引用。从这些点可以看出，他在高并发读的效率是很高的。写的话高并发不太好，所以这个list适合读多写少的并发情况。<code>CopyOnWriteArraySet</code>内部是用<code>CopyOnWriteArrayList</code>实现的。</p>\n<h2 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h2><p>读完全并行，写支持一定程度的并行。封装了某些复和操作，迭代不会抛出异常。对于添加，它内部使用分段锁，这样他就有很多锁，而不是所有线程都像同步容器一样竞争一个锁，这样只要这些线程读取的段不同，它们就可以不用竞争同一个锁，这也是就是为什么说：写是一定程度的并行。可见他比<code>CopyOnWriteArrayList</code>的写要高效很多。弱一致性：变化发生在已遍历过的部分，不会被察觉，如果发生在未遍历的部分，会被察觉。</p>\n<h2 id=\"ConcurrentSkipListMap\"><a href=\"#ConcurrentSkipListMap\" class=\"headerlink\" title=\"ConcurrentSkipListMap\"></a>ConcurrentSkipListMap</h2><p>跳表，前面的类或多或少都有一部分方法使用了锁，这个类的所有操作都没有使用锁，所有操作都是无阻塞的，所有操作都可以并行。迭代不会抛出异常，但是它的get size 方法，是要遍历所有元素的，时间复杂度有点高。跳表就是有很多级有序索引的表。</p>\n<img src=\"/2019/03/08/concurrent-container/skip_list.png\">\n<p>他就像是一颗二叉树，可以实现二分查找，所以它的查找效率也不错。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>CopyOnWriteArrayList 适合数组无序，读多写少的并发情况，写时会阻塞，读/写复杂度为1，查找为O(n)。ConcurrentHashMap 写操作比 CopyOnWriteArrayList 性能要高，写时有一定概率阻塞，如果并发情况下需要使用键值对，可以考虑使用它，如果链表不冲突，那么读/写/查找都为1，如果冲突很严重，那么为O(n)。ConcurrentSkipListMap 无阻塞，这是它所有的优点，主要操作的复杂度为O(log(n))。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"初看JUC","url":"https://threewater.xyz/2019/03/07/juc-1/","content":"<h3 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h3><p>原子性就是这个操作不可分割，要么CPU运行一次运行完这个操作，要么就整个操作都不运行。也就是说同一时刻只有一个线程能运行这个操作。</p>\n<h3 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h3><p>要实现锁的基本思想是，有一个变量，他有两种状态，表示锁和未锁。如果状态是锁的，那么所有线程等待或者死循环。如果状态在某一个时刻变成未锁状态，关键在于第一个感知到这个状态改变的线程，要立马改变成锁状态。如果它还没来得及，那么其它线程也会感知这种状态，然后进来。所以关键在于。<code>感知-&gt;改变</code>这一操作要是原子的。</p>\n<h3 id=\"原子变量\"><a href=\"#原子变量\" class=\"headerlink\" title=\"原子变量\"></a>原子变量</h3><p>对原子变量进行操作不会产生竞争条件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtomicDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AtomicInteger counter=<span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Visitor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//原子性操作</span></span><br><span class=\"line\">                counter.incrementAndGet();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread[] visitor=<span class=\"keyword\">new</span> Thread[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            visitor[i]=<span class=\"keyword\">new</span> Visitor();</span><br><span class=\"line\">            visitor[i].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            visitor[i].join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(counter.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><ol>\n<li>void lock() 获取锁，没有获取到会阻塞</li>\n<li>boolean tryLock() 尝试获取锁，不会阻塞，没有获取到返回false</li>\n<li>unlock() 解锁</li>\n</ol>\n<p>我们也可以用原子变量来实现它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ReentrantLock lock=<span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">incr</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过锁来封装成原子操作。</span></span><br><span class=\"line\">    \t   <span class=\"comment\">//lock会阻塞，直到成功。 </span></span><br><span class=\"line\">\t       lock.lock();</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过可重入锁来实现账户转账</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoMoneyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span></span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock=<span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> menony;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Account</span><span class=\"params\">(<span class=\"keyword\">int</span> menony)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.menony=menony;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"comment\">//存钱操作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> menony)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//对于转账操作来说，这里不需要锁</span></span><br><span class=\"line\">            <span class=\"comment\">//考虑到可能有取/存钱操作，这里加上锁</span></span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.menony+=menony;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//取钱操作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dec</span><span class=\"params\">(<span class=\"keyword\">int</span> menony)</span> <span class=\"keyword\">throws</span> NoMoneyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp=<span class=\"keyword\">this</span>.menony-menony;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp&lt;<span class=\"number\">0</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoMoneyException();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.menony=tmp;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tyrLock</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lock.tryLock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AcountManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryTransfer</span><span class=\"params\">(Account from,Account to,<span class=\"keyword\">int</span> money)</span> <span class=\"keyword\">throws</span> Account.NoMoneyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果使用lock会出现死锁</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(from.tyrLock())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//trylock在没有获得锁的情况下返回false，同时释放以获得的锁</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(to.tyrLock())&#123;</span><br><span class=\"line\">                        from.dec(money);</span><br><span class=\"line\">                        to.add(money);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    to.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            from.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Account from,Account to,<span class=\"keyword\">int</span> money)</span> <span class=\"keyword\">throws</span> Account.NoMoneyException</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> success;</span><br><span class=\"line\">        <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">            success = tryTransfer(from, to, money);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!success) Thread.yield();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (!success);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显示式条件配合锁实现生产者/消费者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBlockQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Lock lock=<span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\">    <span class=\"comment\">//因为生产者和消费者的等待条件不同，所以设置两个等待条件。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Condition full=lock.newCondition();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Condition empty=lock.newCondition();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;String&gt; queue;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyBlockQueue</span><span class=\"params\">(Queue&lt;String&gt; queue,<span class=\"keyword\">int</span> limit)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue=queue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.limit=limit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(String a)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.size()==limit) full.await();</span><br><span class=\"line\">            queue.add(a);</span><br><span class=\"line\">            empty.signal();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">poll</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.isEmpty()) empty.await();</span><br><span class=\"line\">            String poll = queue.poll();</span><br><span class=\"line\">            full.signal();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> poll;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>显式锁和显式条件配合使用，<code>synchronized</code>和<code>wait()、notify()</code> 配合使用。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"命令设计模式","url":"https://threewater.xyz/2019/03/06/command-design/","content":"<ol>\n<li>ICommand： 接口 命令这一名词的抽象，所有具体的命令都必须继承它</li>\n<li>实体：命令接收者，负责接收命令，并执行具体操作</li>\n<li>发送者：或者说具体命令。负责发送某个具体的命令给实体，因此它应该实现ICommand接口</li>\n<li>管理器：负责管理所有的命令，支持添加多个命令。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实体 风扇</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElectricFan</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lowSpeed</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"低速运转\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">highSpeed</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"高速运转\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mediumSpeed</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"中速运转\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trunOff</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"电扇关闭\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trunOn</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"电扇打开\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体命令1 ，命令发送者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHighSpeedCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ElectricFan fan;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteHighSpeedCommand</span><span class=\"params\">(ElectricFan fan)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fan = fan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        fan.highSpeed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体命令2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteLowSpeedCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ElectricFan fan;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteLowSpeedCommand</span><span class=\"params\">(ElectricFan fan)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fan = fan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        fan.lowSpeed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体命令3</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretemediumSpeedCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ElectricFan fan;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcretemediumSpeedCommand</span><span class=\"params\">(ElectricFan fan)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fan = fan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        fan.mediumSpeed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体命令4</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteOffCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ElectricFan fan;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteOffCommand</span><span class=\"params\">(ElectricFan fan)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fan = fan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        fan.trunOff();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体命令5</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteOnCommand</span> <span class=\"keyword\">implements</span> <span class=\"title\">ICommand</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ElectricFan fan;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteOnCommand</span><span class=\"params\">(ElectricFan fan)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fan = fan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        fan.trunOn();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//管理器，管理所命令，提供统一使用方法。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteControl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,ICommand&gt; commandMap=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCommand</span><span class=\"params\">(String option, ICommand command)</span></span>&#123;</span><br><span class=\"line\">        commandMap.put(option,command);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(String option)</span></span>&#123;</span><br><span class=\"line\">        ICommand command = commandMap.get(option);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(command==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"no such option\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        command.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ElectricFan electricFan = <span class=\"keyword\">new</span> ElectricFan();</span><br><span class=\"line\">        ICommand highSpeedCommand=<span class=\"keyword\">new</span> ConcreteHighSpeedCommand(electricFan);</span><br><span class=\"line\">        ICommand mediumSpeedCommand = <span class=\"keyword\">new</span> ConcretemediumSpeedCommand(electricFan);</span><br><span class=\"line\">        ICommand lowSpeedCommand=<span class=\"keyword\">new</span> ConcreteLowSpeedCommand(electricFan);</span><br><span class=\"line\">        ICommand offCommand=<span class=\"keyword\">new</span> ConcreteOffCommand(electricFan);</span><br><span class=\"line\">        ICommand onCommand=<span class=\"keyword\">new</span> ConcreteOnCommand(electricFan);</span><br><span class=\"line\">        RemoteControl control = <span class=\"keyword\">new</span> RemoteControl();</span><br><span class=\"line\">        control.addCommand(<span class=\"string\">\"high\"</span>,highSpeedCommand);</span><br><span class=\"line\">        control.addCommand(<span class=\"string\">\"medium\"</span>,mediumSpeedCommand);</span><br><span class=\"line\">        control.addCommand(<span class=\"string\">\"low\"</span>,lowSpeedCommand);</span><br><span class=\"line\">        control.addCommand(<span class=\"string\">\"off\"</span>,offCommand);</span><br><span class=\"line\">        control.addCommand(<span class=\"string\">\"on\"</span>,onCommand);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遥控器测试</span></span><br><span class=\"line\">        control.execute(<span class=\"string\">\"on\"</span>);</span><br><span class=\"line\">        control.execute(<span class=\"string\">\"high\"</span>);</span><br><span class=\"line\">        control.execute(<span class=\"string\">\"low\"</span>);</span><br><span class=\"line\">        control.execute(<span class=\"string\">\"medium\"</span>);</span><br><span class=\"line\">        control.execute(<span class=\"string\">\"off\"</span>);</span><br><span class=\"line\">        control.execute(<span class=\"string\">\"explode\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">电扇打开</span><br><span class=\"line\">高速运转</span><br><span class=\"line\">低速运转</span><br><span class=\"line\">中速运转</span><br><span class=\"line\">电扇关闭</span><br><span class=\"line\">no such option</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"并发基础","url":"https://threewater.xyz/2019/03/06/thread/","content":"<h1 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h1><h2 id=\"通过继承Thread类\"><a href=\"#通过继承Thread类\" class=\"headerlink\" title=\"通过继承Thread类\"></a>通过继承Thread类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my first thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Thread myThread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"mian thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mian thread</span><br><span class=\"line\"><span class=\"comment\">//1000毫秒后</span></span><br><span class=\"line\">my first thread</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过实现runable接口\"><a href=\"#通过实现runable接口\" class=\"headerlink\" title=\"通过实现runable接口\"></a>通过实现runable接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"implements runnable thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runnable myThread = <span class=\"keyword\">new</span> MyThread2();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(myThread);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"mian thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mian thread</span><br><span class=\"line\">implements runnable thread</span><br></pre></td></tr></table></figure>\n\n<p><code>Thread.currentThread()</code>可以查看当前代码实在哪个线程中运行。每个线程都有一个名字和ID我们可以通过设置名字来方便调试。</p>\n<p>线程可以设置优先级，从1到10，最高为10，默认为5。不过这个优先级只是给操作系统的一些提示，具体这么实现还是要看操作系统。</p>\n<p>我么也可以通过<code>getState()</code>获取当当前线程所处的状态。线程有一下几种状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NEW 表示线程对象已创建。但是还没有调用start()方法。</span><br><span class=\"line\">RUNNABLE 表示线程正在执行run方法，也可能正在等待时间片。</span><br><span class=\"line\">BLOCKED，WAITING，TIMED_WAITING 都表示线程已阻塞。</span><br><span class=\"line\">TERMINATED 表示run方法已运行玩，线程已终止。</span><br></pre></td></tr></table></figure>\n\n<p><code>isAlive()</code>判断当前线程是否活着。</p>\n<p>除了主线程之外，还有协线程(daemon线程)。依附于主线程存在，如垃圾回收器，等。通过<code>isDaemon()</code>判断是否为协线程。<code>setDaemon(true)</code>设置该线程为协线程。</p>\n<p><code>sleep()</code>方法可以使当前线程睡眠。那么该线程就会让出CPU。睡眠的线程可以被中断。被中断时会抛出异常。</p>\n<p><code>yield()</code>方法会主动让出CPU，当然具体什么时候让，还是有操作系统决定的。</p>\n<p><code>threadA.jion()</code>调用这个方法的线程会等待<code>threadA</code>结束，自己才能结束。如果参数为0表示无限期等待。</p>\n<h2 id=\"竞争条件-race-condition\"><a href=\"#竞争条件-race-condition\" class=\"headerlink\" title=\"竞争条件 ( race condition )\"></a>竞争条件 ( race condition )</h2><p>但多个线程操作同一资源时，就会出现竞争条件。如果对资源的操作不具有<code>原子性</code>。那么就可能会出现意想不到的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">inrCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)</span><br><span class=\"line\">            <span class=\"comment\">//count=count+1;</span></span><br><span class=\"line\">            count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        inrCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Thread[] threads=<span class=\"keyword\">new</span> MyThread3[<span class=\"number\">1000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            threads[i]=<span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">            threads[i].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000</span>;i++)&#123;</span><br><span class=\"line\">            threads[i].join();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9994990</span><br></pre></td></tr></table></figure>\n\n<p>如果正常，那么输出结果应该是一片0。说明，count++不是原子性操作。如何使它变成原子性操作呢？</p>\n<ol>\n<li><code>synchronized</code>关键字。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">inrCount</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)</span><br><span class=\"line\">        <span class=\"comment\">//count=count+1;</span></span><br><span class=\"line\">        count++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用显式锁。</li>\n<li>使用原子变量。</li>\n</ol>\n<h2 id=\"内存可见性\"><a href=\"#内存可见性\" class=\"headerlink\" title=\"内存可见性\"></a>内存可见性</h2><p>内存可见性是由于各种缓存造成的。程序运行时，一些变量会放入CPU的缓存中。这样变量再内存中有一份，缓存中也有一份。对内存变量的修改，无法立即同步到缓存中，或者永远无法同步。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (count==<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">        <span class=\"comment\">//这一句没有执行</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my thread exit\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        MyThread4 myThread4 = <span class=\"keyword\">new</span> MyThread4();</span><br><span class=\"line\">        myThread4.start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//这里的更改没有映射到缓存中。</span></span><br><span class=\"line\">        count=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要解决内存可见性问题，有三种方法：</p>\n<ol>\n<li>使用<code>volatile</code>关键字。</li>\n<li>使用<code>synchronized</code>关键字</li>\n<li>使用显式锁。</li>\n</ol>\n<h2 id=\"synchronized关键字\"><a href=\"#synchronized关键字\" class=\"headerlink\" title=\"synchronized关键字\"></a>synchronized关键字</h2><p>作用于：实例方法，静态方法，代码块。</p>\n<p>它的本质就是锁住当前对象。如果有多个线程访问这个对象(调用synchronized标记的方法，或者代码块)。则同时只有一个线程能使用这个对象，直到这个线程使用结束，其它线程才有机会使用这个对象。对于静态方法。它锁住的是类对象。</p>\n<p>也就是说。每一个对象，都有一个锁和等待队列。而<code>synchronized</code>就是标记哪个对象的哪些方法，是需要获得锁才能访问的。所以<code>synchronized</code>也可以再本类中标记其它类的对象。</p>\n<p>它除了可以解决竞争条件的问题，还可以解决内存可见性的问题。释放锁时所有数据写回内存，获得锁时，所有数据从内存中读取。</p>\n<p>避免死锁的一种方式是，所有代码都以相同的顺序获得锁。</p>\n<h2 id=\"volatile-关键字\"><a href=\"#volatile-关键字\" class=\"headerlink\" title=\"volatile 关键字\"></a>volatile 关键字</h2><p>虽然·synchronized<code>也能解决内存可见性问题，但是成本高，</code>volatile`是一种更轻量级的解决方案。他能保证读取到的时最新值。</p>\n<h2 id=\"同步容器注意事项\"><a href=\"#同步容器注意事项\" class=\"headerlink\" title=\"同步容器注意事项\"></a>同步容器注意事项</h2><ol>\n<li>复合操作，虽然容器类种每一个操作都是线程安全的，但是他们的组合操作不是。例如：检查之后再更新。检查一个元素，如果不存在，返回null。如果不存在，更新。尽管检查更新是原子操作，但是他们的复合操作不是。</li>\n<li>伪同步，既然上面的符合操作不行，那么我们加上<code>synchronized</code>不就行了？这里要注意不要同步错了对象，最好同步的是当前容器对象。</li>\n<li>并发容器的<code>iterator</code>没有<code>synchronized</code>。所以遍历的时候，修改结构也会抛异常，除非整个迭代操作锁住容器对象。</li>\n</ol>\n<h2 id=\"线程之间的协作\"><a href=\"#线程之间的协作\" class=\"headerlink\" title=\"线程之间的协作\"></a>线程之间的协作</h2><p>再Object类中，定义了wait/notify方法，它们只能写在<code>synchronized</code>语句内。每一个对象除了</p>\n<p>有锁和等待队列外，还有另一个等待队列，叫条件等待队列。wait/notify就是操作这个条件等待队列的。<code>ObjectA.wait()</code>方法可以使调用它的线程加入<code>ObjectA</code>的条件等待队列中。同时该线程释放<code>synchronized</code>的锁，线程阻塞，进入<code>WAITING 或TIMED_WAITING</code>状态。如果有另外的线程（线程B）调用<code>ObjectA.notify()</code>方法，那么他就会从<code>ObjectA</code>的条件等待队列中唤醒一个线程(假设为线程A)。然后尝试获得锁，如果能获得锁，线程状态变为<code>RUNNABLE</code>状态，然后从wait()调用中返回。如果线程B和线程A使用的是同一个锁。线程B的调用notify方法后，可能还没有释放锁，那么线程A被唤醒后，不能获得锁，就变为了<code>BLOCKED</code>状态。只有获得锁之后才能从调用中返回。</p>\n<h3 id=\"生产者消费者队列协作\"><a href=\"#生产者消费者队列协作\" class=\"headerlink\" title=\"生产者消费者队列协作\"></a>生产者消费者队列协作</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBlockQueue</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Queue&lt;E&gt; queue;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> limit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyBlockQueue</span><span class=\"params\">(Queue&lt;E&gt; queue, <span class=\"keyword\">int</span> limit)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue = queue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.limit = limit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(E element)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(queue.size()==limit)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//调用此方法的线程加入条件等待队列</span></span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        queue.add(element);</span><br><span class=\"line\">        <span class=\"comment\">//唤醒全部，如果只唤醒一个，那么唤醒的可能是生产者。</span></span><br><span class=\"line\">        <span class=\"comment\">//唤醒生产者后，它发现条件满足了，又wait了，然后唤醒它的生产者也会wait。</span></span><br><span class=\"line\">        <span class=\"comment\">//就没人能唤醒消费者了。</span></span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> E <span class=\"title\">take</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(queue.isEmpty())&#123;</span><br><span class=\"line\">            wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        E e=queue.poll();</span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        MyBlockQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> MyBlockQueue&lt;&gt;(<span class=\"keyword\">new</span> LinkedList&lt;&gt;(),<span class=\"number\">10</span>);</span><br><span class=\"line\">        Consumer consumer = <span class=\"keyword\">new</span> Consumer(queue);</span><br><span class=\"line\">        Producer producer = <span class=\"keyword\">new</span> Producer(queue);</span><br><span class=\"line\">        consumer.start();</span><br><span class=\"line\">        producer.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyBlockQueue&lt;String&gt; queue;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Consumer</span><span class=\"params\">(MyBlockQueue&lt;String&gt; queue)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue=queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                String take = queue.take();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"consumer\"</span>+take);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Producer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyBlockQueue&lt;String&gt; queue;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Producer</span><span class=\"params\">(MyBlockQueue&lt;String&gt; queue)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.queue=queue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                queue.put(<span class=\"string\">\"AAAA\"</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"producer product\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同时开始\"><a href=\"#同时开始\" class=\"headerlink\" title=\"同时开始\"></a>同时开始</h3><p>让所有线程先等待，然后一起唤醒。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FireFlag</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//volatile保证不会出现内存不可见</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> fire;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">waitForFire</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!fire) wait();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">fire</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        fire=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//唤醒所有等待的racer</span></span><br><span class=\"line\">        notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        FireFlag fireFlag = <span class=\"keyword\">new</span> FireFlag();</span><br><span class=\"line\">        Racer[] racers=<span class=\"keyword\">new</span> Racer[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            racers[i]=<span class=\"keyword\">new</span> Racer(fireFlag);</span><br><span class=\"line\">            racers[i].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"all racer ready\"</span>);</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        fireFlag.fire();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Racer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FireFlag flag;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Racer</span><span class=\"params\">(FireFlag flag)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag=flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            flag.waitForFire();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"run \"</span>+getName());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all racer ready</span><br><span class=\"line\">run Thread-<span class=\"number\">7</span></span><br><span class=\"line\">run Thread-<span class=\"number\">2</span></span><br><span class=\"line\">run Thread-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等待结束\"><a href=\"#等待结束\" class=\"headerlink\" title=\"等待结束\"></a>等待结束</h3><p>再主线程中，如果我们要等待子线程结束，我们可以在主线程中调用子线程的<code>jion()</code>方法。jion方法内部也是通过wait实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (isAlive()) &#123;</span><br><span class=\"line\">    wait(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们实际上调用的是<code>wait()</code>方法，也就是让主线程加入了子线程的条件等待队列中。当子线程运行结束后JVM会调用子线程的<code>notifyAll()</code>唤醒主线程。这样如果主线程调用很多子线程的jion方法，它只能一个一个去判断子线程是否活着，然后一个一个的等待。其实我们也可以自己实现这种等待结束，我们可以让主线程的子线程共享一个协作对象，然后协作对象初始化为子线程数目，子线程运行完后主动减少子线程数目。然后，主线程只要等待子线程数目等于0就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyLatch latch;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Worker</span><span class=\"params\">(MyLatch latch)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.latch=latch;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(getName()+<span class=\"string\">\"  working\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        latch.dec();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLatch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLatch</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.count=count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">dec</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        <span class=\"comment\">//所有worker都工作完了，唤醒主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count==<span class=\"number\">0</span>) notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//线程还没工作完</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count!=<span class=\"number\">0</span>) wait();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        MyLatch myLatch = <span class=\"keyword\">new</span> MyLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\">        Worker[] workers=<span class=\"keyword\">new</span> Worker[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            workers[i]=<span class=\"keyword\">new</span> Worker(myLatch);</span><br><span class=\"line\">            workers[i].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        myLatch.await();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"all workers finished work\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就只调用了一次<code>notofyAll()</code>方法。主线程状态切换也只有一次。</p>\n<h3 id=\"异步执行任务\"><a href=\"#异步执行任务\" class=\"headerlink\" title=\"异步执行任务\"></a>异步执行任务</h3><p>有了子线程，我们就可以执行异步任务了。我们可以让子线程进行某些IO操作，获得结果，然后贮存到某个地方。子线程然后执行，到需要结果的时候就再取，如果子线程运行完了，那么直接取结果就可以了，如果子线程还没运行完，那么让主线程等一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> done;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String res;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object lock;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyExecutor</span><span class=\"params\">(Object lock)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lock=lock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> done;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRes</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果子线程没有完成，就等待</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!isDone())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//主线程等待子线程唤醒</span></span><br><span class=\"line\">                    lock.wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//表示子线程已经运行完，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res=<span class=\"string\">\"result found\"</span>;</span><br><span class=\"line\">        done=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (lock)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果子线程运行快，那么这个方法没用</span></span><br><span class=\"line\">            <span class=\"comment\">//如果子线程运行慢，那么就会唤醒主线程</span></span><br><span class=\"line\">            lock.notifyAll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        MyExecutor myExecutor = <span class=\"keyword\">new</span> MyExecutor(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">        myExecutor.start();</span><br><span class=\"line\">        <span class=\"comment\">//do something else ...</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//everything is done</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"everything is done\"</span>);</span><br><span class=\"line\">        String res = myExecutor.getRes();</span><br><span class=\"line\">        System.out.println(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集合点\"><a href=\"#集合点\" class=\"headerlink\" title=\"集合点\"></a>集合点</h3><p>线程们先独立运行，然后都到一个地方集合，先到的等待后到的，直到所有线程都到了，交换信息，然后进行下一轮。</p>\n<p>同样我们可以设置一个线程数目的变量，线程到了就使变量减减，如果变量不为0则等待，如果为0则唤醒所有线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AssemblePoint</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AssemblePoint</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.n=n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">await</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                notifyAll();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"all thread arrived\"</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AssembleRunner</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        AssemblePoint point;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AssembleRunner</span><span class=\"params\">(AssemblePoint point)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.point=point;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(getName()+<span class=\"string\">\" do something \"</span>+Math.random()*<span class=\"number\">1000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(getName()+<span class=\"string\">\" is arrived\"</span>);</span><br><span class=\"line\">                point.await();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        AssemblePoint point=<span class=\"keyword\">new</span> AssemblePoint(<span class=\"number\">10</span>);</span><br><span class=\"line\">        Thread[] threads=<span class=\"keyword\">new</span> Thread[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            threads[i]=<span class=\"keyword\">new</span> AssembleRunner(point);</span><br><span class=\"line\">            threads[i].start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h2><p><code>stop</code>方法已过时，那么我们我们要提前关闭线程就要使用中断，中断不是真正的关闭线程，它与线程的状态有关。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isInterrupted</span><span class=\"params\">()</span></span>;<span class=\"comment\">//实例方法,返回中断标志位，默认为false</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">interrupt</span><span class=\"params\">()</span></span>;<span class=\"comment\">//设置中断标志位为true</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">interrupted</span><span class=\"params\">()</span></span>;<span class=\"comment\">//返回中断标志位，同时设为false</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>NEW/TERMINATE ：设置中断没有任何作用</li>\n<li>RUNNABLE ：应该再合适的位置检查标志位，如果为true，应该进行处理。</li>\n<li>WAITING/TIMED_WAITING ：jion/wait/sleep方法会使线程进入此状态。如果发生了中断，会抛出中断异常，同时设置中断位位false。如果异常再runnable中发生，则不能抛出，可以通过重新设置标志位，告诉其它线程。产生了中断。</li>\n<li>BLOCKED ：线程再等待锁，如果这时产生了中断，它不能抛出异常，只能简单的设置标志位。也就说他不能相应中断。</li>\n</ol>\n<h2 id=\"最后来张图\"><a href=\"#最后来张图\" class=\"headerlink\" title=\"最后来张图\"></a>最后来张图</h2><img src=\"/2019/03/06/thread/thread.svg\">","categories":["Java"],"tags":["学习"]},{"title":"责任链设计模式","url":"https://threewater.xyz/2019/03/05/Chain-Of-Responsibility/","content":"<p>责任链设计模式就把多个类串联起来，如果某个不能处理，那么就交给链上后面的类处理。总有一个类能处理的。这样这条链如果够长，那么理论上就能处理所有请求。当然这些处理也可以写在一个类里面，然后里面写大量的if/else。但是，这样代码将变得难以维护。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Request</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RequestType type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Request</span><span class=\"params\">(RequestType type, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RequestType &#123;</span><br><span class=\"line\">    TYPE1,TYPE2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Handler successor;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Handler successor)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successor=successor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(Request request)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler1</span>  <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteHandler1</span><span class=\"params\">(Handler successor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(successor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(request.getType()==RequestType.TYPE1)&#123;</span><br><span class=\"line\">            System.out.println(request.getName()+<span class=\"string\">\"handled by C1\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//不能处理就交给后面的类</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(successor!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            successor.handleRequest(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcreteHandler2</span><span class=\"params\">(Handler successor)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(successor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(Request request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(request.getType()==RequestType.TYPE2)&#123;</span><br><span class=\"line\">            System.out.println(request.getName()+<span class=\"string\">\"handled by C2\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(successor!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            successor.handleRequest(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Request request = <span class=\"keyword\">new</span> Request(RequestType.TYPE1,<span class=\"string\">\"请求1\"</span>);</span><br><span class=\"line\">        Request request2 = <span class=\"keyword\">new</span> Request(RequestType.TYPE2,<span class=\"string\">\"请求2\"</span>);</span><br><span class=\"line\">        ConcreteHandler1 handler1 = <span class=\"keyword\">new</span> ConcreteHandler1(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        ConcreteHandler2 handler2 = <span class=\"keyword\">new</span> ConcreteHandler2(handler1);</span><br><span class=\"line\">        handler2.handleRequest(request);</span><br><span class=\"line\">        handler2.handleRequest(request2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求1handled by C1</span><br><span class=\"line\">请求2handled by C2</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"Java序列化","url":"https://threewater.xyz/2019/03/05/serializable-1/","content":"<p>关于基本类型的贮存，我们有<code>DataOutputStream</code>但是，对于对象。我们必须一个个基本类型存，如果，一个对象中含有另一个对象，这种方式将会变得非常麻烦。Java为我们提供了序列化机制。让我们可以一键序列化对象。对于不想要序列化的字段，可以使用<code>transient</code>关键字，告诉虚拟机不要自动序列化，对于这个关键字声明的字段，我们还是可以使用<code>writeObject</code>方法来手动写入，在读取的时候注意顺序。参见<a href=\"/2019/02/24/serializable/\" title=\"serializable接口\">serializable接口</a>。</p>\n<p>但由于Java自己的序列化机制和其它语言不通用。我们来使用第三方类库序列化成更加通用的格式。这里我们使用<code>Jackson</code>类库。我们需要<code>jackson-core</code>和<code>jackson-databind</code>两个jar包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyJSON</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Student student = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"山水\"</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        <span class=\"comment\">//表示格式化输出，便于阅读</span></span><br><span class=\"line\">        mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class=\"line\">        <span class=\"comment\">//写出到字符串</span></span><br><span class=\"line\">        String str = mapper.writeValueAsString(student);</span><br><span class=\"line\">        <span class=\"comment\">//写出到bytes</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = mapper.writeValueAsBytes(student);</span><br><span class=\"line\">        <span class=\"comment\">//写出到流</span></span><br><span class=\"line\">        mapper.writeValue(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"qwe\"</span>),student);</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它会序列化所有为public的字段，以及有public get/set方法的字段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;山水&quot;,</span><br><span class=\"line\">  &quot;age&quot; : 18</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反序列化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyJSON</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Student student = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"山水\"</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">        ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class=\"line\">        String str = mapper.writeValueAsString(student);</span><br><span class=\"line\">        Student readStu = mapper.readValue(str, Student.class);</span><br><span class=\"line\">        System.out.println(readStu);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">山水=18</span><br></pre></td></tr></table></figure>\n\n<p>同样read方法也可以接受不同参数作为输入。</p>\n<p>它不但可以序列化为json还可以序列化为xml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    XmlMapper mapper = <span class=\"keyword\">new</span> XmlMapper();</span><br><span class=\"line\">    mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class=\"line\">    String str = mapper.writeValueAsString(<span class=\"keyword\">new</span> Student(<span class=\"string\">\"山水\"</span>, <span class=\"number\">18</span>));</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">    Student student1 = mapper.readValue(str, Student.class);</span><br><span class=\"line\">    System.out.println(student1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Student&gt;</span><br><span class=\"line\">  &lt;name&gt;山水&lt;/name&gt;</span><br><span class=\"line\">  &lt;age&gt;18&lt;/age&gt;</span><br><span class=\"line\">&lt;/Student&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">山水=18</span><br></pre></td></tr></table></figure>\n\n<p>还可以转换为二进制的json，也就是MessagePack。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper(<span class=\"keyword\">new</span> MessagePackFactory());</span><br><span class=\"line\">    Student student=<span class=\"keyword\">new</span> Student(<span class=\"string\">\"山水\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">    <span class=\"comment\">//会报错，二进制json不支持此操作</span></span><br><span class=\"line\">    <span class=\"comment\">//String str = mapper.writeValueAsString(student);</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = mapper.writeValueAsBytes(student);</span><br><span class=\"line\">    Student student1 = mapper.readValue(bytes, Student.class);</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">    System.out.println(bytes.length);</span><br><span class=\"line\">    System.out.println(student1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">18</span><br><span class=\"line\">山水=18</span><br></pre></td></tr></table></figure>\n\n<p>普通类就介绍完了，接下来我们看一下容器类的序列化。</p>\n<p>List/Map</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    List&lt;Student&gt; list = Arrays.asList(<span class=\"keyword\">new</span> Student(<span class=\"string\">\"三水\"</span>, <span class=\"number\">18</span>),<span class=\"keyword\">new</span> Student(<span class=\"string\">\"山水2\"</span>,<span class=\"number\">19</span>));</span><br><span class=\"line\">    ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">    mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class=\"line\">    String str = mapper.writeValueAsString(list);</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">    <span class=\"comment\">//List/Map与一般对象不同的是，这里不是传class</span></span><br><span class=\"line\">    List&lt;Student&gt; list2 = mapper.readValue(str, <span class=\"keyword\">new</span> TypeReference&lt;List&lt;Student&gt;&gt;() &#123;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    System.out.println(list2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ &#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;三水&quot;,</span><br><span class=\"line\">  &quot;age&quot; : 18</span><br><span class=\"line\">&#125;, </span><br><span class=\"line\">  &quot;name&quot; : &quot;山水2&quot;,</span><br><span class=\"line\">  &quot;age&quot; : 19</span><br><span class=\"line\">&#125; ]</span><br><span class=\"line\">[三水=18, 山水2=19]</span><br></pre></td></tr></table></figure>\n\n<p>Jackson也可以支持注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties</span>(<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@JsonIgnore</span><span class=\"comment\">//序列化和反序列化不会处理此字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Jackson默认不支持处理引用同一个对象的情况。也就是说如果我们有多个变量引用了同一个对象，那么反序列化的时候这些变量会指向不同的对象。我们可以使用<code>JsonIdentityInfo</code>注解来解决这个问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIdentityInfo</span>(generator = ObjectIdGenerators.IntSequenceGenerator.class,property = <span class=\"string\">\"uid\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Common</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//没有加注解之前</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;one&quot; : &#123;</span><br><span class=\"line\">    &quot;name&quot; : &quot;山水&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;two&quot; : &#123;</span><br><span class=\"line\">    &quot;name&quot; : &quot;山水&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">false</span><br><span class=\"line\">//加了注解之后</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;one&quot; : &#123;</span><br><span class=\"line\">    &quot;uid&quot; : 1,</span><br><span class=\"line\">    &quot;name&quot; : &quot;山水&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;two&quot; : 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n\n<p>它生成了一个UID，在json中<code>two</code>变量引用了uid为1的对象，序列化的时候可以识别。</p>\n<p>Jackson不能处理循环引用，也就是两个对象相互引用，在序列化的时候会出现无限递归的情况。可以通过注解解决。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nameB;</span><br><span class=\"line\">    <span class=\"meta\">@JsonManagedReference</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ClassA classA;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nameA;</span><br><span class=\"line\">    <span class=\"meta\">@JsonBackReference</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ClassB classB;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test6</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    ClassA classA = <span class=\"keyword\">new</span> ClassA();</span><br><span class=\"line\">    classA.nameA=<span class=\"string\">\"A\"</span>;</span><br><span class=\"line\">    ClassB classB = <span class=\"keyword\">new</span> ClassB();</span><br><span class=\"line\">    classB.nameB=<span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">    classA.classB=classB;</span><br><span class=\"line\">    classB.classA=classA;</span><br><span class=\"line\">    ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">    mapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br><span class=\"line\">    String str = mapper.writeValueAsString(classA);</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;nameA&quot; : &quot;A&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Jackson也可以忽略未知字段，也就是json中有而类中没有的字段。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//针对全局</span></span><br><span class=\"line\">mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class=\"line\"><span class=\"comment\">//针对某个类</span></span><br><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties</span>(ignoreUnknown = <span class=\"keyword\">true</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Jackson默认不能处理多态，但是我们可以做如下配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NAME,include = JsonTypeInfo.As.PROPERTY,property = <span class=\"string\">\"type\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@JsonSubTypes</span>(&#123;</span><br><span class=\"line\">        <span class=\"meta\">@JsonSubTypes</span>.Type(value = SmallStudent.class, name = <span class=\"string\">\"small\"</span>),</span><br><span class=\"line\">        <span class=\"meta\">@JsonSubTypes</span>.Type(value = BigStudent.class, name = <span class=\"string\">\"big\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//对父类做以上配置</span></span><br></pre></td></tr></table></figure>\n\n<p>就是告诉父类他有两个子类型，并且在json中添加type字段表示这两个子类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//没加之前</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"students\"</span> : [ &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span> : <span class=\"string\">\"小\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"number\">18</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span> : <span class=\"string\">\"大\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"number\">19</span></span><br><span class=\"line\">  &#125; ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">chapter14</span>.<span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">com</span>.<span class=\"title\">chapter14</span>.<span class=\"title\">Student</span></span></span><br><span class=\"line\"><span class=\"class\">//加了之后</span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"string\">\"students\"</span> : [ &#123;</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span> : <span class=\"string\">\"small\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span> : <span class=\"string\">\"小\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"number\">18</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"type\"</span> : <span class=\"string\">\"big\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span> : <span class=\"string\">\"大\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"age\"</span> : <span class=\"number\">19</span></span><br><span class=\"line\">  &#125; ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">chapter14</span>.<span class=\"title\">SmallStudent</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">com</span>.<span class=\"title\">chapter14</span>.<span class=\"title\">BigStudent</span></span></span><br></pre></td></tr></table></figure>\n\n<p>我们也可以自定义序列化为json后的属性名称。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"名字\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于日期格式，序列化后的可读性差，我们自定义序列化格式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat</span>(pattern = <span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>,timezone = <span class=\"string\">\"GMT+8\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Date my_date;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test8</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    MyDate myDate = <span class=\"keyword\">new</span> MyDate();</span><br><span class=\"line\">    myDate.my_date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">    ObjectMapper mapper = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">    String s = mapper.writeValueAsString(myDate);</span><br><span class=\"line\">    System.out.println(s);</span><br><span class=\"line\">    MyDate date1 = mapper.readValue(s, MyDate.class);</span><br><span class=\"line\">    System.out.println(date1.my_date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加注解前</span></span><br><span class=\"line\">&#123;<span class=\"string\">\"my_date\"</span>:<span class=\"number\">1551790898630</span>&#125;</span><br><span class=\"line\">Tue Mar <span class=\"number\">05</span> <span class=\"number\">21</span>:<span class=\"number\">01</span>:<span class=\"number\">38</span> CST <span class=\"number\">2019</span></span><br><span class=\"line\"><span class=\"comment\">//加了注解后</span></span><br><span class=\"line\">&#123;<span class=\"string\">\"my_date\"</span>:<span class=\"string\">\"2019-03-05 21:00:55\"</span>&#125;</span><br><span class=\"line\">Tue Mar <span class=\"number\">05</span> <span class=\"number\">21</span>:<span class=\"number\">00</span>:<span class=\"number\">55</span> CST <span class=\"number\">2019</span></span><br></pre></td></tr></table></figure>\n\n<p>如果没有默认构造方法，在反序列化时会抛出异常。如果不想定义默认构造方法，那么可以这么写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@JsonCreator</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(@JsonProperty(<span class=\"string\">\"name\"</span>)</span> String name, @<span class=\"title\">JsonProperty</span><span class=\"params\">(<span class=\"string\">\"age\"</span>)</span> <span class=\"keyword\">int</span> age) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["学习"]},{"title":"原型设计模式","url":"https://threewater.xyz/2019/03/04/prototype/","content":"<p>Java中使用原型设计的有Object的<code>clone()</code>,就是对象不需要new来产生对象。对于复杂对象的创建，这很有用。<code>clone()</code>内部是通过本地方法实现的。性能要高很多。适合用来创建一组相似的对象。说到底，就是保存复制一份和当前相似的对象。无论用什么方式创建。但是，用<code>Object.clone()</code>性能时最好的。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"使用RandomAccessFile实现键值对数据库","url":"https://threewater.xyz/2019/03/02/basicDB/","content":"<p><code>RandomAccessFile</code>是更底层更高效文件读取类，他有文件指针的概念，我们可以随意的移动指针，到我们想要读取的位置。它是基于字节操作的。</p>\n<p>我们简单写一个保存学生信息的键值数据库，不考虑并发，不考虑其它数据结构。只是讨论<code>RandomAccessFile</code>的使用</p>\n","categories":["Java"],"tags":["学习"]},{"title":"IO之常用文件的处理","url":"https://threewater.xyz/2019/03/02/IO-advance/","content":"<p>对于属性文件，HTML文件，Excel，CVS日志文件，用字节流和字符流操作将会及其不方便。通过Java的IO以及三方类库，我们很方便的操作这些文件。</p>\n<h1 id=\"属性文件\"><a href=\"#属性文件\" class=\"headerlink\" title=\"属性文件\"></a>属性文件</h1><p>属性文件，就是键值对，键和值之间用<code>=</code>或者<code>:</code>连接，一行代表一个键自对，如果情况只是这样，那么我们完全可以用Read流操作啊，直接读取一行，然后按<code>=</code>或者<code>:</code>split就行了。但是如果键或者值中含有这些特殊字符呢？这样就比较麻烦了。要使用<code>\\</code>表示它是一个特殊字符。Java中有一个单独的类<code>java.util.Properties</code>处理<code>.properties</code>后缀的文件，这个文件不支持中文，对于非ASCII字符需要转成Unicode编码，但是一般IDE可以自动转。在Idea中需要设置一下。我们来看一下如何使用这个类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.properties</span><br><span class=\"line\">name=我</span><br><span class=\"line\">password=这是\\\\密码\\n哦</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyProperties</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        String rootPath = System.getProperty(<span class=\"string\">\"user.dir\"</span>);</span><br><span class=\"line\">        rootPath+=<span class=\"string\">\"/src/com/chapter14/config.properties\"</span>;</span><br><span class=\"line\">        Properties config = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        config.load(<span class=\"keyword\">new</span> FileInputStream(rootPath));</span><br><span class=\"line\">        String name = config.getProperty(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        String password = config.getProperty(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">        System.out.println(password);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CSV日志文件\"><a href=\"#CSV日志文件\" class=\"headerlink\" title=\"CSV日志文件\"></a>CSV日志文件</h1><p>CSV日志文件，一行表示一条记录，一行记录各个字段之间用<code>,</code>分隔。不过这个分隔符可以自己设置，同样，遇到特殊字符用<code>\\</code>加在前面。它支持中文。要读<code>.csv</code>文件需要用到<code>commons-csv</code>包，接下来我们来讨论它的一些用法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCSV</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置字段之间的分隔符</span></span><br><span class=\"line\">        CSVFormat csvFormat = CSVFormat.newFormat(<span class=\"string\">','</span>);</span><br><span class=\"line\">        <span class=\"comment\">//定义引号</span></span><br><span class=\"line\">        csvFormat.withQuote(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">        <span class=\"comment\">//定义空字符串表示</span></span><br><span class=\"line\">        csvFormat.withNullString(<span class=\"string\">\"N/A\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//是否忽略字段间的空白</span></span><br><span class=\"line\">        csvFormat.withIgnoreSurroundingSpaces(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        CSVFormat csvFormat2=CSVFormat.DEFAULT;</span><br><span class=\"line\"></span><br><span class=\"line\">        String rootPath = System.getProperty(<span class=\"string\">\"user.dir\"</span>);</span><br><span class=\"line\">        System.out.println(rootPath);</span><br><span class=\"line\">        rootPath+=<span class=\"string\">\"/src/main/java/com/chapter14/config2.csv\"</span>;</span><br><span class=\"line\">\t    FileReader reader = <span class=\"keyword\">new</span> FileReader(rootPath);</span><br><span class=\"line\">        CSVParser parser = csvFormat.parse(<span class=\"keyword\">new</span> FileReader(rootPath));</span><br><span class=\"line\">        <span class=\"comment\">//CSVRecord表示一条记录，他们都实现了iterable接口</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(CSVRecord record:parser)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(String cell:record)&#123;</span><br><span class=\"line\">                System.out.print(cell+<span class=\"string\">\",\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>commons-csv</code>不但支持读取，还支持写入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">csvReader</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    CSVPrinter printer = <span class=\"keyword\">new</span> CSVPrinter(<span class=\"keyword\">new</span> FileWriter(path),CSVFormat.DEFAULT);</span><br><span class=\"line\">    <span class=\"comment\">//会覆盖原文件中已有的数据</span></span><br><span class=\"line\">    printer.printRecord(<span class=\"string\">\"山水\"</span>,<span class=\"number\">18</span>,<span class=\"string\">\"我是谁\"</span>);</span><br><span class=\"line\">    printer.printRecord(<span class=\"string\">\"她\"</span>,<span class=\"number\">19</span>,<span class=\"string\">\"她是谁\"</span>);</span><br><span class=\"line\">    printer.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Excel\"><a href=\"#Excel\" class=\"headerlink\" title=\"Excel\"></a>Excel</h1><p>对于Excel我们需要使用POI类库，对于<code>.xls</code>文件需要使用<code>HSSFWork</code>。对于<code>.xlsx</code>格式，需要使用<code>XSSFWork</code>类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//读</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    Workbook workbook = WorkbookFactory.create(<span class=\"keyword\">new</span> File(path));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Sheet sheet:workbook)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Row row:sheet)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> age=(<span class=\"keyword\">int</span>) row.getCell(<span class=\"number\">0</span>).getNumericCellValue();</span><br><span class=\"line\">            String name = row.getCell(<span class=\"number\">1</span>).getStringCellValue();</span><br><span class=\"line\">            System.out.println(name+<span class=\"string\">\" \"</span>+age);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String path, List&lt;Student&gt; list)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    HSSFWorkbook workbook = <span class=\"keyword\">new</span> HSSFWorkbook();</span><br><span class=\"line\">    HSSFSheet sheet = workbook.createSheet();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;list.size();i++)&#123;</span><br><span class=\"line\">        HSSFRow row = sheet.createRow(i);</span><br><span class=\"line\">        Student student = list.get(i);</span><br><span class=\"line\">        row.createCell(<span class=\"number\">0</span>).setCellValue(student.getAge());</span><br><span class=\"line\">        row.createCell(<span class=\"number\">1</span>).setCellValue(student.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    workbook.write(<span class=\"keyword\">new</span> File(path));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><p>对于HTML我们可以使用<code>jsoup</code>类库。它支持使用css选择器来选择元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHTML</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        String url=<span class=\"string\">\"https://zouxianmiao.com/category/\"</span>;</span><br><span class=\"line\">        Document document = Jsoup.connect(url).get();</span><br><span class=\"line\">        String cssQuery=<span class=\"string\">\".item-post a\"</span>;</span><br><span class=\"line\">        Elements elements = document.select(cssQuery);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Element element:elements)&#123;</span><br><span class=\"line\">            String text = element.text();</span><br><span class=\"line\">            String href = element.attr(<span class=\"string\">\"href\"</span>);</span><br><span class=\"line\">            System.out.println(text+<span class=\"string\">\"  \"</span>+href);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//也可以采用文件解析</span></span><br><span class=\"line\">Jsoup.parse(<span class=\"string\">\"a.html\"</span>,<span class=\"string\">\"UTF-8\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>理论上这个jsoup配合广度优先搜索就可以做爬虫了。</p>\n<h1 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a>压缩文件</h1><p>Java支持压缩和解压缩。支持<code>zip</code>和<code>gzip</code>。我们需要支持更多格式，可以使用<code>Apache Commons Compress</code>类库。</p>\n<p><code>GZIPOutputStream</code>用来压缩，<code>GZIPInputStream</code>用来解压缩。<code>GZIP</code>只可以压缩一个文件，而<code>ZIP</code>可以压缩多个。</p>\n<p>对于ZIP压缩来说用<code>ZipOutputStream</code>来压缩，要通过<code>putNextEntry(ZipEntry entry)</code>其中<code>ZipEntry</code>的构造参数为文件名。其中<code>ZipOutputStream</code>的构造参数为压缩后文件的绝对路径。</p>\n<p>用<code>ZipOutputStream</code>来解压缩，构造参数为压缩文件的全路径。用<code>getNextEntry()</code>来获取下一个压缩条目。没有返回<code>null</code>获取条目主要的目的是获取条目的文件名。以便于创建解压缩后的文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Gzip</span></span><br><span class=\"line\">\t<span class=\"comment\">//压缩</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">gzip</span><span class=\"params\">(String fileName)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        InputStream in=<span class=\"keyword\">new</span> BufferedInputStream(</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> FileInputStream(fileName));</span><br><span class=\"line\">        fileName+=<span class=\"string\">\".gz\"</span>;</span><br><span class=\"line\">        OutputStream out=<span class=\"keyword\">new</span> GZIPOutputStream(</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> BufferedOutputStream(</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> FileOutputStream(fileName)));</span><br><span class=\"line\">        MyStream.copy(in,out);</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//解压缩</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ungzip</span><span class=\"params\">(String gzipFileName,String ungzipFileName)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        InputStream in=<span class=\"keyword\">new</span> GZIPInputStream(</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> BufferedInputStream(</span><br><span class=\"line\">                       <span class=\"keyword\">new</span> FileInputStream(gzipFileName)));</span><br><span class=\"line\">        OutputStream out=<span class=\"keyword\">new</span> BufferedOutputStream(</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> FileOutputStream(ungzipFileName));</span><br><span class=\"line\">        MyStream.copy(in,out);</span><br><span class=\"line\">        in.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//ZIP</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">zip</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        String path = System.getProperty(<span class=\"string\">\"user.dir\"</span>);</span><br><span class=\"line\">        String zipPath=path+<span class=\"string\">\"/src/main/java/com/chapter14/test.zip\"</span>;</span><br><span class=\"line\">        String rootPath=path+<span class=\"string\">\"/src/main/java/com/chapter14/\"</span>;</span><br><span class=\"line\">        File root=<span class=\"keyword\">new</span> File(rootPath);</span><br><span class=\"line\">        ZipOutputStream zipOutputStream = <span class=\"keyword\">new</span> ZipOutputStream(</span><br><span class=\"line\">                                          <span class=\"keyword\">new</span> BufferedOutputStream(</span><br><span class=\"line\">                                          <span class=\"keyword\">new</span> FileOutputStream(zipPath)));</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(File file:root.listFiles())&#123;</span><br><span class=\"line\">            zipOutputStream.putNextEntry(<span class=\"keyword\">new</span> ZipEntry(file.getName()));</span><br><span class=\"line\">            BufferedInputStream inputStream = <span class=\"keyword\">new</span> BufferedInputStream(</span><br><span class=\"line\">                                              <span class=\"keyword\">new</span> FileInputStream(file));</span><br><span class=\"line\">            MyStream.copy(inputStream,zipOutputStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        zipOutputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//unzip</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unzip</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        String path = System.getProperty(<span class=\"string\">\"user.dir\"</span>);</span><br><span class=\"line\">        String zipPath=path+<span class=\"string\">\"/src/main/java/com/chapter14/test.zip\"</span>;</span><br><span class=\"line\">        String unzip=path+<span class=\"string\">\"/src/main/java/com/chapter14/unzip/\"</span>;</span><br><span class=\"line\">        ZipInputStream zipInputStream = <span class=\"keyword\">new</span> ZipInputStream(</span><br><span class=\"line\">                                        <span class=\"keyword\">new</span> BufferedInputStream(</span><br><span class=\"line\">                                        <span class=\"keyword\">new</span> FileInputStream(zipPath)));</span><br><span class=\"line\">        ZipEntry entry=zipInputStream.getNextEntry();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (entry!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            String name = entry.getName();</span><br><span class=\"line\">            OutputStream out = <span class=\"keyword\">new</span> BufferedOutputStream(<span class=\"keyword\">new</span> FileOutputStream(unzip+name));</span><br><span class=\"line\">            MyStream.copy(zipInputStream,out);</span><br><span class=\"line\">            entry=zipInputStream.getNextEntry();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"builder设计模式","url":"https://threewater.xyz/2019/02/28/builder/","content":"<p>生产一个产品，往往需要很多复杂的步骤。刚开始，产品可能这是一个空壳。我们应该以何时的顺序，合适的内容来构建它。首先，我们需要一个抽象的产品。它包含很多需要初始化的部分，然后我们需要一个然后我们需要一个能够初始化各个部分的工具箱。这个工具箱也可以是抽象的，可以由具体的工具箱实现，有了工具箱，我们还需要一个人来按照一定的顺序来使用工具箱中的工具。</p>\n<p>总的来说：工具箱封装初始化某个部分的细节，人负责封装使用工具箱中工具的顺序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    String part1;</span><br><span class=\"line\">    String part2;</span><br><span class=\"line\">    String part3;</span><br><span class=\"line\">    <span class=\"comment\">//set get .....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//也可以交给子类实例化空壳</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Product product=<span class=\"keyword\">new</span> Product();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">builderPart1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">builderPart2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">builderPart3</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  Product <span class=\"title\">getResult</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//具体工具箱A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteABuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderPart1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        product.setPart1(<span class=\"string\">\"构造第1部分\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderPart2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        product.setPart2(<span class=\"string\">\"构造第2部分\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">builderPart3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        product.setPart3(<span class=\"string\">\"构造第3部分\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//专业人员</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">construct</span><span class=\"params\">(Builder builder)</span></span>&#123;</span><br><span class=\"line\">        builder.builderPart2();</span><br><span class=\"line\">        builder.builderPart3();</span><br><span class=\"line\">        builder.builderPart1();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.getResult();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//客户</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Director director = <span class=\"keyword\">new</span> Director();</span><br><span class=\"line\">        Product product = director.construct(<span class=\"keyword\">new</span> ConcreteABuilder());</span><br><span class=\"line\">        <span class=\"comment\">//use product</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"Java文件基础","url":"https://threewater.xyz/2019/02/28/IO/","content":"<p>Java中操作文件大致可以分为两个流派<code>字节流</code>，<code>字符流</code>。</p>\n<h1 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h1><p>Inputstream/Outputstream </p>\n<p>抽象类，提供编程接口，具体方法由子类高效实现。</p>\n<p>FileInputStream/FileOutputStream</p>\n<p>从文件中读取或者写入文件。调用写入方法后，只是把数据交给你的操作系统。具体什么时候存到硬盘，有你的操作系统决定。如果要确保数据保存到磁盘上，要调用本地方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output.getFD().sync();</span><br></pre></td></tr></table></figure>\n\n<p>ByteArrayInputStream/ByteArrayOutputStream</p>\n<p>把字节数组转换为流这样我们就可像流一样读取字节数组。把输出流转换为字节数组，通过他的toByteArray()方法返回字节数组。这两个类把字节数组加入了流的体系中，而不是仅仅局限于文件。</p>\n<p>BufferedInputStream/BufferedOnputStream</p>\n<p>装饰类，用来装饰流，为流提供缓冲功能。他有一个缓冲区，对于BufferedOnputStream来说。可以调用flush()方法把缓冲区中的文件刷入它装饰的流中。只有对于其它流调用flush方法没有任何效果。一般用FileOutputStream应该套一个这个。</p>\n<p>DataIutputStream/DataOutputStream</p>\n<p>以上都只能操作字节，这两个类可以操作基本类型，支持基本数据类型的写入以及读取。构造方法接受一个已有的流。</p>\n<h2 id=\"关于字节流的一些实用方法\"><a href=\"#关于字节流的一些实用方法\" class=\"headerlink\" title=\"关于字节流的一些实用方法\"></a>关于字节流的一些实用方法</h2><ol>\n<li><p>复制输入流的数据到输入流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">copy</span><span class=\"params\">(InputStream in,OutputStream out)</span> <span class=\"keyword\">throws</span> IOException</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> readbtyes;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((readbtyes=in.read(bytes))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        out.write(bytes,<span class=\"number\">0</span>,readbtyes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>将文件存入字节数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] storeFile2BytesArray(String fileName) <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    BufferedInputStream in = <span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(fileName));</span><br><span class=\"line\">    ByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">    copy(in,out);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> out.toByteArray();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将字节数组写入文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">storeBytesArray2File</span><span class=\"params\">(String fileName,<span class=\"keyword\">byte</span>[] bytes)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">    FileOutputStream out = <span class=\"keyword\">new</span> FileOutputStream(fileName);</span><br><span class=\"line\">    out.write(bytes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h1><p>字符更适合操作文本文件。因为字符可能是一个字节，也可能是多个字节。所以字符流的基本操作单位是<code>char</code>。</p>\n<p>Reader/Writer 抽象类，提供变成接口。关键read/write方法交给子类实现。</p>\n<p>InputStreamReader/OnputStreamWriter。将字节流转换为字符流继承自Reader/Writer。构造函数接收字节流。</p>\n<p>FileReader/FileWriter 从文件中读取/写入文件。</p>\n<p>CharArrayReader/CharArrayWriter 把字符数组转换为Reader流/把流转换为字符数组。</p>\n<p>StringReader/StringWriter 把字符串转换为Reader流/把流转换为字符串。</p>\n<p>BufferedInputStream/BufferednputStream 装饰类，缓冲流，可以读取一行</p>\n<p>PrintWriter 没有相应的reader。构造函数参数可以为writer，outputStream，filename。可以把基本类型和对象的字符串形式 写入目的地。</p>\n<p>PrintStream 几乎与PrintWriter相同，只是构造参数不能为writer，以及同步缓冲区的时间不同。PrintStream会在遇到换行符时同步缓冲区。但是他的write(int i)只能用到前8位，也就是一个字节。</p>\n<p>Scanner 一个扫描器，可以从源解析基本类型以及字符串，其中useDelimiter可以自定义分隔符，默认分隔符为一个空格。</p>\n<h1 id=\"标准流\"><a href=\"#标准流\" class=\"headerlink\" title=\"标准流\"></a>标准流</h1><p>标准流是指System旗下的<code>System.in</code>，<code>c</code>，<code>System.err</code>。</p>\n<p>System.in 是inputStream类型的。默认输入源是键盘。</p>\n<p>System.out默认输出源是屏幕。</p>\n<p>System.err 标准错误流，java所有的错误信息都会输出到这个流。</p>\n<p>标准流有一个特点，它可以重定向。我们把它定向到一个文件或者网络。</p>\n<p>通过<code>System.setXXX</code>进行重定向。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setOut(<span class=\"keyword\">new</span> PrintStream(path));</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"wo\"</span>);<span class=\"comment\">//会输出到path中</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><p>File 既可以表示文件也可以表示目录。</p>\n<p>新建一个File对象不会创建文件，但是<code>createNewFile()</code>方法会在磁盘中创建文件，如果文件已存在，则不会创建。</p>\n<p><code>delete()</code>会删除文件或者目录(空目录)。</p>\n<p>如果File表示目录，那么<code>mkdir</code>可以创建目录，同样如果目录存在，则不会创建。</p>\n<p><code>listFiles()</code>可以列出该目录下所有文件或者目录。他有一个重载方法<code>listFiles(FilenameFilter filter)</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找java文件</span></span><br><span class=\"line\">File[] files = file.listFiles(<span class=\"keyword\">new</span> FilenameFilter() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//dir表示当前遍历到的文件或者目录，name表示文件名或者目录名。</span></span><br><span class=\"line\">    <span class=\"comment\">//返回true表示可以加入结果集</span></span><br><span class=\"line\">    <span class=\"comment\">//返回false不会加入结果集</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File dir, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.endsWith(<span class=\"string\">\".java\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"工厂模式","url":"https://threewater.xyz/2019/02/27/factory/","content":"<h2 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h2><p>不由客户端来决定该创建哪个产品，而是由工厂决定该使用哪个产品。这样，有新产品出现就只要改变工厂的代码，客户代码可以不动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">createProduct</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product1();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SimpleFactory factory = <span class=\"keyword\">new</span> SimpleFactory();</span><br><span class=\"line\">        Product product = factory.createProduct(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//use product</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h2><p>就是有一个工厂，它生产一件产品，但具体生产什么产品，由子工厂决定。这样就把工厂更加细分了。也把产品更加细分了。细分的产品由细分的工厂负责生产。客户端决定使用那个细分产品。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Product <span class=\"title\">factoryMethod</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    private void dosomething()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        Product product = factoryMethod();</span></span><br><span class=\"line\"><span class=\"comment\">//        //with product do something</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Concrete1Factory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">factoryMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Concrete2Factory</span> <span class=\"keyword\">extends</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">factoryMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//客户端决定使用Concrete1Factory来生产细分产品</span></span><br><span class=\"line\">        Factory factory1 = <span class=\"keyword\">new</span> Concrete1Factory();</span><br><span class=\"line\">        Product product = factory1.factoryMethod();</span><br><span class=\"line\">        <span class=\"comment\">//use product</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h2><p>抽象工厂就是可以生产很多产品的工厂，但具体生产什么产品，由子工厂实现。客户可以选择使用哪个子工厂</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ProductA <span class=\"title\">createProductA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ProductB <span class=\"title\">createProductB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AConcrete1Factory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductA <span class=\"title\">createProductA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductB <span class=\"title\">createProductB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AConcrete2Factory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductA <span class=\"title\">createProductA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductB <span class=\"title\">createProductB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//客户端需要使用A,B两种产品，它选择使用AConcrete1Factory来生产</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Factory factory1 = <span class=\"keyword\">new</span> Concrete1Factory();</span><br><span class=\"line\">        Product product = factory1.factoryMethod();</span><br><span class=\"line\">        <span class=\"comment\">//use product</span></span><br><span class=\"line\">        AbstractFactory factory = <span class=\"keyword\">new</span> AConcrete1Factory();</span><br><span class=\"line\">        ProductA productA = factory.createProductA();</span><br><span class=\"line\">        ProductB productB = factory.createProductB();</span><br><span class=\"line\">        <span class=\"comment\">//use productA,B</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"TreeMap源码分析","url":"https://threewater.xyz/2019/02/27/TreeMap/","content":"<p>HashMap是无序的，LinkedHashMap是按插入有序的，他们的读取效率都非常高，根据键找到值的时间复杂度为O(1)，但是他们的遍历输出对于键来说都是无序的。而TreeMap很好的解决了这个痛点，TreeMap内部采用的是二叉排序树，用红黑树保持平衡。添加的时间复杂度为O(n/2)，删除的时间复杂度为O(n/2)，遍历的时间复杂度为O(n/2)。</p>\n<p>构造方法很简单。</p>\n<p>添加方法：</p>\n<p>map为空，就初始化。</p>\n<p>不为空，就找父亲，然后看看比父亲大，还是小。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    Entry&lt;K,V&gt; t = root;</span><br><span class=\"line\">    <span class=\"comment\">//map为空，初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        compare(key, key); <span class=\"comment\">// type (and possibly null) check</span></span><br><span class=\"line\"></span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> Entry&lt;&gt;(key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        size = <span class=\"number\">1</span>;</span><br><span class=\"line\">        modCount++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cmp;</span><br><span class=\"line\">    Entry&lt;K,V&gt; parent;</span><br><span class=\"line\">    <span class=\"comment\">// split comparator and comparable paths</span></span><br><span class=\"line\">    Comparator&lt;? <span class=\"keyword\">super</span> K&gt; cpr = comparator;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cpr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//默认构造方法comparator为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找父亲，t为探针</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            parent = t;</span><br><span class=\"line\">            cmp = k.compareTo(t.key);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                t = t.left;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                t = t.right;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t.setValue(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (t != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = <span class=\"keyword\">new</span> Entry&lt;&gt;(key, value, parent);</span><br><span class=\"line\">    <span class=\"comment\">//看看比父亲大还是小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        parent.left = e;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        parent.right = e;</span><br><span class=\"line\">    <span class=\"comment\">//红黑树调整</span></span><br><span class=\"line\">    fixAfterInsertion(e);</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除方法：</p>\n<p>如果他有两个孩子，则找后继，找到的后继没有左孩，所以replacement赋值会赋值为后继的右子树。</p>\n<p>然后要删除这个后继。就变成了只有右孩的情况。</p>\n<p>总之，先把有两个孩子的情况，转变为一个孩子，然后进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteEntry</span><span class=\"params\">(Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果只有一个孩子，则这部分代码不执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.left != <span class=\"keyword\">null</span> &amp;&amp; p.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; s = successor(p);</span><br><span class=\"line\">        p.key = s.key;</span><br><span class=\"line\">        p.value = s.value;</span><br><span class=\"line\">        p = s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//repalcement表示要拼接的部分</span></span><br><span class=\"line\">    <span class=\"comment\">//如果左孩为空，则replacement等于右孩</span></span><br><span class=\"line\">    <span class=\"comment\">//如果左孩不为空，则replacement等于左孩</span></span><br><span class=\"line\">    Entry&lt;K,V&gt; replacement = (p.left != <span class=\"keyword\">null</span> ? p.left : p.right);</span><br><span class=\"line\">\t<span class=\"comment\">//表明左孩或者右孩不为空，要把repalcement拼接到parent上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (replacement != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Link replacement to parent</span></span><br><span class=\"line\">        replacement.parent = p.parent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.parent == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            root = replacement;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == p.parent.left)</span><br><span class=\"line\">            p.parent.left  = replacement;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            p.parent.right = replacement;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Null out links so they are OK to use by fixAfterDeletion.</span></span><br><span class=\"line\">        p.left = p.right = p.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Fix replacement</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.color == BLACK)</span><br><span class=\"line\">            fixAfterDeletion(replacement);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p.parent == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// return if we are the only node.</span></span><br><span class=\"line\">        root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//右孩为空，由于前面左孩也为空。所以可以直接删除</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//  No children. Use self as phantom replacement and unlink.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.color == BLACK)</span><br><span class=\"line\">            fixAfterDeletion(p);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == p.parent.left)</span><br><span class=\"line\">                p.parent.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p == p.parent.right)</span><br><span class=\"line\">                p.parent.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            p.parent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找后继节点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &lt;K,V&gt; TreeMap.<span class=\"function\">Entry&lt;K,V&gt; <span class=\"title\">successor</span><span class=\"params\">(Entry&lt;K,V&gt; t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//map为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//右子树不为空，找右子树中最左的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; p = t.right;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p.left != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p = p.left;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//右子树为空，找父节点，知道父节点为空或者ch是父节点的左孩子。为止。</span></span><br><span class=\"line\">        <span class=\"comment\">//为空表示，已经是最大。返回null</span></span><br><span class=\"line\">        Entry&lt;K,V&gt; p = t.parent;</span><br><span class=\"line\">        Entry&lt;K,V&gt; ch = t;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; ch == p.right) &#123;</span><br><span class=\"line\">            ch = p;</span><br><span class=\"line\">            p = p.parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["学习"]},{"title":"linkedHashMap源码分析","url":"https://threewater.xyz/2019/02/26/linkedHashMap/","content":"<p>LinkedHashMap继承自HashMap，继承图就不画了</p>\n<p>他有一个关键的内部类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">HashMap</span>.<span class=\"title\">Node</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    Entry&lt;K,V&gt; before, after;</span><br><span class=\"line\">    Entry(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(hash, key, value, next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Entry他本身是一个Node，也就是说他本身是一个单向链表。</p>\n<p>他还有before和after，也就说它还是一个双向链表，类似于这样的结构。</p>\n<p>每添加一个元素，tail指针就会重新指向。红线为after，灵魂画手。</p>\n<img src=\"/2019/02/26/linkedHashMap/1.png\">\n\n<p>LinkHashMap只是重写了HashMap的一些钩子方法。</p>\n<p>它还重写了父类很重要的newNode：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Node&lt;K,V&gt; <span class=\"title\">newNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> </span>&#123;</span><br><span class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class=\"line\">    linkNodeLast(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个newNode中，它用Entry代替了父类的Node节点。父类引用指向子类对象。我们来看一下linkNodeLast方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkNodeLast</span><span class=\"params\">(LinkedHashMap.Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class=\"line\">    tail = p;</span><br><span class=\"line\">    <span class=\"comment\">//刚开始tail为空，所以last也为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (last == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        head = p;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        p.before = last;</span><br><span class=\"line\">        last.after = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这个方法只是对子类Entry的特殊处理，也就是说初始化他的before，after指针。使它变成双向链表</p>\n<p>在HashMap中删除方法也设置了钩子方法<code>afterNodeRemoval</code>，子类重写了这个方法。也就是多态了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//清空所有可能指向该Node的节点，这样就让GC处理</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterNodeRemoval</span><span class=\"params\">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class=\"comment\">// unlink</span></span><br><span class=\"line\">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class=\"line\">        (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class=\"line\">    p.before = p.after = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//前面指针为空，说明他是头节点。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        head = a;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        b.after = a;</span><br><span class=\"line\">    <span class=\"comment\">//说明他是尾节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        tail = b;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        a.before = b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于遍历。与HashMap的实现结构一样。有一个LinkedHashIterator：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedHashIterator</span> </span>&#123;</span><br><span class=\"line\">        LinkedHashMap.Entry&lt;K,V&gt; next;</span><br><span class=\"line\">        LinkedHashMap.Entry&lt;K,V&gt; current;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> expectedModCount;</span><br><span class=\"line\">    \t<span class=\"comment\">//构造方法，使next=头节点</span></span><br><span class=\"line\">        LinkedHashIterator() &#123;</span><br><span class=\"line\">            next = head;</span><br><span class=\"line\">            expectedModCount = modCount;</span><br><span class=\"line\">            <span class=\"comment\">//当前节点等于空</span></span><br><span class=\"line\">            current = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> next != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> LinkedHashMap.<span class=\"function\">Entry&lt;K,V&gt; <span class=\"title\">nextNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            LinkedHashMap.Entry&lt;K,V&gt; e = next;</span><br><span class=\"line\">            <span class=\"comment\">//如果遍历过程中结构发生改变，抛出异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NoSuchElementException();</span><br><span class=\"line\">            current = e;</span><br><span class=\"line\">            next = e.after;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; p = current;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (modCount != expectedModCount)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</span><br><span class=\"line\">            <span class=\"comment\">//清除引用，好让GC去干</span></span><br><span class=\"line\">            current = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            K key = p.key;</span><br><span class=\"line\">            <span class=\"comment\">//调用父类的removeNode方法，父类方法含有钩子方法，所以这个节点会被删除</span></span><br><span class=\"line\">            removeNode(hash(key), key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//同步结构</span></span><br><span class=\"line\">            expectedModCount = modCount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>心得：整个LinkedHashMap没有实现什么方法，有两个关键点：</p>\n<ol>\n<li>重写了父类的钩子方法。</li>\n<li>继承了父类的Node，扩展了两个指针。然后在钩子方法中对扩展的地方进行实现。</li>\n<li>由于重写了继承了Node，所以自然要重写newNode方法。这也是我们日常开发中需要注意的。</li>\n<li>这也解释了为什么HashMap中newNode这么简单也要抽成一个方法了。为子类考虑。</li>\n</ol>\n","categories":["Java"],"tags":["学习"]},{"title":"单例设计模式","url":"https://threewater.xyz/2019/02/25/singleton/","content":"<h2 id=\"实现思想\"><a href=\"#实现思想\" class=\"headerlink\" title=\"实现思想\"></a>实现思想</h2><ol>\n<li>让构造函数私有</li>\n<li>提供静态方法返回实例</li>\n<li>保证内存中只有唯一实例</li>\n</ol>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//饿汉式 线程安全，牺牲内存</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton1 my_instance=<span class=\"keyword\">new</span> Singleton1();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton1</span> <span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton1 <span class=\"title\">getMy_instance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> my_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//懒汉式，线程不安全，内存利用率高</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton2 my_instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton2</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton2 <span class=\"title\">getMy_instance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(my_instance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            my_instance=<span class=\"keyword\">new</span> Singleton2();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> my_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//懒汉式，线程安全，内存利用效率高，性能低</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton3 my_instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton3</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton3 <span class=\"title\">getMy_instance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(my_instance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            my_instance=<span class=\"keyword\">new</span> Singleton3();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> my_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//懒汉式，线程不安全，内存利用高</span></span><br><span class=\"line\"><span class=\"comment\">//这个其实和第二个单例没区别</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton4 my_instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton4</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton4 <span class=\"title\">getMy_instance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(my_instance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton4.class)&#123;</span><br><span class=\"line\">                my_instance=<span class=\"keyword\">new</span> Singleton4();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> my_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//懒汉式，线程安全，性能高，内存利用率高</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton5 my_instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton5</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton5 <span class=\"title\">getMy_instance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(my_instance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton5.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(my_instance==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    my_instance=<span class=\"keyword\">new</span> Singleton5();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> my_instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//静态内部类实现，只有当getMy_instance被调用时静态内部类才会加载</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton6</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton6</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerSingleton6</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton6 MY_INSTANCE=<span class=\"keyword\">new</span> Singleton6();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton6 <span class=\"title\">getMy_instance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> InnerSingleton6.MY_INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//枚举实现，算是最简洁的了</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span>  Singleton7 &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String item;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItem</span><span class=\"params\">(String item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton7 singleton1=Singleton7.INSTANCE;</span><br><span class=\"line\">        singleton1.setItem(<span class=\"string\">\"我\"</span>);</span><br><span class=\"line\">        Singleton7 singleton2=Singleton7.INSTANCE;</span><br><span class=\"line\">        singleton2.setItem(<span class=\"string\">\"他\"</span>);</span><br><span class=\"line\">        System.out.println(singleton1.getItem());<span class=\"comment\">//他</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习","设计模式"]},{"title":"HashMap源码分析","url":"https://threewater.xyz/2019/02/25/HashMap/","content":"<p>同样我们来看一下hashmap的继承体系</p>\n<img src=\"/2019/02/25/HashMap/3.svg\">\n\n<p>hashMap的继承体系很简单。</p>\n<p>Map接口定义功能，同时它还有一个内部接口Entry，表示一个键值对。</p>\n<p>AbstractMap提供一些方法的默认实现，这些默认实现都是基于entrySet()实现的，然后内部用迭代器实现。所以时间复杂度很高为O(n)。由于迭代器不能添加元素，所以put()方法没有实现，而是抛出了一个异常，我觉得put方法应该像entrySet()一样声明为abstract，这样好让子类实现。但是它直接抛出异常，这样，如果不看源码，或者文档，根本不知道它实现了没有。</p>\n<p>接下来我们看HashMap。</p>\n<p>在HashMap中有几个用的很多的属性：</p>\n<ol>\n<li>threshold：阈值，如果map中元素的个数超过了这个阈值，就会扩容。计算方法loadFactor*conpacity</li>\n<li>loadFactor：负载因子，用来计算阈值，默认为0.75。也就是说如果使用率达到了%75就会扩容。</li>\n<li>DEFAULT_INITIAL_CAPACITY：默认初始化容量。默认值为<code>1&lt;&lt;4</code> 直接写16不行吗！。</li>\n<li>Node&lt;K,V&gt;[] table：真正存储元素的地方，是一个数组。</li>\n</ol>\n<p>我们从使用的过程说起：</p>\n<p>构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//就是设置了一下负载因子</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\"comment\">// all other fields defaulted</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//设置负载因子，以及阈值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后添加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//就是调用key本身的hashcode方法，如果key没有重写，那么就会调用object的hash方法。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h;</span><br><span class=\"line\">    <span class=\"comment\">//key为空的话hash值为0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//看一下重要的putVal方法，部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> V <span class=\"title\">putVal</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">boolean</span> onlyIfAbsent, <span class=\"keyword\">boolean</span> evict)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//这个判断相当于判断table是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"keyword\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//table一开始为空</span></span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//数组刚刚开辟内存，一定为空，条件成立</span></span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//表明产生了冲突，从Node的结构中我们知道，java使用拉链法解决冲突的。</span></span><br><span class=\"line\">        <span class=\"comment\">//看后面有冲突的情况</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//结构发生改变</span></span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">//如果大于阈值，重新调整大小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    <span class=\"comment\">//回调函数，留给linkedhashmap使用</span></span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"comment\">//table分配内存之后，原来的元素一定为空</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//resize方法部分</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"comment\">//刚开始oldTab为空</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCap = (oldTab == <span class=\"keyword\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"comment\">//如果new HashMap时没有指定容量，那么oldThr也为空</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldThr = threshold;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//设定新容量</span></span><br><span class=\"line\">    newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">    <span class=\"comment\">//新阈值</span></span><br><span class=\"line\">    newThr = (<span class=\"keyword\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"comment\">//为hash table初始化</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> Node[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从resize方法中我们可以看到，直到put的时候，table数组才开始开辟内存，这种懒加载的方式，保证了内存的高效利用。</p>\n<p>有冲突的情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//没有冲突的情况，实现复杂度为O(1)，有冲突为O(n)</span></span><br><span class=\"line\">Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\"><span class=\"comment\">//链表第一个元素，如果hash值相同，key也相同，跳到1位置，进行替换</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">    ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">    e = p;</span><br><span class=\"line\"><span class=\"comment\">//hash相同，key不同</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> binCount = <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找到了为链表中为空的位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            p.next = newNode(hash, key, value, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                treeifyBin(tab, hash);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//寻找过程中发现hash值相同，key也相同的情况，同样跳到1位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">//继续寻找</span></span><br><span class=\"line\">        p = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1位置，替换value</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">    V oldValue = e.value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        e.value = value;</span><br><span class=\"line\">    <span class=\"comment\">//留给子类的回调函数</span></span><br><span class=\"line\">    afterNodeAccess(e);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可见，添加方法在没有冲突的情况下，效率最高，要尽量避免冲突。</p>\n<p>get方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = getNode(hash(key), key)) == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">getNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"keyword\">int</span> n; K k;</span><br><span class=\"line\">    <span class=\"comment\">//判断表是否为空表</span></span><br><span class=\"line\">    <span class=\"comment\">//判断链表头一个元素是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//检查是不是就是头一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">//如果不是链表头元素，则遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到返回</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>删除方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (e = removeNode(hash(key), key, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>)) == <span class=\"keyword\">null</span> ?</span><br><span class=\"line\">        <span class=\"keyword\">null</span> : e.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 如果macthvalue为真，则需比较value值是否相等，不相等则不删除</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> matchValue 为假，忽略value值，直接删除</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> movable 针对treeNode使用的</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">removeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> hash, Object key, Object value,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                               <span class=\"keyword\">boolean</span> matchValue, <span class=\"keyword\">boolean</span> movable)</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"keyword\">int</span> n, index;</span><br><span class=\"line\">    <span class=\"comment\">//保证table不空，且要删除节点所在链表不空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"keyword\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (p = tab[index = (n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; node = <span class=\"keyword\">null</span>, e; K k; V v;</span><br><span class=\"line\">        <span class=\"comment\">//如果是要删除的节点是链表的头节点，则node=p(就是头节点)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            node = p;</span><br><span class=\"line\">        <span class=\"comment\">//如果不是头节点，则循环找，找到了node=要删除的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((e = p.next) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//linkedHashMap 先不管</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key ||</span><br><span class=\"line\">                         (key != <span class=\"keyword\">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class=\"line\">                        node = e;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//p表示前一个元素，后面在while条件里面e会后移</span></span><br><span class=\"line\">                    p = e;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//保证删除的节点不为空，如果必要，保证其值相等</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class=\"line\">                             (value != <span class=\"keyword\">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class=\"keyword\">this</span>, tab, movable);</span><br><span class=\"line\">            <span class=\"comment\">//如果删除的头节点，则移动指针</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node == p)</span><br><span class=\"line\">                tab[index] = node.next;</span><br><span class=\"line\">            <span class=\"comment\">//不是头节点，移动前面节点的next指针</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                p.next = node.next;</span><br><span class=\"line\">            <span class=\"comment\">//之前自加，很细节</span></span><br><span class=\"line\">            ++modCount;</span><br><span class=\"line\">            --size;</span><br><span class=\"line\">            afterNodeRemoval(node);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个删除过程，删除节点的next指针还是指向下一个元素，并没有置为空，不知道为什么。</p>\n<p>在hashMap的遍历中，还有一个重要的类和方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashIterator</span> </span>&#123;</span><br><span class=\"line\">    Node&lt;K,V&gt; next;        <span class=\"comment\">// next entry to return</span></span><br><span class=\"line\">    Node&lt;K,V&gt; current;     <span class=\"comment\">// current entry</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> expectedModCount;  <span class=\"comment\">// for fast-fail</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index;             <span class=\"comment\">// current slot</span></span><br><span class=\"line\">    HashIterator() &#123;</span><br><span class=\"line\">        expectedModCount = modCount;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] t = table;</span><br><span class=\"line\">        current = next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//由于hash表有些选项可能为空，这里先找到第一个不为空的。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"keyword\">null</span> &amp;&amp; size &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">// advance to first entry</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;&#125; <span class=\"keyword\">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title\">nextNode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Node&lt;K,V&gt;[] t;</span><br><span class=\"line\">        Node&lt;K,V&gt; e = next;</span><br><span class=\"line\">        <span class=\"comment\">//next递进，如果为空了，则换下一个不为空的表项。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((next = (current = e).next) == <span class=\"keyword\">null</span> &amp;&amp; (t = table) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;&#125; <span class=\"keyword\">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//返回结点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后续有很多类继承它，同时实现Iterator接口，然后封装了一下nextNode方法。    </p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>当hash表存满75%时，会进行扩容，扩容为当前大小的2倍。</p>\n<p>只有在put时才会为table分配内存。</p>\n<p>作者很喜欢在判断的时候进行赋值，虽然代码更短，但看起来不太友好。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"AbstractSequentialList抽象类","url":"https://threewater.xyz/2019/02/24/AbstractSequentialList/","content":"<p>AbstractSequentialList类，是AbstractList的实现类，它重写了add，get()，remove()方法，都基于迭代器实现。</p>\n<p>但是它没有实现迭代器方法，要求继承的类自己实现这个迭代器。</p>\n<p>我们先来看一个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ListIterator&lt;E&gt; e = listIterator(index);</span><br><span class=\"line\">        E oldVal = e.next();</span><br><span class=\"line\">        e.set(element);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchElementException exc) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span>+index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样对于底层用链表实现的List访问起来更高效一点。如果底层是用数组实现，那么还是继承AbstractList比较好。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"LinkedList源码分析","url":"https://threewater.xyz/2019/02/24/linkedList/","content":"<p>LinkedList采用链表实现，在头部和尾部的操作很高效，删除和添加都要比ArrayList高效。内存也可以动态的分配，不像ArrayList那样扩大1.5倍。但随机访问不如ArrayList。</p>\n<p>我们先来看一下继承体系图：</p>\n<img src=\"/2019/02/24/linkedList/2.svg\">\n\n<p>我们首先来介绍一下类和接口：</p>\n<a href=\"/2019/02/24/deque/\" title=\"deque\">deque</a>表示双端队列。\n\n<a href=\"/2019/02/24/queue/\" title=\"queue\">queue</a>表示队列，FIFO。\n\n<a href=\"/2019/02/24/cloneable/\" title=\"cloneable\">cloneable</a>一个标志接口，表示该对象可以被复制。\n\n<a href=\"/2019/02/24/serializable/\" title=\"serializable\">serializable</a>一个标志接口，表示该对象可以被序列化。\n\n<a href=\"/2019/02/24/AbstractSequentialList/\" title=\"AbstractSequentialList\">AbstractSequentialList</a>对`AbstractList`的一些关键方法用ListIterator进行了重写，要求其子类提供一个ListIterator的实现类。\n\n<p>要实现以上方法，它自定义了一些关键的private方法，以上接口方法的实现都调用了这些方法。</p>\n<p><code>linkLast</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkLast</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; l = last;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(l, e, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    last = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == <span class=\"keyword\">null</span>)<span class=\"comment\">//第一个节点</span></span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        l.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>linkFirst</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">linkFirst</span><span class=\"params\">(E e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; f = first;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(<span class=\"keyword\">null</span>, e, f);</span><br><span class=\"line\">    first = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>)<span class=\"comment\">//第一个节点</span></span><br><span class=\"line\">        last = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        f.prev = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>linkBefore</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//添加到succ的前面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">linkBefore</span><span class=\"params\">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert succ != null;</span></span><br><span class=\"line\">    <span class=\"comment\">//保存前继引用</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; newNode = <span class=\"keyword\">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class=\"line\">    succ.prev = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred == <span class=\"keyword\">null</span>)<span class=\"comment\">//succ是第一个节点</span></span><br><span class=\"line\">        first = newNode;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        pred.next = newNode;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>unlink</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">E <span class=\"title\">unlink</span><span class=\"params\">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert x != null;</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> E element = x.item;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; next = x.next;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//x是第一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prev == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        first = next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        prev.next = next;</span><br><span class=\"line\">        x.prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//x是最后一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        last = prev;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        next.prev = prev;</span><br><span class=\"line\">        x.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    x.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>writeObject</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//序列化的时候会调用这个方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeObject</span><span class=\"params\">(java.io.ObjectOutputStream s)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> java.io.IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Write out any hidden serialization magic</span></span><br><span class=\"line\">    s.defaultWriteObject();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Write out size</span></span><br><span class=\"line\">    s.writeInt(size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Write out all elements in the proper order.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;E&gt; x = first; x != <span class=\"keyword\">null</span>; x = x.next)</span><br><span class=\"line\">        s.writeObject(x.item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["学习"]},{"title":"serializable接口","url":"https://threewater.xyz/2019/02/24/serializable/","content":"<p>serializable接口，就是可以实现了这个接口的类可以序列化，也就是说这个对象不仅可以存在内存中，也可以存在于磁盘，或者网络传输中。其实我们没有这个接口也可以实现序列化，比如我们可以用xml或者其它配置文件，但是我们自己实现总是会受限制，比如受限于xml技术就不能使用json了。java为我们提供了序列化实现。这样我们的序列化类就是跨操作系统的，不受某种技术限制的了。    </p>\n<p>我们来看下Serializable来使用。</p>\n<p>通过流把对象序列化到磁盘。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;</span><br><span class=\"line\">    <span class=\"comment\">//get set 方法省略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySerializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String s=<span class=\"string\">\"D:/test/s.txt\"</span>;</span><br><span class=\"line\">        ObjectInputStream objectInputStream = <span class=\"keyword\">new</span> ObjectInputStream(<span class=\"keyword\">new</span> FileInputStream(s));</span><br><span class=\"line\">        Box2 box2 = (Box2)objectInputStream.readObject();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"box2 read addr\"</span>+box2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"int[] addr read\"</span>+box2.getArr());</span><br><span class=\"line\">        System.out.println(box2.getArr()[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        String s=<span class=\"string\">\"D:/test/s.txt\"</span>;</span><br><span class=\"line\">        ObjectOutputStream objectOutputStream=<span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(s));</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        arr[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        Box2 box2 = <span class=\"keyword\">new</span> Box2(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"box2 addr\"</span>+box2);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"int[] addr\"</span>+box2.getArr());</span><br><span class=\"line\">        objectOutputStream.writeObject(box2);</span><br><span class=\"line\">        System.out.println(box2.getArr()[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        write();</span><br><span class=\"line\">        read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出结果</span><br><span class=\"line\">box2 addrcom.test.Box2@1b6d3586</span><br><span class=\"line\">int[] addr[I@4554617c</span><br><span class=\"line\">1</span><br><span class=\"line\">box2 read addrcom.test.Box2@5fd0d5ae</span><br><span class=\"line\">int[] addr read[I@2d98a335</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<p>对象和对象的引用都是不同地址，说明是一种类似于深拷贝的形式。</p>\n<p>我们也可以用<code>transient</code>关键字来决定哪个字段不会被序列化。</p>\n<p>干预序列化。</p>\n<p>可以在类中添加<code>private void writeObject(ObjectOutputStream out)</code>或者<code>private void readObject(ObjectInputStream in)</code>来干预序列化，这样在执行ObjectOutputStream的writeObject的方法时会检查该类有没有writeObject方法，如果有，那么就调用本类的writeObject方法。但是我觉得这种方法不太优雅，因为如果writeObject方法名字写错了那就完蛋啦，也没有接口规定一下。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"queue先进先出队列","url":"https://threewater.xyz/2019/02/24/queue/","content":"<p>Queue表示队列的意思，从尾部存入，从头部取出，先进先出。</p>\n<p>它继承自collection，表明它本质是一个集合，它是一个接口，在这里它只是提供一种队列的抽象。</p>\n<p>同时他有自己的一些方法<code>add(E)</code>(重写自collection)，<code>element()</code> <code>offer(E)</code> <code>peek()</code> <code>poll()</code> <code>remove()</code></p>\n<p>正如官方文章所说我们所说，我们可以把这些方法大致分类入下：</p>\n<img src=\"/2019/02/24/queue/queue.PNG\">\n<p><code>examine</code>表示从头部取出，但不移除，但是当队列为空的时候，element会抛异常，peek则会返回空</p>\n<p><code>remove</code>表示从头部取出，且会移除，为空时remove会抛出异常，poll返回空</p>\n<p><code>insert</code>表示从尾部插入，add没有添加进去会抛出异常，offer则返回false，所以如果队列有容量限制，最好用add，因为然万一添加失败，我们至少能感知到。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"deque双端队列","url":"https://threewater.xyz/2019/02/24/deque/","content":"<p>Deque接口，它继承自queue，表明它本质上是一个队列，说明他也可以作为队列使用，也就是先进先出。但是它表示的时双端队列，也就说可以从头部存取，也可以从尾部存取，所以它很强大。这样如果你方法用的好，它甚至可以作为stack(栈)来使用。它重写了queue的所有方法，同时也添加了自己的一些方法</p>\n<p>我们来看一下文档</p>\n<img src=\"/2019/02/24/deque/deque1.PNG\">\n<p>可以看到他和queue的方法有一定的对称性。同样，如果该队列有容量限制，用抛出异常的方法比较好。</p>\n<img src=\"/2019/02/24/deque/deque2.PNG\">\n<p>可以看到，如果是deque，由于它继承了queue，所以使用add()和addLast()方法是用一样的。</p>\n<img src=\"/2019/02/24/deque/deque3.PNG\">\n<p>同样，如果要把deque当作栈来使用，那么以上方法等价。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"cloneable接口","url":"https://threewater.xyz/2019/02/24/cloneable/","content":"<p>Cloneable接口，cloneable接口一般与object的clone方法相关，clone是本地方法，如果类没有实现cloneable接口，那么clone方法会抛出异常，而且clone方法是proptected的，一般都要重写它，不然其它包无法使用它。</p>\n<p>以上，说明该接口只是一个标志性接口，标志某个类是否可以被克隆。既然是克隆，那么就涉及到了深克隆，和浅克隆。object的clone方法默认实现是浅克隆。</p>\n<p>浅克隆：</p>\n<p>克隆的对象地址和原对象不同，但是对象里面的实例变量引用的地址相同，我们看一下是不是真的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String item;</span><br><span class=\"line\">    <span class=\"comment\">//省略get set方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Box box;</span><br><span class=\"line\">\t<span class=\"comment\">//省略get set方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyObject</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"my constructor\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        MyObject myObject = <span class=\"keyword\">new</span> MyObject();</span><br><span class=\"line\">        myObject.setBox(<span class=\"keyword\">new</span> Box(<span class=\"string\">\"我\"</span>));</span><br><span class=\"line\">        MyObject clone=(MyObject)myObject.clone();</span><br><span class=\"line\">        System.out.println(myObject.getBox());</span><br><span class=\"line\">        System.out.println(clone.getBox());</span><br><span class=\"line\">        clone.getBox().setItem(<span class=\"string\">\"他\"</span>);</span><br><span class=\"line\">        System.out.println(myObject.getBox()==clone.getBox());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">my constructor</span><br><span class=\"line\">com.test.Box@1b6d3586</span><br><span class=\"line\">com.test.Box@1b6d3586</span><br><span class=\"line\">他</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，浅克隆只是复制地址的引用。</p>\n<p>深克隆：</p>\n<p>就是克隆对象和原对象的地址不同，里面的实例变量的引用也不同。</p>\n<p>深克隆只能自己实现，自己手动创建实例对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> MyObject <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">    MyObject clone=(MyObject) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    Box box=<span class=\"keyword\">new</span> Box(clone.getBox().getItem());</span><br><span class=\"line\">    <span class=\"comment\">//手动new实例，然后手动赋值</span></span><br><span class=\"line\">    clone.setBox(box);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过构造函数设置，其实这个构造函数也只是进行一种封装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyObject</span><span class=\"params\">(Box box)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.box=<span class=\"keyword\">new</span> Box(box.getItem());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["学习"]},{"title":"List源码分析","url":"https://threewater.xyz/2019/02/15/List/","content":"<p>List只是表示插入有序且可重复的集合。我们来看下它的方法：</p>\n<p>其中有很多方法只是单纯的重写，然后注释不同，不理解为什么。可能作者希望从概念上区别于collection？，所以进行了重写？或者为设计模式考虑？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//重写方法，表明元素要添加到list尾部</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//重写方法，指明添加集合c中的所有元素到list尾部</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//添加元素到指定位置，所有元素后移</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//添加集合c中的所有元素到指定位置，所有元素后移</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">addAll</span><span class=\"params\">(<span class=\"keyword\">int</span> index,Collection&lt;? extends E&gt; c)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回指定位置的元素</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回元素第一次出现的位置，没有返回-1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回元素最后一次出现的位置，没有返回-1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回ListIterator比Iterator更强大，支持从后遍历，获取遍历位置，以及修改元素</span></span><br><span class=\"line\">    <span class=\"function\">ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//ListIterator，从指定位置开始，初次调用next时位置为index，调用previous时位置为index-1</span></span><br><span class=\"line\">    <span class=\"function\">ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//移除指定位置的元素，其余元素前移</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//替换指定位置处的元素</span></span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回list的子集，只是引用，所以sublist的更改会影响原list</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;E&gt; <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，List增加很多关于<code>index</code>的操作，这也表明它有序的身份。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"Collection源码分析","url":"https://threewater.xyz/2019/02/15/collection/","content":"<p>collection接口表示的是一种数据结构：<code>集合</code>，无序且重复元素的集合。</p>\n<p>我们来看一下源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Collection</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">   \t<span class=\"comment\">//返回元素的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断collection是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否包含某个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回一个迭代器</span></span><br><span class=\"line\">    <span class=\"function\">Iterator&lt;E&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//把collection转成数组，要求重新分配内存，而不是返回引用</span></span><br><span class=\"line\">    Object[] toArray();</span><br><span class=\"line\">    <span class=\"comment\">//如果a够大，就放入a，否则返回一个数组。无论是哪两种方式，都只是引用，没有复制</span></span><br><span class=\"line\">    &lt;T&gt; T[] toArray(T[] a);</span><br><span class=\"line\">    <span class=\"comment\">//添加元素 成功返回true，以下同理</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//删除元素 </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否全部包含c中的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">containsAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//把集合c中所有的元素添加到本集合中</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> addAll（Collection&lt;? extends E&gt; c)</span><br><span class=\"line\">    <span class=\"comment\">//删除本集合中与c相同的元素  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//保留本集合中与c相同的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//删除集合中所有元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//判断o是否与当前集合相等</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回当前集合的hash值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//默认方法省略...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到。Collection只是提供集合的抽象，具体实现留给儿子们。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"了解iterable接口","url":"https://threewater.xyz/2019/02/15/iterable/","content":"<p>对于一个集合来说，如果我们要遍历这个list，我们必须知道，当前遍历到了哪里，下一次又该遍历哪里。<br>也就说我们需要两个变量来保存这个状态，但是我们要重用遍历这个内容，这两个变量就应该跟着这个遍历功能走。<br>也就是说来了一个集合，我们就要初始化这个变量，然后开始遍历，但是如果那个list发生了改变，我们是不知道的。<br>例如有这样一次遍历<br><code>1 2 3 4</code>如果我们在遍历2时(此时index=1，下一个index是2)决定把1删除，数组就变成了<code>2 3 4</code>,此时数组长度变成了3，<br>下一次遍历来临时(此时index=2)，但是这时index指向的是<code>4</code>这个元素了，元素<code>3</code>被跳过了。也就是说，<br>删除前面的元素，或者在前面添加，会对后面的元素造成不可预知的风险，但是对后面的元素操作，不会造成影响。<br>因此在遍历时，java禁止了对数组的删除(添加)操作，但是如果迭代器能够感知这种操作呢？那就只有一种办法，<br>就是通过迭代器删除，才能感知这种操作，但是Java的迭代器，也仅仅是支持删除当前遍历的元素。不支持删除前面的元素</p>\n<h3 id=\"先来看看接口声明\"><a href=\"#先来看看接口声明\" class=\"headerlink\" title=\"先来看看接口声明\"></a>先来看看接口声明</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//java8默认方法省略...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">   \t<span class=\"comment\">//java8默认方法省略...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们知道foreach内部就是调用iterator实现的。</p>\n<p>为什么要声明两个接口呢，我们完全可以这样实现list：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接实现iterator。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">Character</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String str=<span class=\"string\">\"我是山水\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cursor=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.length()-cursor&gt;<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Character <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str.charAt(cursor++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    \tList list = <span class=\"keyword\">new</span> List();</span><br><span class=\"line\">        <span class=\"comment\">//此处代码只与iterator有关，我们完全可以包装一下，让它变成foreach的简洁结构</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (list.hasNext())&#123;</span><br><span class=\"line\">            Character next = itr1.next();</span><br><span class=\"line\">            System.out.println(next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样会有一个问题，cursor变量我们不能省略，只能做为实例变量存在，而且只有一个，如果有人用了这个list遍历到一半，然后停止了。下一个人遍历的时候就会从未知位置开始 。那你可能会说，我们可以设置一个reset()方法啊，但是如果有很多人同时在用这个list呢？你遍历到一半，然后突然有人调用了reset()….所以java分成了两个接口：<code>iterable</code>和<code>iterator</code>。有了iterable我们就可以这样实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Character</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;Character&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Iterator&lt;Character&gt;() &#123;<span class=\"comment\">//匿名内部类</span></span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> cursor=<span class=\"number\">0</span>;<span class=\"comment\">//每个itorator都有自己的cursor</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cursor &gt;=<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Character <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> str.charAt(cursor--);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>iterable</code>通过一个方法来封装iterator的具体实现细节，不让iterator的实现细节残留在类当中，对类和使用者造成影响</p>\n","categories":["Java"],"tags":["学习"]},{"title":"ArrayList源码分析","url":"https://threewater.xyz/2019/02/15/source-code1/","content":"<h2 id=\"继承结构\"><a href=\"#继承结构\" class=\"headerlink\" title=\"继承结构\"></a>继承结构</h2><img src=\"/2019/02/15/source-code1/1.svg\">\n<br>\n<a href=\"/2019/02/15/iterable/\" title=\"iterable\">iterable</a>接口是迭代接口，实现了这个接口的类就可以使用foreach语法。\n\n<a href=\"/2019/02/15/collection/\" title=\"collection\">collection</a>表示无序可重复元素的集合。\n\n<a href=\"/2019/02/15/List/\" title=\"List\">List</a>也实现了collection，说明它本质是一个collection，但是他是有序的。\n\n<p><a href>AbstractCollection</a>是Collection的默认实现。实现了部分方法，但是这些方法都必须依赖更底层的方法才能运行，比如add，get，remove等。不过这个思想很好，先抽象的实现，延后实现底层细节，使底层细节对代码的影响变小。</p>\n<p><a href>AbstractList</a>是List的默认实现，与<code>AbstractCollection</code>一样的思路，把不需要依赖底层的方法实现了。同时继承<code>AbstractCollection</code>这样作为一个Collection，AbstractCollection已经帮它实现了大部分代码。交给ArrayList就只有Collection和List接口的一些底层代码了。</p>\n<p>容我吹两句。萌新第一次见到这样的代码，真的令人叹为观止。这真的很完美。从简单的定义接口，到默认实现。一步步从简单到复杂，从抽象到具象。这样的结构，每一层都完成了自己该做的事情，感觉代码越写越单。</p>\n<p><a href>ArrayList</a>是整个继承体系的最终实现类，实际上留给ArrayList的也就一些底层方法了。除了继承而来的方法之外，还声明了很多方法，这些方法大多都为private，且都是为了保证向add，get，set这样的能够运行而设计的。</p>\n<h2>实现细节</h2>\n我们看来一下ArrayList一些方法的具体实现细节。\n<h3>add方法</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span> </span>&#123;<span class=\"comment\">//O(1)</span></span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">//ArrayList允许为null</span></span><br><span class=\"line\">    elementData[size++] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ensureCapacityInternal是确保有那么多容量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//计算所需要的容量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculateCapacity</span><span class=\"params\">(Object[] elementData, <span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minCapacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureExplicitCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"comment\">//为什么要减一下？难道与0比较效率更高？</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minCapacity - elementData.length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        grow(minCapacity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = elementData.length;</span><br><span class=\"line\">    <span class=\"comment\">//新容量是旧容量的1.5倍</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - minCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = minCapacity;</span><br><span class=\"line\">    <span class=\"comment\">//所支持的最大容量为Integer.MAX_VALUE - 8</span></span><br><span class=\"line\">    <span class=\"comment\">//为何要-8？</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        newCapacity = hugeCapacity(minCapacity);</span><br><span class=\"line\">    <span class=\"comment\">//赋值数组到新数组</span></span><br><span class=\"line\">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从指定位置添加的add\"><a href=\"#从指定位置添加的add\" class=\"headerlink\" title=\"从指定位置添加的add\"></a>从指定位置添加的add</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;<span class=\"comment\">//O(n)</span></span><br><span class=\"line\">    <span class=\"comment\">//判断index是否合法</span></span><br><span class=\"line\">    rangeCheckForAdd(index);</span><br><span class=\"line\">    ensureCapacityInternal(size + <span class=\"number\">1</span>);  <span class=\"comment\">// Increments modCount!!</span></span><br><span class=\"line\">    <span class=\"comment\">//所有元素后移</span></span><br><span class=\"line\">    System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                     size - index);</span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"清除所有方法\"><a href=\"#清除所有方法\" class=\"headerlink\" title=\"清除所有方法\"></a>清除所有方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">        elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    size = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    rangeCheck(index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elementData(index);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"set方法\"><a href=\"#set方法\" class=\"headerlink\" title=\"set方法\"></a>set方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E element)</span> </span>&#123;</span><br><span class=\"line\">    rangeCheck(index);</span><br><span class=\"line\">    E oldValue = elementData(index);</span><br><span class=\"line\">    elementData[index] = element;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"contains方法\"><a href=\"#contains方法\" class=\"headerlink\" title=\"contains方法\"></a>contains方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> indexOf(o) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为null时会查找第一个为null的</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementData[i]==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.equals(elementData[i]))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除方法\"><a href=\"#删除方法\" class=\"headerlink\" title=\"删除方法\"></a>删除方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//根据位置删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    rangeCheck(index);</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    E oldValue = elementData(index);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\">//这里换行可能是因为开发者屏幕太小了</span></span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                         numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//根据元素删除，只会移除第一个</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementData[index] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                fastRemove(index);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; size; index++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.equals(elementData[index])) &#123;</span><br><span class=\"line\">                fastRemove(index);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//哇！这个真的，上面完全可以直接调用remove方法，这个fastremove就少了一个范围检查</span></span><br><span class=\"line\"><span class=\"comment\">//就为了那一点点性能，就写了一个几乎一模一样的方法，作者真的扣。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                         numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//其实这个方法再AbstractCollection中以及实现了</span></span><br><span class=\"line\"><span class=\"comment\">//这里重新实现只是为了性能</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">removeAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> batchRemove(c, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">batchRemove</span><span class=\"params\">(Collection&lt;?&gt; c, <span class=\"keyword\">boolean</span> complement)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Object[] elementData = <span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = <span class=\"number\">0</span>, w = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> modified = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; r &lt; size; r++)</span><br><span class=\"line\">            <span class=\"comment\">//如果complement=false</span></span><br><span class=\"line\">            <span class=\"comment\">//包含则w停留。不包含则移动，同时复制到w位置</span></span><br><span class=\"line\">            <span class=\"comment\">//停留的位置就表示，这个位置可以被删除</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c.contains(elementData[r]) == complement)</span><br><span class=\"line\">                elementData[w++] = elementData[r];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class=\"line\">        <span class=\"comment\">// even if c.contains() throws.</span></span><br><span class=\"line\">        <span class=\"comment\">//正如注释所说，是为了兼容AbstractCollection</span></span><br><span class=\"line\">        <span class=\"comment\">//因为c参数不一定就是ArrayList，而AbstractCollection的contains()默认实现</span></span><br><span class=\"line\">        <span class=\"comment\">//会抛异常，ArrayList的contians()不会。以才会有r!=size的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r != size) &#123;</span><br><span class=\"line\">            System.arraycopy(elementData, r,</span><br><span class=\"line\">                             elementData, w,</span><br><span class=\"line\">                             size - r);</span><br><span class=\"line\">            w += size - r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//w后面所有可以被删除的位置设为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w != size) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = w; i &lt; size; i++)</span><br><span class=\"line\">                elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            modCount += size - w;</span><br><span class=\"line\">            size = w;</span><br><span class=\"line\">            modified = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> modified;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">retainAll</span><span class=\"params\">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class=\"line\">    Objects.requireNonNull(c);</span><br><span class=\"line\">    <span class=\"comment\">//通过参数传递控制信息，一份代码有两种功能</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> batchRemove(c, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"toArray-方法\"><a href=\"#toArray-方法\" class=\"headerlink\" title=\"toArray()方法\"></a>toArray()方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//直接复制一份</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object[] toArray() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Arrays.copyOf(elementData, size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//a的容量够大就存，不够就创建一个新的。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.length &lt; size)</span><br><span class=\"line\">        <span class=\"comment\">// Make a new array of a's runtime type, but my contents:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class=\"line\">    System.arraycopy(elementData, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.length &gt; size)</span><br><span class=\"line\">        a[size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"subList方法\"><a href=\"#subList方法\" class=\"headerlink\" title=\"subList方法\"></a>subList方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;E&gt; <span class=\"title\">subList</span><span class=\"params\">(<span class=\"keyword\">int</span> fromIndex, <span class=\"keyword\">int</span> toIndex)</span> </span>&#123;</span><br><span class=\"line\">    subListRangeCheck(fromIndex, toIndex, size);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SubList(<span class=\"keyword\">this</span>, <span class=\"number\">0</span>, fromIndex, toIndex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//ArrayList的内部类，持有parent的引用，改动是用parent实现的</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubList</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">RandomAccess</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, E e)</span> </span>&#123;</span><br><span class=\"line\">            rangeCheckForAdd(index);</span><br><span class=\"line\">            checkForComodification();</span><br><span class=\"line\">            parent.add(parentOffset + index, e);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.modCount = parent.modCount;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">            rangeCheck(index);</span><br><span class=\"line\">            checkForComodification();</span><br><span class=\"line\">            E result = parent.remove(parentOffset + index);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.modCount = parent.modCount;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.size--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><ol>\n<li>合理的使用继承</li>\n<li>边界条件都是抽取成方法的</li>\n</ol>\n","categories":["Java"],"tags":["学习"]},{"title":"Java泛型","url":"https://threewater.xyz/2019/02/13/generic/","content":"<h3 id=\"2020补充\"><a href=\"#2020补充\" class=\"headerlink\" title=\"2020补充\"></a>2020补充</h3><p>关于super和extends的理解</p>\n<h4 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h4><p>对于<code>List&lt;? extends Number&gt;</code>这个变量，他表示一下列表中的任意一种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Number&gt;</span><br><span class=\"line\">List&lt;Integer&gt;</span><br><span class=\"line\">List&lt;Double&gt;</span><br><span class=\"line\">List&lt;Float&gt;</span><br><span class=\"line\">List&lt;以及所有Number的子类&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果你要往这个List里面添加元素，由于他可能是List中的任意一种，<br>所以你添加的元素必须是Number，Integer，Double。以及所有后续类的子类<br>这样的类存在吗？</p>\n<p>如果你要从这个List里面获取元素呢？</p>\n<h4 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h4><p>对于<code>List&lt;? super Number&gt;</code>这个变量，他表示一下列表中的任意一种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Number&gt;</span><br><span class=\"line\">List&lt;Object&gt;</span><br><span class=\"line\">List&lt;以及所有Number的父类&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果你要往这样的List添加元素，怎样才能满足以上所有List的要求呢？</p>\n<p>如果要在这样的集合上删除元素，有应该用什么样的变量接收呢？</p>\n<h2 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这是一个能装任何东西的笼子</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T item;</span><br><span class=\"line\">    <span class=\"comment\">//存入笼子</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(T item)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item=item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//从笼子中取出</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        T tmp_item=item;</span><br><span class=\"line\">        item=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmp_item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//现在用一用这个笼子</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Execute</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cage&lt;String&gt; cage=<span class=\"keyword\">new</span> Cage&lt;&gt;();</span><br><span class=\"line\">        cage.store(<span class=\"string\">\"一个字符串\"</span>);</span><br><span class=\"line\">        String str = cage.get();<span class=\"comment\">//这里会进行强转</span></span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"java是如何实现泛型的呢？\"><a href=\"#java是如何实现泛型的呢？\" class=\"headerlink\" title=\"java是如何实现泛型的呢？\"></a>java是如何实现泛型的呢？</h3><p>我们反编译.class文件看一下。结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反编译后的部分代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T item;<span class=\"comment\">//为什么没有替换为Object？！！！</span></span><br><span class=\"line\">    <span class=\"comment\">//实际上是替换为了Object，只是泛型信息依然被文件记录了(通过注释?)。</span></span><br><span class=\"line\">    <span class=\"comment\">//反编译软件智能的识别出了泛型</span></span><br><span class=\"line\">    <span class=\"comment\">//.....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Execute</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cage&lt;String&gt; cage = <span class=\"keyword\">new</span> Cage();<span class=\"comment\">//这里&lt;String&gt;也应该没有的</span></span><br><span class=\"line\">        String str = (String)cage.get();<span class=\"comment\">//这里强转了，没错。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>理论上，代码应该是这样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object item;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(Object item)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item=item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Object tmp_item=item;</span><br><span class=\"line\">        item=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmp_item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Execute</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cage cage=<span class=\"keyword\">new</span> Cage&lt;&gt;();</span><br><span class=\"line\">        cage.store(<span class=\"string\">\"一个字符串\"</span>);</span><br><span class=\"line\">        String str = (String)cage.get();</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型类与继承\"><a href=\"#泛型类与继承\" class=\"headerlink\" title=\"泛型类与继承\"></a>泛型类与继承</h3><p>泛型类的子类要么指定父类的类型参数，要么就一起继承，不指定父类类型参数不太好：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//指定父类的类型参数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">Animal</span>&gt;</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一起继承</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类也可以有自己的类型参数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span>&lt;<span class=\"title\">E</span>,<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//或者这样</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">Animal</span>&gt;</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类的类型参数也可以与父类的有继承关系</span></span><br><span class=\"line\"><span class=\"comment\">//T是从父类继承而来。E是子类的，是T的子类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span>&lt;<span class=\"title\">E</span> <span class=\"keyword\">extends</span> <span class=\"title\">T</span>,<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//或者这样</span></span><br><span class=\"line\"><span class=\"comment\">//T从父类继承而来。E是子类的，是T的父类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">E</span>,<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果用super呢？不行，如果T是Object，那E是什么？</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span>&lt;<span class=\"title\">E</span> <span class=\"title\">super</span> <span class=\"title\">T</span>,<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ol>\n<li><p>这里<code>T</code>称为<code>类型参数</code>，在使用的时候指定具体类型。</p>\n</li>\n<li><p>在这个Cage类编译的时候，javac会把所有的<code>T</code>替换为Object，去掉所有jvm不认得的<code>&lt;&gt;</code>。对有类型冲突的地方进行强转。</p>\n</li>\n<li><p>泛型使我们不用手动强转，也不用担心强转出错。提高了代码的健壮性和美观性。</p>\n</li>\n<li><p>类型参数<code>T</code>不能用于静态变量，静态代码块，静态方法中。只能用于实例变量以及实例方法。</p>\n</li>\n<li><p>泛型擦除是为了兼容老的java，但是也带来了一些问题，如下</p>\n</li>\n<li><p>不能创建泛型数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cage[] cages=<span class=\"keyword\">new</span> Cage&lt;Dog&gt;[<span class=\"number\">20</span>];<span class=\"comment\">//本来希望存狗</span></span><br><span class=\"line\"><span class=\"comment\">//由于泛型擦除，cages变成了普通数组</span></span><br><span class=\"line\">cages[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> Cage&lt;Pig&gt;();<span class=\"comment\">//由于类型擦除，这也是一个普通的笼子，所以这里也没问题。</span></span><br><span class=\"line\"><span class=\"comment\">//但是以上违背了初衷，所以java禁止创建泛型数组</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不能用类型参数来new对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">E</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> E e=<span class=\"keyword\">new</span> E();</span><br><span class=\"line\">    <span class=\"comment\">//我们可能想这样用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cage&lt;String&gt; cage=<span class=\"keyword\">new</span> Cage&lt;&gt;();</span><br><span class=\"line\">        String str=cage.e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//由于类型擦除，代码可能会变成这样</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Oject e=<span class=\"keyword\">new</span> Oject();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cage cage=<span class=\"keyword\">new</span> Cage();</span><br><span class=\"line\">        String str=(String)cage.e;<span class=\"comment\">//错误，父类不能转为子类</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果有一个类继承了泛型类，在类型擦除时，会生成桥方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(T item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//我们希望重写父类的方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(Integer item)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"small store\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.store(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//由于类型擦除，可能会变成这样</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Oject item;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(Oject item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(Integer item)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"small store\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.store(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//相当于没有被重写，而是被重载了！那么我们可以这样用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> SmallCage().store(<span class=\"string\">\"dd\"</span>);<span class=\"comment\">//调用父类的store方法</span></span><br><span class=\"line\">    \t<span class=\"comment\">//这显然违背了初衷，我们本来希望Cage存的是Integer，但貌似存String也没问题。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实际上SmallCage会被编译成这样</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmallCage</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cage</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(Integer item)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"small store\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.store(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(Oject item)</span> </span>&#123;<span class=\"comment\">//Bridge Method</span></span><br><span class=\"line\">        store((Integer)item);<span class=\"comment\">//调用本类方法，如果不是Integer就会报错。保证初衷不变。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"泛化方法\"><a href=\"#泛化方法\" class=\"headerlink\" title=\"泛化方法\"></a>泛化方法</h2><p>泛型也可以作用于方法<br>泛化方法与泛型类没有必然联系，泛化方法可以在泛型类中，也可以在普通类中。<br>类型参数也可以有多个。<br>泛化方法可以是静态的。<br>泛化方法在使用时，不需要指定类型参数的实际类型</p>\n<h3 id=\"什么样的方法是泛化方法呢？\"><a href=\"#什么样的方法是泛化方法呢？\" class=\"headerlink\" title=\"什么样的方法是泛化方法呢？\"></a>什么样的方法是泛化方法呢？</h3><p>就是在方法声明上，返回值前面，带有类似<code>&lt;U&gt;</code>的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(T item)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item=item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//干死这个笼子，随你用什么工具</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;U&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">(U tool)</span></span>&#123;<span class=\"comment\">//暂且容许我这么写</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"the cage has been destroyed\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Execute</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Cage&lt;String&gt; cage=<span class=\"keyword\">new</span> Cage&lt;&gt;();<span class=\"comment\">//需要指定实际类型</span></span><br><span class=\"line\">        cage.destroy(<span class=\"string\">\"这是一把斧子\"</span>);<span class=\"comment\">//不需要指定实际类型，java会自动判断</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h2><h3 id=\"泛型接口及其使用\"><a href=\"#泛型接口及其使用\" class=\"headerlink\" title=\"泛型接口及其使用\"></a>泛型接口及其使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//能添加颜色的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CanAddColor</span>&lt;<span class=\"title\">C</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addColor</span><span class=\"params\">(C color)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在实现接口时，指定其参数类型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">CanAddColor</span>&lt;<span class=\"title\">RedColor</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addColor</span><span class=\"params\">(RedColor color)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"为笼子上红色\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型参数也可以有边界\"><a href=\"#类型参数也可以有边界\" class=\"headerlink\" title=\"类型参数也可以有边界\"></a>类型参数也可以有边界</h2><h3 id=\"上界\"><a href=\"#上界\" class=\"headerlink\" title=\"上界\"></a>上界</h3><p>上界可以是类(final类也可以,但是没什么卵用,会被看作final类的父类)，也可以是一个接口，还可以是其它类型参数。</p>\n<h3 id=\"1-上界为类的情况。\"><a href=\"#1-上界为类的情况。\" class=\"headerlink\" title=\"1.上界为类的情况。\"></a>1.上界为类的情况。</h3><p>编译器在编译这个类文件的时候，就不是转为Object了，而是转为上界类。</p>\n<p>我们改一下前面的笼子类，变成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"动物会动\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//笼子只能装动物</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span>&gt;</span>&#123;<span class=\"comment\">//Animal为上界</span></span><br><span class=\"line\">    <span class=\"comment\">//笼子会摇晃</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shake</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我们可以把这个T当作Animal来用，他有Animal的方法。</span></span><br><span class=\"line\">        item.move();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反编译看一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反编译软件太智能，自动识别出了泛型，以下是我瞎编的。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Animal item;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">store</span><span class=\"params\">(Animal item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Animal <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Animal tmp_item = <span class=\"keyword\">this</span>.item;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmp_item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-上界类为接口\"><a href=\"#2-上界类为接口\" class=\"headerlink\" title=\"2.上界类为接口\"></a>2.上界类为接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//活着的东西</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IAlive</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//笼子只能装活着的东西</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">IAlive</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IAlive item;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-上界为其它类型参数\"><a href=\"#3-上界为其它类型参数\" class=\"headerlink\" title=\"3. 上界为其它类型参数\"></a>3. 上界为其它类型参数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//替换笼中的东西，但我希望替换的是它的子类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;K extends T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">replace</span><span class=\"params\">(K another_item)</span></span>&#123;</span><br><span class=\"line\">        item=another_item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//也可以这样实现，但这样K就暴露给整个类了，不太好</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>,<span class=\"title\">K</span> <span class=\"keyword\">extends</span> <span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">replace</span><span class=\"params\">(K another_item)</span></span>&#123;</span><br><span class=\"line\">        item=another_item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><p>上面的replace方法，那个K几乎没用到，我们想当然的这么写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//这样写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">replace</span><span class=\"params\">(? extends K another_item)</span></span>&#123;<span class=\"comment\">//错误</span></span><br><span class=\"line\">        item=another_item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//或者这么写</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;? extends T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">replace</span><span class=\"params\">(? another_item)</span></span>&#123;<span class=\"comment\">//错误</span></span><br><span class=\"line\">        item=another_item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是通配符不能作为形参，也不能作为返回值。<br>如果想使用通配符必须有一个东西来包装它，就像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//从另一个笼子中添加东西到当前笼子，并且希望笼子里的东西是当前笼子的子类</span></span><br><span class=\"line\">    <span class=\"comment\">//可以这么写：</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;K extends T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Cage&lt;K&gt; another_cage)</span></span>&#123;</span><br><span class=\"line\">        item=another_cage.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//也可以用通配符，这样我们及少写了一个K：</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Cage&lt;? extends T&gt; another_cage)</span></span>&#123;</span><br><span class=\"line\">        item=another_cage.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通配符还可以指定下界，这是类型参数所不行的。像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cage</span>&lt;<span class=\"title\">T</span>&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//我们希望添加的是T的父类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title\">add2</span><span class=\"params\">(Cage&lt;? <span class=\"keyword\">super</span> T&gt; another_cage)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//item=another_cage.get();another_cage不能用来读，看后面。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>Cage<animal> 与Cage<dog>  没有父子关系。</dog></animal></p>\n</li>\n<li><p><code>？extends 类A</code> 只能用来读。读的时候读取的都是类A的子类，然后我们用类A的变量引用它（父类引用子类），这是没有问题的。但是如果我们写：<code>？extends 类A</code>表示我们可以写入A以及A的子类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//假设有这样一个变量</span></span><br><span class=\"line\">Cage&lt;? extends Animal&gt; a_cage;</span><br><span class=\"line\"><span class=\"comment\">//那么理论上说我们可以往这个笼子里面存只要是继承的Animal的类</span></span><br><span class=\"line\"><span class=\"comment\">//但是这个cage只是一个变量，他必定要赋值才能用，就像这样</span></span><br><span class=\"line\"><span class=\"comment\">//赋值情况1</span></span><br><span class=\"line\">a_cage=<span class=\"keyword\">new</span> Cage&lt;Animal&gt;();</span><br><span class=\"line\">a_cage.store(<span class=\"keyword\">new</span> Pig());</span><br><span class=\"line\"><span class=\"comment\">//如果是情况1，那么a_cage确实可以放继承了Animal动物任意类。放Dog，Pig都可以</span></span><br><span class=\"line\"><span class=\"comment\">//现在我们放入Pig。存放Animal的笼子，存放Pig没问题。</span></span><br><span class=\"line\"><span class=\"comment\">//赋值情况2</span></span><br><span class=\"line\">a_cage=<span class=\"keyword\">new</span> Cage&lt;Dog&gt;();</span><br><span class=\"line\">Animal a=<span class=\"keyword\">new</span> Rabbit()；</span><br><span class=\"line\">a_cage.store(a);</span><br><span class=\"line\">a_cage.store(<span class=\"keyword\">new</span> Pig());</span><br><span class=\"line\"><span class=\"comment\">//a虽然是Animal，但是它可以是任何动物！，然后放入了Dog的笼子，违背初衷</span></span><br><span class=\"line\"><span class=\"comment\">//Pig放入了Dog笼子，违背初衷。</span></span><br><span class=\"line\"><span class=\"comment\">//那么可能会问谁TM会这样写啊</span></span><br><span class=\"line\">Cage&lt;? extends Animal&gt; a_cage=<span class=\"keyword\">new</span> Cage&lt;Dog&gt;();</span><br><span class=\"line\">a_cage.store(<span class=\"keyword\">new</span> Pig());<span class=\"comment\">//上面一行不是写了Cage&lt;Dog&gt;嘛！</span></span><br><span class=\"line\"><span class=\"comment\">//但是这有可能发生在方法上：</span></span><br><span class=\"line\"><span class=\"comment\">//有一个方法，它可以往笼子中存入动物，但希望笼子是放动物的：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Cage&lt;? extends Animal&gt; a_cage)</span></span>&#123;</span><br><span class=\"line\">    Animal a_kind_animal=<span class=\"keyword\">new</span> Animal();<span class=\"comment\">//也可以new Rabbit();</span></span><br><span class=\"line\">    a_cage.store(a_kind_animal);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//如果我们单纯的看这个方法：它想要一个放动物的笼子，并且把某种动物放入其中。是没问题的</span></span><br><span class=\"line\"><span class=\"comment\">//但是a_cage只是一个变量，具体指向什么呢？还要看调用者的心情</span></span><br><span class=\"line\"><span class=\"comment\">//假设调用者这样：</span></span><br><span class=\"line\">put(<span class=\"keyword\">new</span> Cage(Dog));</span><br><span class=\"line\"><span class=\"comment\">//所以Cage&lt;? extends Animal&gt; a_cage不能涉及写操作。</span></span><br><span class=\"line\"><span class=\"comment\">//如果就是要使这个put方法有用，那该怎么办呢？我们可以使用super:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(Cage&lt;? <span class=\"keyword\">super</span> Animal&gt; a_cage)</span></span>&#123;</span><br><span class=\"line\">    Animal a_kind_animal=<span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">    a_cage.store(a_kind_animal);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//这样就保证了a_cage肯定是能放Animal的，而不是只能放某种具体的动物</span></span><br><span class=\"line\"><span class=\"comment\">//这样，调用者就不能猥琐欲为了，它只能这样</span></span><br><span class=\"line\">put(<span class=\"keyword\">new</span> Cage&lt;Animal&gt;());</span><br><span class=\"line\"><span class=\"comment\">//或者</span></span><br><span class=\"line\">put(<span class=\"keyword\">new</span> Cage&lt;Object&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//既然Cage&lt;? extends Animal&gt; a_cage不能涉及写操作。那么读有没有问题呢？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">animalMove</span><span class=\"params\">(Cage&lt;? extends Animal&gt; cage)</span></span>&#123;</span><br><span class=\"line\">        Animal animal = cage.get();</span><br><span class=\"line\">    \tanimal.move();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//读是没有问题的，因为cage里面至少是一个动物，我们至少可以使用Animal的方法</span></span><br><span class=\"line\"><span class=\"comment\">//那么super存不存在读问题呢？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">animalMove</span><span class=\"params\">(Cage&lt;? <span class=\"keyword\">super</span> Animal&gt; cage)</span></span>&#123;</span><br><span class=\"line\">        Animal animal = cage.get();</span><br><span class=\"line\">    \tanimal.move();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//由于这个方法期望的的是Animal以及Animal的父类，那么调用者可以这样写</span></span><br><span class=\"line\">animalMove(<span class=\"keyword\">new</span> Cage&lt;Animal&gt;());<span class=\"comment\">//看起来正确</span></span><br><span class=\"line\">animalMove(<span class=\"keyword\">new</span> Cage&lt;Oject&gt;());<span class=\"comment\">//错误，Cage存的是Object，但方法内部却把它当成了Animal</span></span><br><span class=\"line\"><span class=\"comment\">//可见super用来的读是有问题的，它唯一能保证的就是cage里面放的是Object。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">animalMove</span><span class=\"params\">(Cage&lt;? <span class=\"keyword\">super</span> Animal&gt; cage)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//没有意义，因为你不能把animal转为任何类型，因为你不知道cage里面到底装的是什么</span></span><br><span class=\"line\">        Ojbect animal = cage.get();</span><br><span class=\"line\">    \t<span class=\"comment\">//animal.move();</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>&lt;？extends some_class&gt;</code>只能用来读，不管容器里面是什么，但一定是some_class，取出来用some_class引用是没问题的。</p>\n<p>不能用来写，因为只知道容器里面是some_class的子类，具体是什么不知道，所以贸然的写入是危险的。java禁止了写。</p>\n<p><code>&lt;? super some_class&gt;</code>只能用来写，因为一定是some_class或者其父类，所以如果我们想写，只要写入的类继承了somre_class，就没错。</p>\n<p>不能用来读，因为它只能保证是Object，具体是什么不知道，也不敢转为具体某个类型，所以java在编译阶段就禁止了读。</p>\n</li>\n</ol>\n","categories":["Java"],"tags":["学习"]},{"title":"随机数的应用","url":"https://threewater.xyz/2019/02/12/random/","content":"<h2 id=\"随机数产生的原理\"><a href=\"#随机数产生的原理\" class=\"headerlink\" title=\"随机数产生的原理\"></a>随机数产生的原理</h2><p>要产生随机数我们需要一个种子，作为构造参数传入。<br>在Random类中，有两个构造方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. 系统生成真正的随机种子。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Random</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(seedUniquifier() ^ System.nanoTime());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">2</span>. 由我们指定种子。</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Random</span><span class=\"params\">(<span class=\"keyword\">long</span> seed)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (getClass() == Random.class)</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.seed = <span class=\"keyword\">new</span> AtomicLong(initialScramble(seed));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// subclass might have overriden setSeed</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.seed = <span class=\"keyword\">new</span> AtomicLong();</span><br><span class=\"line\">        setSeed(seed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>种子一旦确定，后面产生的随机数也就确定了。</p>\n<h2 id=\"随机密码生成器\"><a href=\"#随机密码生成器\" class=\"headerlink\" title=\"随机密码生成器\"></a>随机密码生成器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomPassword</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Random rnd=<span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SPECIAL_CHAR=<span class=\"string\">\"!@#$%^&amp;*()_+-=\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//生成一个随机位置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getRandomIndex</span><span class=\"params\">(<span class=\"keyword\">char</span>[] a, Random rnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = rnd.nextInt(a.length);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[index]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            index=rnd.nextInt(a.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//生成一个随机特殊字符</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> <span class=\"title\">specialChar</span><span class=\"params\">(Random rnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SPECIAL_CHAR.charAt(rnd.nextInt(SPECIAL_CHAR.length()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//生成一个随机数字</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> <span class=\"title\">numLetter</span><span class=\"params\">(Random rnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>) (<span class=\"string\">'0'</span>+rnd.nextInt(<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//生成一个随机小写字母</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> <span class=\"title\">lowerLetter</span><span class=\"params\">(Random rnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>)(<span class=\"string\">'a'</span>+rnd.nextInt(<span class=\"number\">26</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//生成一个随机大写字母</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> <span class=\"title\">upperLetter</span><span class=\"params\">(Random rnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>)(<span class=\"string\">'A'</span>+rnd.nextInt(<span class=\"number\">26</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//生成一个随机字符</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> <span class=\"title\">nextChar</span><span class=\"params\">(Random rnd)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (rnd.nextInt(<span class=\"number\">4</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>) (<span class=\"string\">'0'</span>+rnd.nextInt(<span class=\"number\">10</span>));</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>)(<span class=\"string\">'a'</span>+rnd.nextInt(<span class=\"number\">26</span>));</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> (<span class=\"keyword\">char</span>)(<span class=\"string\">'A'</span>+rnd.nextInt(<span class=\"number\">26</span>));</span><br><span class=\"line\">            <span class=\"keyword\">default</span>: <span class=\"keyword\">return</span> SPECIAL_CHAR.charAt(rnd.nextInt(SPECIAL_CHAR.length()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//生成随机密码</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">randomPassword</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] chars=<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">8</span>];</span><br><span class=\"line\">        chars[getRandomIndex(chars, rnd)]=specialChar(rnd);</span><br><span class=\"line\">        chars[getRandomIndex(chars, rnd)]=numLetter(rnd);</span><br><span class=\"line\">        chars[getRandomIndex(chars, rnd)]=lowerLetter(rnd);</span><br><span class=\"line\">        chars[getRandomIndex(chars, rnd)]=upperLetter(rnd);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;chars.length;i++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(chars[i]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                chars[i]=nextChar(rnd);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(chars);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String s = randomPassword();</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"带权重的随机选择\"><a href=\"#带权重的随机选择\" class=\"headerlink\" title=\"带权重的随机选择\"></a>带权重的随机选择</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeightRandom</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pair[] pairs;</span><br><span class=\"line\">    <span class=\"comment\">//累计概率</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span>[] cumulativeProbabilities;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Random rnd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeightRandom</span><span class=\"params\">(Pair[] pairs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pairs = pairs;</span><br><span class=\"line\">        rnd=<span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">        prepare();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//累计概率赋值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        cumulativeProbabilities=<span class=\"keyword\">new</span> <span class=\"keyword\">double</span>[pairs.length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> totalWeight=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Pair pair:pairs)&#123;</span><br><span class=\"line\">            totalWeight+=pair.getWeight();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;pairs.length;i++)&#123;</span><br><span class=\"line\">            sum+=pairs[i].getWeight();</span><br><span class=\"line\">            cumulativeProbabilities[i]=(<span class=\"keyword\">double</span>) sum/totalWeight;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//随机选出一个item</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">nextItem</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> randomValue=rnd.nextDouble();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = Arrays.binarySearch(cumulativeProbabilities, randomValue);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span>)&#123;<span class=\"comment\">//没有找到</span></span><br><span class=\"line\">            index=-index-<span class=\"number\">1</span>;<span class=\"comment\">//详情请看Arrays.binarySearch源码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pairs[index].getItem();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Pair[] pairs=<span class=\"keyword\">new</span> Pair[]&#123;<span class=\"keyword\">new</span> Pair(<span class=\"string\">\"1元\"</span>,<span class=\"number\">7</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> Pair(<span class=\"string\">\"5元\"</span>,<span class=\"number\">2</span>),</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> Pair(<span class=\"string\">\"10元\"</span>,<span class=\"number\">1</span>)&#125;;</span><br><span class=\"line\">        WeightRandom weightRandom = <span class=\"keyword\">new</span> WeightRandom(pairs);</span><br><span class=\"line\">        Object o = weightRandom.nextItem();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Pair类用来表示一个物品，及其权重。</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pair</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object item;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> weight;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pair</span><span class=\"params\">(Object item, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.item = item;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"抢红包\"><a href=\"#抢红包\" class=\"headerlink\" title=\"抢红包\"></a>抢红包</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedPacket</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftMoney;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftNum;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Random random;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RedPacket</span><span class=\"params\">(<span class=\"keyword\">int</span> leftMoney, <span class=\"keyword\">int</span> leftNum)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leftMoney = leftMoney;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leftNum = leftNum;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">nextMoney</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leftNum&lt;<span class=\"number\">1</span>||leftMoney&lt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"抢光了\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(leftNum==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            leftNum--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> leftMoney;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> max=(<span class=\"keyword\">double</span>) leftMoney/leftNum*<span class=\"number\">2</span>d;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> money=(<span class=\"keyword\">int</span>)Math.max(<span class=\"number\">1</span>,random.nextDouble()*max);</span><br><span class=\"line\">        leftMoney-=money;</span><br><span class=\"line\">        leftNum--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        RedPacket redPacket = <span class=\"keyword\">new</span> RedPacket(<span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">11</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(redPacket.nextMoney());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"类和对象在内存中的分布，以及加载过程","url":"https://threewater.xyz/2019/02/04/extends-problem2/","content":"<h2 id=\"继承体系中类的加载过程\"><a href=\"#继承体系中类的加载过程\" class=\"headerlink\" title=\"继承体系中类的加载过程\"></a>继承体系中类的加载过程</h2><p>当我们new一个对象时，大概会经历如下过程：</p>\n<ol>\n<li>查看父类以及本类是否在方法区中，如不在，会先加载父类，然后加载本类。</li>\n<li>如不在，为父类和子类的静态变量（默认值）和方法地址引用开辟内存。</li>\n<li>先执行父类静态变量的赋值语句，执行静态代码块。然后执行子类的。</li>\n<li>到此，类就加载完毕了，接下来创建对象。</li>\n<li>先创建父类对象，再创建子类对象。</li>\n<li>在堆内存中为对象开辟内存。</li>\n<li>执行实例变量赋值语句，执行实例初始化代码块，执行构造方法。</li>\n</ol>\n<h3 id=\"代码实例：\"><a href=\"#代码实例：\" class=\"headerlink\" title=\"代码实例：\"></a>代码实例：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Child</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类构造方法 a:\"</span>+a);</span><br><span class=\"line\">        a=<span class=\"number\">21</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类静态代码块 s:\"</span>+s);</span><br><span class=\"line\">        s=<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类实例代码块 a:\"</span>+a);</span><br><span class=\"line\">        a=<span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Parent</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类构造方法 a:\"</span>+a);</span><br><span class=\"line\">        a=<span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类静态代码块 s:\"</span>+s);</span><br><span class=\"line\">        s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类实例代码块 a:\"</span>+a);</span><br><span class=\"line\">        a=<span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Execute</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"----- new child ------\"</span>);</span><br><span class=\"line\">        Child child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----- new child ------</span><br><span class=\"line\">父类静态代码块 s:0</span><br><span class=\"line\">子类静态代码块 s:0</span><br><span class=\"line\">父类实例代码块 a:0</span><br><span class=\"line\">父类构造方法 a:2</span><br><span class=\"line\">子类实例代码块 a:0</span><br><span class=\"line\">子类构造方法 a:20</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类在内存中的体现\"><a href=\"#类在内存中的体现\" class=\"headerlink\" title=\"类在内存中的体现\"></a>类在内存中的体现</h2><p>我们先来看如下类图：</p>\n<img src=\"/2019/02/04/extends-problem2/uml.svg\">\n<p>它在内存中可以表示为：</p>\n<img src=\"/2019/02/04/extends-problem2/class.svg\">\n<p>其中：</p>\n<ol>\n<li>class_init()：静态代码块，静态变量时的赋值语句。</li>\n<li>instance_init()：实例变量的赋值语句，实例代码块，构造方法。</li>\n</ol>\n<h2 id=\"对象在内存中的体现\"><a href=\"#对象在内存中的体现\" class=\"headerlink\" title=\"对象在内存中的体现\"></a>对象在内存中的体现</h2><img src=\"/2019/02/04/extends-problem2/boject.svg\">\n\n<p>可以看出，类在内存中只有一份，而对象可能有多份。<br>在向上转型后，p的地址和c是指向同一地方的。</p>\n<h2 id=\"方法调用过程\"><a href=\"#方法调用过程\" class=\"headerlink\" title=\"方法调用过程\"></a>方法调用过程</h2><ol>\n<li>静态方法：静态方法是静态绑定的，在编译时期就可确定。只取决于你所引用的变量类型。</li>\n<li>实例方法：从上面的图我们可以看到，无论引用类型是父类型还是子类型，它们都是指向同一对象的，那么在寻找实例方法的时候，会直接查看该对象的类型地址，然后一级一级往上找，直到找到该方法为止。</li>\n</ol>\n<h2 id=\"变量调用过程\"><a href=\"#变量调用过程\" class=\"headerlink\" title=\"变量调用过程\"></a>变量调用过程</h2><p>变量是静态绑定的，在编译期确定。取决于所引用的变量类型。</p>\n","categories":["Java"],"tags":["学习"]},{"title":"继承体系中重写，重载，重名的区别","url":"https://threewater.xyz/2019/02/02/extends-problem/","content":"<h1 id=\"继承体系中重写，重载，重名的区别\"><a href=\"#继承体系中重写，重载，重名的区别\" class=\"headerlink\" title=\"继承体系中重写，重载，重名的区别\"></a>继承体系中重写，重载，重名的区别</h1><h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h2><h3 id=\"哪些方法是重写方法？\"><a href=\"#哪些方法是重写方法？\" class=\"headerlink\" title=\"哪些方法是重写方法？\"></a>哪些方法是重写方法？</h3><p>满足如下两个条件：</p>\n<ol>\n<li>重写从父类继承而来的非静态方法</li>\n<li>子类的方法名，参数类型，个数和父类一样。</li>\n</ol>\n<h3 id=\"多态和动态绑定\"><a href=\"#多态和动态绑定\" class=\"headerlink\" title=\"多态和动态绑定\"></a>多态和动态绑定</h3><p>父类引用指向子类对象，称为<code>多态</code>。\n父类引用执行被子类重写的方法，称为<code>动态绑定</code>。</p>\n<h3 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"parent class\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">out</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"child class\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Parent parent= <span class=\"keyword\">new</span> Child();<span class=\"comment\">//多态</span></span><br><span class=\"line\">        parent.out();<span class=\"comment\">//动态绑定</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child class</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><h3 id=\"那些方法是重载方法？\"><a href=\"#那些方法是重载方法？\" class=\"headerlink\" title=\"那些方法是重载方法？\"></a>那些方法是重载方法？</h3><p>方法名相同，但是参数类型或者个数不同的方法。</p>\n<h3 id=\"最适配原则\"><a href=\"#最适配原则\" class=\"headerlink\" title=\"最适配原则\"></a>最适配原则</h3><p>哪个重载方法与入参更匹配，哪个方法就被调用。</p>\n<h3 id=\"代码实例-1\"><a href=\"#代码实例-1\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"parent method\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> a)</span></span>&#123;<span class=\"comment\">//重载</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"child method\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Child child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">        child.get(<span class=\"number\">1</span>);<span class=\"comment\">//参数为int，父类更匹配</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parent method</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重名\"><a href=\"#重名\" class=\"headerlink\" title=\"重名\"></a>重名</h2><h3 id=\"哪些成员是重名的\"><a href=\"#哪些成员是重名的\" class=\"headerlink\" title=\"哪些成员是重名的\"></a>哪些成员是重名的</h3><ol>\n<li>成员变量都可以重名。</li>\n<li>静态，方法名相同，且参数类型和返回值都相同的方法。</li>\n</ol>\n<h3 id=\"重名方法具体调用哪一个？\"><a href=\"#重名方法具体调用哪一个？\" class=\"headerlink\" title=\"重名方法具体调用哪一个？\"></a>重名方法具体调用哪一个？</h3><p>这取决于所引用的变量类型。如果引用的变量类型是父类那么调用的就是父类的成员，反之，就是子类的成员。我们称之为<code>静态绑定</code>。</p>\n<h3 id=\"何时使用super和this关键字？\"><a href=\"#何时使用super和this关键字？\" class=\"headerlink\" title=\"何时使用super和this关键字？\"></a>何时使用super和this关键字？</h3><p>需要明确指定调用父类对象的成员时使用<code>super</code>（不能在静态方法和静态语句块中使用）<br>需要明确指定调用当前对象时使用<code>this</code>。</p>\n<h3 id=\"代码实例-2\"><a href=\"#代码实例-2\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String s=<span class=\"string\">\"父类静态变量\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String a=<span class=\"string\">\"父类实例变量\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"父类静态方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String s=<span class=\"string\">\"子类静态变量\"</span>;<span class=\"comment\">//重名</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String a=<span class=\"string\">\"子类实例变量\"</span>;<span class=\"comment\">//重名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;<span class=\"comment\">//重名</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"子类静态方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//静态绑定演示</span></span><br><span class=\"line\">        Child child = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">        Parent parent=child;</span><br><span class=\"line\">        System.out.println(child.a);</span><br><span class=\"line\">        System.out.println(parent.a);</span><br><span class=\"line\">        System.out.println(child.s);</span><br><span class=\"line\">        System.out.println(parent.s);</span><br><span class=\"line\">        child.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">        parent.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">子类实例变量</span><br><span class=\"line\">父类实例变量</span><br><span class=\"line\">子类静态变量</span><br><span class=\"line\">父类静态变量</span><br><span class=\"line\">子类静态方法</span><br><span class=\"line\">父类静态方法</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"Java访问修饰符","url":"https://threewater.xyz/2019/01/26/access-modifier/","content":"<h1 id=\"对于类，只有两种public-default\"><a href=\"#对于类，只有两种public-default\" class=\"headerlink\" title=\"对于类，只有两种public default.\"></a>对于类，只有两种public default.</h1><ol>\n<li>public所有类都可以使用该类。</li>\n<li>default只有同一包下的类才可以使用该类。</li>\n</ol>\n<h1 id=\"对于成员-成员方法，成员变量-，有public，protected，default，private。\"><a href=\"#对于成员-成员方法，成员变量-，有public，protected，default，private。\" class=\"headerlink\" title=\"对于成员(成员方法，成员变量)，有public，protected，default，private。\"></a>对于成员(成员方法，成员变量)，有public，protected，default，private。</h1><ol>\n<li>public就不多说了</li>\n<li>protected,同一包类可以访问，不同包类其它类不能访问，子孙类也只可以访问其静态成员</li>\n<li>default 同一包下随便访问，不同包下不能访问。子类也不行。</li>\n<li>private，只有当前类可用。</li>\n</ol>\n<h1 id=\"访问修饰符与继承体系\"><a href=\"#访问修饰符与继承体系\" class=\"headerlink\" title=\"访问修饰符与继承体系\"></a>访问修饰符与继承体系</h1><h2 id=\"对于类\"><a href=\"#对于类\" class=\"headerlink\" title=\"对于类\"></a>对于类</h2><p>父类为public随便继承，父类为default，那么只有在同一包中才能继承继承了。</p>\n<h2 id=\"对于成员\"><a href=\"#对于成员\" class=\"headerlink\" title=\"对于成员\"></a>对于成员</h2><ol>\n<li>public修饰的成员，子类都会继承。</li>\n<li>protected修饰的成员。无论是静态还是动态，都会继承。</li>\n<li>default成员。同一包下子类随便继承，不同包下，子类不能继承。</li>\n<li>private 成员，只属于父类私有，不会传递给下一级。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"对于类-1\"><a href=\"#对于类-1\" class=\"headerlink\" title=\"对于类\"></a>对于类</h2><ol>\n<li>对于类无论是继承，还是不继承。public可以访问，default同一包下可以访问。</li>\n</ol>\n<h2 id=\"对于成员-1\"><a href=\"#对于成员-1\" class=\"headerlink\" title=\"对于成员\"></a>对于成员</h2><ol>\n<li>public成员：既能被继承也能被访问，没有限制</li>\n<li>protected成员：<br>   同一包下：<br>   既能被继承也能被访问<br>   <span id=\"1\"></span><br>   <strong>不同包下(<a href=\"#1\">Y/N</a>的情况)：<br>   1.普通类不能访问也不能继承<br>   2.子类可以访问protect静态成员，继承所有protect成员</strong></li>\n<li>default成员：同一包下可以被继承可以被访问，不同包下不能访问也不能继承。</li>\n<li>private成员：不管属于哪个包，都不能被继承，也不能被访问，只有本类可以用。</li>\n</ol>\n<h2 id=\"也可以总结为如下图表\"><a href=\"#也可以总结为如下图表\" class=\"headerlink\" title=\"也可以总结为如下图表\"></a>也可以总结为如下图表</h2><table>\n<thead>\n<tr>\n<th align=\"center\">访问权限</th>\n<th align=\"center\">当前类</th>\n<th align=\"center\">同一包</th>\n<th align=\"center\">不同包</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public(类)</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n</tr>\n<tr>\n<td align=\"center\">protected</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\"><a href=\"#1\">Y/N</a></td>\n</tr>\n<tr>\n<td align=\"center\">default(类)</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">Y</td>\n<td align=\"center\">N</td>\n</tr>\n<tr>\n<td align=\"center\">private</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n<td align=\"center\">N</td>\n</tr>\n</tbody></table>\n","categories":["Java"],"tags":["学习"]},{"title":"关于乱码","url":"https://threewater.xyz/2019/01/24/messy-code/","content":"<h1 id=\"字符显示的大致过程\"><a href=\"#字符显示的大致过程\" class=\"headerlink\" title=\"字符显示的大致过程\"></a>字符显示的大致过程</h1><ol>\n<li>应用程序接收两个参数：二进制，以及二进制的编码方式。</li>\n<li>应用程序根据其接收的编码方式把二进制转换成矢量图形。</li>\n<li>然后把这张矢量图形交给操作系统。</li>\n<li>操作系统交给显示器驱动程序，转换成电信号输出到屏幕。</li>\n<li>注意：这个应用程序可以是某个软件的自己的，也可以是操作系统提供的。</li>\n<li>因此：一个理想的应用程序应该具有所有文字的矢量图形。但是，很久以前，这个应用程序只支持一种编码方式，那就是ASCII码，所以计算机也就只能显示英文了。</li>\n</ol>\n<h1 id=\"关于编码方式\"><a href=\"#关于编码方式\" class=\"headerlink\" title=\"关于编码方式\"></a>关于编码方式</h1><p>编码方式就是现实世界的字符到二进制的一种映射，每种编码方式对这种映射的实现都不同。比如ASCII码就实现了字母，数字到二进制的映射。那么有没有一种编码方式能够是实现世界上所有字符到二进制的映射呢？<br>那就是Unicode，但是Unicode只是一张表，世界上的每一个字符在这张表中都有唯一的编号，它没有实现映射到二进制。那么有没有这种实现呢？那就是UTF系列啦。<br>但是需要注意的是：一些常用的编码对字母和数字的二进制表示是一样的，有些则例外。所以，有时候对二进制进行错误的编码解析，也会是正确的<a href=\"#1\">看这</a>。</p>\n<h1 id=\"关于转码\"><a href=\"#关于转码\" class=\"headerlink\" title=\"关于转码\"></a>关于转码</h1><p>所谓转码，就是把字符从一种编码方式，转换成另一种编码方式，但是字符本身不变。那么这个程序具体怎么是实现的呢？这里以UTF-8和GBK为例。</p>\n<ol>\n<li>先把 ’中‘用GBK转换成二进制串A。</li>\n<li>然后查找GBK&lt;—-&gt;UTF-8的转码映射表。</li>\n<li>找到A对应的UTF-8二进制串为B。</li>\n<li>这样’中‘的二进制表示就变成了B了。<a href=\"#2\">看这</a></li>\n</ol>\n<h1 id=\"关于乱码\"><a href=\"#关于乱码\" class=\"headerlink\" title=\"关于乱码\"></a>关于乱码</h1><p>综上所述，字母和数字在常用的编码是不会乱码的，只有其它字符会。<br>那么乱码大概可以分为两种情况：</p>\n<ol>\n<li>对二进制的解析错误，也就是说本来用GBK编码的二进制被当成了UTF-8进行解析，由于中文在这两种编码方式中的二进制表示不同，于是就乱码了。</li>\n<li>再不知道原来二进制串编码的情况下，误以为是某种编码(当然，用这种编码查看也是乱码字符)，然后进行了转码操作，导致二进制发生了一次改变，但是乱码字符没有变。</li>\n<li>如果二进制发生了多次改变，那么很难恢复。</li>\n</ol>\n<h1 id=\"如何解决乱码\"><a href=\"#如何解决乱码\" class=\"headerlink\" title=\"如何解决乱码\"></a>如何解决乱码</h1><ol>\n<li>对于乱码的第一种情况，我们只要穷举所有的编码方式，然后打印输出，看看哪个是正常的，就OK了<a href=\"#3\">看这</a>。</li>\n<li>对于给定一个乱码字符串(只进行过一次转码)，我们可以先改变回原来的二进制，然后用正确的编码解析这个二进制，<a href=\"#4\">看这</a>。</li>\n</ol>\n<h1 id=\"Java代码演示\"><a href=\"#Java代码演示\" class=\"headerlink\" title=\"Java代码演示\"></a>Java代码演示</h1><h2 id=\"错误的解析导致正确的结果\"><a href=\"#错误的解析导致正确的结果\" class=\"headerlink\" title=\"错误的解析导致正确的结果\"></a>错误的解析导致正确的结果<span id=\"1\"></span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">    System.out.println(Charset.defaultCharset());</span><br><span class=\"line\">    String s=<span class=\"string\">\"water 1234\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] utf8_bytes = s.getBytes();<span class=\"comment\">//utf-8的二进制</span></span><br><span class=\"line\">    Set&lt;String&gt; char_encodings =Charset.availableCharsets().keySet();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String encoding:char_encodings)&#123;</span><br><span class=\"line\">        String res = <span class=\"keyword\">new</span> String(utf8_bytes, encoding);</span><br><span class=\"line\">        System.out.println(encoding+<span class=\"string\">\":   \"</span>+res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果(部分)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Big5:   water 1234</span><br><span class=\"line\">EUC-JP:   water 1234</span><br><span class=\"line\">GB2312:   water 1234</span><br><span class=\"line\">GBK:   water 1234</span><br><span class=\"line\">IBM-Thai:   ป/ธฒถ\u0016</span><br><span class=\"line\">UTF-16:   睡瑥爠ㄲ㌴</span><br><span class=\"line\">UTF-8:   water 1234</span><br><span class=\"line\">UTF-32:   ���</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同编码的二进制表示\"><a href=\"#不同编码的二进制表示\" class=\"headerlink\" title=\"不同编码的二进制表示\"></a>不同编码的二进制表示<span id=\"2\"></span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">    String s=<span class=\"string\">\"中\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] A = s.getBytes(<span class=\"string\">\"GBK\"</span>);</span><br><span class=\"line\">    String s1=<span class=\"keyword\">new</span> String(A,<span class=\"string\">\"GBK\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] B = s1.getBytes(<span class=\"string\">\"UTF-16\"</span>);</span><br><span class=\"line\">    soutBytes(A);</span><br><span class=\"line\">    soutBytes(B);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GBK: -42-48</span><br><span class=\"line\">UTF_16: -2-17845</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一种乱码解决办法\"><a href=\"#第一种乱码解决办法\" class=\"headerlink\" title=\"第一种乱码解决办法\"></a>第一种乱码解决办法<span id=\"3\"></span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">    Set&lt;String&gt; char_encodings = Charset.availableCharsets().keySet();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String encoding:char_encodings)&#123;</span><br><span class=\"line\">        String res = <span class=\"keyword\">new</span> String(bytes, encoding);</span><br><span class=\"line\">        System.out.println(encoding+<span class=\"string\">\":   \"</span>+res);<span class=\"comment\">//输出解读结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二种乱码解决办法\"><a href=\"#第二种乱码解决办法\" class=\"headerlink\" title=\"第二种乱码解决办法\"></a>第二种乱码解决办法<span id=\"4\"></span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于一个字符串，误以为他是某种编码，然后又对他进行转码操作。</span></span><br><span class=\"line\"><span class=\"comment\">//导致二进制进行了一次改变。</span></span><br><span class=\"line\"><span class=\"comment\">//解决办法，改回原来的二进制，然后以正确的编码进行解析</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span> <span class=\"params\">(String str)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">    Set&lt;String&gt; char_encodings = Charset.availableCharsets().keySet();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(String encode_byte:char_encodings)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String encode_read:char_encodings)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = str.getBytes(encode_byte);<span class=\"comment\">//改回原来的二进制</span></span><br><span class=\"line\">            String s=<span class=\"keyword\">new</span> String(bytes,encode_read);<span class=\"comment\">//以正确的方式进行解析</span></span><br><span class=\"line\">            System.out.println(s);<span class=\"comment\">//查看是否正确</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Java"],"tags":["学习"]},{"title":"linux常用软件安装","url":"https://threewater.xyz/2019/01/23/linux-app-install/","content":"<h1 id=\"CentOS上JDK，TOMCAT，MYSQL的安装\"><a href=\"#CentOS上JDK，TOMCAT，MYSQL的安装\" class=\"headerlink\" title=\"CentOS上JDK，TOMCAT，MYSQL的安装\"></a>CentOS上JDK，TOMCAT，MYSQL的安装</h1><blockquote>\n<p>环境：centos7 ，jdk18，mysql5.7</p>\n</blockquote>\n<h2 id=\"JDK8的安装\"><a href=\"#JDK8的安装\" class=\"headerlink\" title=\"JDK8的安装\"></a>JDK8的安装</h2><h3 id=\"1-安装基本工具\"><a href=\"#1-安装基本工具\" class=\"headerlink\" title=\"1.安装基本工具\"></a>1.安装基本工具</h3><pre><code>yum install wget\nyum install vim</code></pre><h3 id=\"2-使用wget下载jdk-rpm包\"><a href=\"#2-使用wget下载jdk-rpm包\" class=\"headerlink\" title=\"2.使用wget下载jdk.rpm包\"></a>2.使用wget下载jdk.rpm包</h3><pre><code>64位\nwget --no-cookie --no-check-certificate --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.rpm -O jdk-8u102-linux-x64.rpm\n如果是32系统，请下载32包</code></pre><h3 id=\"3-使用rpm命令安装jdk\"><a href=\"#3-使用rpm命令安装jdk\" class=\"headerlink\" title=\"3.使用rpm命令安装jdk\"></a>3.使用rpm命令安装jdk</h3><pre><code>rpm -ivh jdk8.rpm</code></pre><h3 id=\"4-检验是否安装成功\"><a href=\"#4-检验是否安装成功\" class=\"headerlink\" title=\"4.检验是否安装成功\"></a>4.检验是否安装成功</h3><pre><code>java-version\njava\njavac</code></pre><h2 id=\"tomcat的安装\"><a href=\"#tomcat的安装\" class=\"headerlink\" title=\"tomcat的安装\"></a>tomcat的安装</h2><h3 id=\"1-使用wget下载tomcat-tar-tgz压缩包\"><a href=\"#1-使用wget下载tomcat-tar-tgz压缩包\" class=\"headerlink\" title=\"1.使用wget下载tomcat.tar.tgz压缩包\"></a>1.使用wget下载tomcat.tar.tgz压缩包</h3><pre><code>wget http://archive.apache.org/dist/tomcat/tomcat-9/v9.0.8/bin/apache-tomcat-9.0.8.tar.gz</code></pre><h3 id=\"2-使用tar命令解压\"><a href=\"#2-使用tar命令解压\" class=\"headerlink\" title=\"2.使用tar命令解压\"></a>2.使用tar命令解压</h3><pre><code>tar -zxvf tomcat.tar.gz</code></pre><h3 id=\"3-复制tomcat到-usr-tomcat目录下\"><a href=\"#3-复制tomcat到-usr-tomcat目录下\" class=\"headerlink\" title=\"3.复制tomcat到/usr/tomcat目录下\"></a>3.复制tomcat到/usr/tomcat目录下</h3><pre><code>mv tomcat /usr/tomcat</code></pre><h3 id=\"4-进入tomcat目录\"><a href=\"#4-进入tomcat目录\" class=\"headerlink\" title=\"4.进入tomcat目录\"></a>4.进入tomcat目录</h3><pre><code>cd /usr/tomcat/</code></pre><h3 id=\"5-配置tomcat-home环境变量\"><a href=\"#5-配置tomcat-home环境变量\" class=\"headerlink\" title=\"5.配置tomcat_home环境变量\"></a>5.配置tomcat_home环境变量</h3><pre><code>vim /etc/profile\nexport TOMCAT_HOME=/user/tomcat/</code></pre><h3 id=\"6-进入tomcat的bin目录，启动tomcat\"><a href=\"#6-进入tomcat的bin目录，启动tomcat\" class=\"headerlink\" title=\"6.进入tomcat的bin目录，启动tomcat\"></a>6.进入tomcat的bin目录，启动tomcat</h3><pre><code>cd /usr/tomcat/bin\nchmod +x *.sh # 赋予可执行权限\n./startup.sh</code></pre><h3 id=\"7-更改tomcat的默认端口号为80\"><a href=\"#7-更改tomcat的默认端口号为80\" class=\"headerlink\" title=\"7.更改tomcat的默认端口号为80\"></a>7.更改tomcat的默认端口号为80</h3><pre><code>vim /usr/tomcat/conf/server.xml\n找到&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;\n改为80</code></pre><h3 id=\"8-查看tomcat日志\"><a href=\"#8-查看tomcat日志\" class=\"headerlink\" title=\"8.查看tomcat日志\"></a>8.查看tomcat日志</h3><pre><code>cd ../logs\ntail -f catalina.out</code></pre><h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><h3 id=\"1-下载mysql软件源\"><a href=\"#1-下载mysql软件源\" class=\"headerlink\" title=\"1.下载mysql软件源\"></a>1.下载mysql软件源</h3><pre><code>wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</code></pre><h3 id=\"2-安装软件源\"><a href=\"#2-安装软件源\" class=\"headerlink\" title=\"2.安装软件源\"></a>2.安装软件源</h3><pre><code>rpm -Uvh mysql.rpm</code></pre><h3 id=\"3-配置mysql安装文件\"><a href=\"#3-配置mysql安装文件\" class=\"headerlink\" title=\"3.配置mysql安装文件\"></a>3.配置mysql安装文件</h3><pre><code>vim /etc/yum.repos.d/mysql-community.repo\n把需要的安装数据库enable改为1，不需要的改为0</code></pre><h3 id=\"4-安装mysql\"><a href=\"#4-安装mysql\" class=\"headerlink\" title=\"4.安装mysql\"></a>4.安装mysql</h3><pre><code>yum install mysql-community-server</code></pre><h3 id=\"5-查看mysql自动生成的初始密码\"><a href=\"#5-查看mysql自动生成的初始密码\" class=\"headerlink\" title=\"5.查看mysql自动生成的初始密码\"></a>5.查看mysql自动生成的初始密码</h3><pre><code>vim /var/log/mysqld.log\n找到其中的temporary password</code></pre><h3 id=\"6-使用初始密码登录\"><a href=\"#6-使用初始密码登录\" class=\"headerlink\" title=\"6.使用初始密码登录\"></a>6.使用初始密码登录</h3><pre><code>mysql -uroot -p</code></pre><h3 id=\"7-降低mysql对密码的检验强度\"><a href=\"#7-降低mysql对密码的检验强度\" class=\"headerlink\" title=\"7.降低mysql对密码的检验强度\"></a>7.降低mysql对密码的检验强度</h3><pre><code>set global validate_password_policy=0;\nset global validate_password_mixed_case_count=0;\nset global validate_password_number_count=3;\nset global validate_password_special_char_count=0;\nset global validate_password_length=3;</code></pre><h3 id=\"8-设置新密码\"><a href=\"#8-设置新密码\" class=\"headerlink\" title=\"8.设置新密码\"></a>8.设置新密码</h3><pre><code>SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;123&apos;);</code></pre><h3 id=\"9-允许来自除localhost以外的其它IP连接MYSQL\"><a href=\"#9-允许来自除localhost以外的其它IP连接MYSQL\" class=\"headerlink\" title=\"9.允许来自除localhost以外的其它IP连接MYSQL\"></a>9.允许来自除localhost以外的其它IP连接MYSQL</h3><pre><code>use mysql;\n//查看用户表\nselect user,authentication_string,host from user;\nCREATE USER &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;你的密码&apos;;\nGRANT ALL ON *.* TO &apos;root&apos;@&apos;%&apos;;\nALTER USER &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;你的密码&apos;;\n//刷新权限\nFLUSH PRIVILEGES; </code></pre><h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><pre><code>查看软件是否安装\nrpm -qa | grep jdk\n卸载软件\nrpm -e --nodeps  # 上面查询到的软件名</code></pre>","categories":["服务器"],"tags":["配置"]},{"title":"tomcat9配置HTTPS","url":"https://threewater.xyz/2019/01/23/tomcat9_config_https/","content":"<h1 id=\"tomcat9-0-8实现https\"><a href=\"#tomcat9-0-8实现https\" class=\"headerlink\" title=\"tomcat9.0.8实现https\"></a>tomcat9.0.8实现https</h1><h2 id=\"1-获取SSL证书\"><a href=\"#1-获取SSL证书\" class=\"headerlink\" title=\"1.获取SSL证书\"></a>1.获取SSL证书</h2><p>这个就不多说了，直接去阿里云弄一个免费的</p>\n<h2 id=\"2-下载证书\"><a href=\"#2-下载证书\" class=\"headerlink\" title=\"2.下载证书\"></a>2.下载证书</h2><p>下载tomcat的</p>\n<h2 id=\"3-把pfx文件转成jks文件\"><a href=\"#3-把pfx文件转成jks文件\" class=\"headerlink\" title=\"3.把pfx文件转成jks文件\"></a>3.把pfx文件转成jks文件</h2><p>这个可以用jdk/bin目录下的keytool文件来生成<br>不多说了，注意：新的jks文件密钥最好和pfx文件的密钥一致，这个密钥就是你下载压缩包中的密码</p>\n<h2 id=\"4-重点，配置tomcat的server-xml文件\"><a href=\"#4-重点，配置tomcat的server-xml文件\" class=\"headerlink\" title=\"4.重点，配置tomcat的server.xml文件\"></a>4.重点，配置tomcat的server.xml文件</h2><p>取消<code>&lt;Connector port=8443标签</code>注释，然后删除它，不要犹豫！把这个标签改成如下格式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8443\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"org.apache.coyote.http11.Http11NioProtocol\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"150\"</span> <span class=\"attr\">SSLEnabled</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">compression</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">scheme</span>=<span class=\"string\">\"https\"</span> <span class=\"attr\">secure</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">keystoreFile</span>=<span class=\"string\">\"conf/a.jks\"</span> # 你的<span class=\"attr\">jks</span>文件路径，和<span class=\"attr\">server.xml</span>在同一目录下</span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">keystorePass</span>=<span class=\"string\">\"下载后压缩包里面的密码\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">SSLVerifyClient</span>=<span class=\"string\">\"none\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">SSLProtocol</span>=<span class=\"string\">\"TLSv1.2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;Connector post=80</code>标签加上redirect属性，如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">               <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"各个证书文件的解释\"><a href=\"#各个证书文件的解释\" class=\"headerlink\" title=\"各个证书文件的解释\"></a>各个证书文件的解释</h3><p>一般，证书有很多种格式，如pfx，cert，crt什么的，它们都是用来存放证书信息的<br>其实他们有一个统一的名称叫<code>keystore</code>。它们是可以相互转换的，转换工具有java的keytool</p>\n<h3 id=\"证书是对域名有效的\"><a href=\"#证书是对域名有效的\" class=\"headerlink\" title=\"证书是对域名有效的\"></a>证书是对域名有效的</h3><p>如果你在本地配置好了，然后测试，chrome提示这不是安全连接，说明你已经配置好了。<br>为什么会提示不安全连接，因为你的域名是localhost，而不是你的域名。部署到服务器就好了。</p>\n<h3 id=\"出现问题怎么办\"><a href=\"#出现问题怎么办\" class=\"headerlink\" title=\"出现问题怎么办\"></a>出现问题怎么办</h3><p>查看tomcat log文件，google</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href>https原理</a>,<a href>域名解析原理</a></p>\n","categories":["服务器"],"tags":["配置"]},{"title":"category","url":"https://threewater.xyz/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"https://threewater.xyz/about/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://threewater.xyz/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://threewater.xyz/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://threewater.xyz/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://threewater.xyz/tag/index.html","content":"","categories":[],"tags":[]}]